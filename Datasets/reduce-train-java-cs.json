[
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListSpeechSynthesisTasksResult listSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request) {request = beforeClientExecution(request);return executeListSpeechSynthesisTasks(request);}",
    "output": "public virtual ListSpeechSynthesisTasksResponse ListSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSpeechSynthesisTasksRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSpeechSynthesisTasksResponseUnmarshaller.Instance;return Invoke<ListSpeechSynthesisTasksResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListSpeechSynthesisTasksResponse ListSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSpeechSynthesisTasksRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSpeechSynthesisTasksResponseUnmarshaller.Instance;return Invoke<ListSpeechSynthesisTasksResponse>(request, options);}",
    "output": "public ListSpeechSynthesisTasksResult listSpeechSynthesisTasks(ListSpeechSynthesisTasksRequest request) {request = beforeClientExecution(request);return executeListSpeechSynthesisTasks(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateJourneyStateResult updateJourneyState(UpdateJourneyStateRequest request) {request = beforeClientExecution(request);return executeUpdateJourneyState(request);}",
    "output": "public virtual UpdateJourneyStateResponse UpdateJourneyState(UpdateJourneyStateRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateJourneyStateRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateJourneyStateResponseUnmarshaller.Instance;return Invoke<UpdateJourneyStateResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateJourneyStateResponse UpdateJourneyState(UpdateJourneyStateRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateJourneyStateRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateJourneyStateResponseUnmarshaller.Instance;return Invoke<UpdateJourneyStateResponse>(request, options);}",
    "output": "public UpdateJourneyStateResult updateJourneyState(UpdateJourneyStateRequest request) {request = beforeClientExecution(request);return executeUpdateJourneyState(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void removePresentationFormat() {remove1stProperty(PropertyIDMap.PID_PRESFORMAT);}",
    "output": "public void RemovePresentationFormat(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_PRESFORMAT);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void RemovePresentationFormat(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_PRESFORMAT);}",
    "output": "public void removePresentationFormat() {remove1stProperty(PropertyIDMap.PID_PRESFORMAT);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol) {this();addCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}",
    "output": "public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol): this(){AddCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol): this(){AddCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}",
    "output": "public CellRangeAddressList(int firstRow, int lastRow, int firstCol, int lastCol) {this();addCellRangeAddress(firstRow, firstCol, lastRow, lastCol);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void delete(int key) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {if (mValues[i] != DELETED) {mValues[i] = DELETED;mGarbage = true;}}}",
    "output": "public virtual void delete(int key){int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0){if (mValues[i] != DELETED){mValues[i] = DELETED;mGarbage = true;}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void delete(int key){int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0){if (mValues[i] != DELETED){mValues[i] = DELETED;mGarbage = true;}}}",
    "output": "public void delete(int key) {int i = binarySearch(mKeys, 0, mSize, key);if (i >= 0) {if (mValues[i] != DELETED) {mValues[i] = DELETED;mGarbage = true;}}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateBranchCommand setStartPoint(RevCommit startPoint) {checkCallable();this.startCommit = startPoint;this.startPoint = null;return this;}",
    "output": "public virtual NGit.Api.CreateBranchCommand SetStartPoint(RevCommit startPoint){CheckCallable();this.startCommit = startPoint;this.startPoint = null;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.CreateBranchCommand SetStartPoint(RevCommit startPoint){CheckCallable();this.startCommit = startPoint;this.startPoint = null;return this;}",
    "output": "public CreateBranchCommand setStartPoint(RevCommit startPoint) {checkCallable();this.startCommit = startPoint;this.startPoint = null;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int centerX() {return x + w / 2;}",
    "output": "public int centerX(){return (left + right) >> 1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int centerX(){return (left + right) >> 1;}",
    "output": "public int centerX() {return x + w / 2;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListPresetsResult listPresets() {return listPresets(new ListPresetsRequest());}",
    "output": "public virtual ListPresetsResponse ListPresets(){return ListPresets(new ListPresetsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListPresetsResponse ListPresets(){return ListPresets(new ListPresetsRequest());}",
    "output": "public ListPresetsResult listPresets() {return listPresets(new ListPresetsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteFolderContentsResult deleteFolderContents(DeleteFolderContentsRequest request) {request = beforeClientExecution(request);return executeDeleteFolderContents(request);}",
    "output": "public virtual DeleteFolderContentsResponse DeleteFolderContents(DeleteFolderContentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFolderContentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFolderContentsResponseUnmarshaller.Instance;return Invoke<DeleteFolderContentsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteFolderContentsResponse DeleteFolderContents(DeleteFolderContentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFolderContentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFolderContentsResponseUnmarshaller.Instance;return Invoke<DeleteFolderContentsResponse>(request, options);}",
    "output": "public DeleteFolderContentsResult deleteFolderContents(DeleteFolderContentsRequest request) {request = beforeClientExecution(request);return executeDeleteFolderContents(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetConsoleOutputResult getConsoleOutput(GetConsoleOutputRequest request) {request = beforeClientExecution(request);return executeGetConsoleOutput(request);}",
    "output": "public virtual GetConsoleOutputResponse GetConsoleOutput(GetConsoleOutputRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetConsoleOutputRequestMarshaller.Instance;options.ResponseUnmarshaller = GetConsoleOutputResponseUnmarshaller.Instance;return Invoke<GetConsoleOutputResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetConsoleOutputResponse GetConsoleOutput(GetConsoleOutputRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetConsoleOutputRequestMarshaller.Instance;options.ResponseUnmarshaller = GetConsoleOutputResponseUnmarshaller.Instance;return Invoke<GetConsoleOutputResponse>(request, options);}",
    "output": "public GetConsoleOutputResult getConsoleOutput(GetConsoleOutputRequest request) {request = beforeClientExecution(request);return executeGetConsoleOutput(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutMailboxPermissionsResult putMailboxPermissions(PutMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executePutMailboxPermissions(request);}",
    "output": "public virtual PutMailboxPermissionsResponse PutMailboxPermissions(PutMailboxPermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMailboxPermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMailboxPermissionsResponseUnmarshaller.Instance;return Invoke<PutMailboxPermissionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutMailboxPermissionsResponse PutMailboxPermissions(PutMailboxPermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMailboxPermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMailboxPermissionsResponseUnmarshaller.Instance;return Invoke<PutMailboxPermissionsResponse>(request, options);}",
    "output": "public PutMailboxPermissionsResult putMailboxPermissions(PutMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executePutMailboxPermissions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Cluster disableSnapshotCopy(DisableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeDisableSnapshotCopy(request);}",
    "output": "public virtual DisableSnapshotCopyResponse DisableSnapshotCopy(DisableSnapshotCopyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisableSnapshotCopyRequestMarshaller.Instance;options.ResponseUnmarshaller = DisableSnapshotCopyResponseUnmarshaller.Instance;return Invoke<DisableSnapshotCopyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DisableSnapshotCopyResponse DisableSnapshotCopy(DisableSnapshotCopyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisableSnapshotCopyRequestMarshaller.Instance;options.ResponseUnmarshaller = DisableSnapshotCopyResponseUnmarshaller.Instance;return Invoke<DisableSnapshotCopyResponse>(request, options);}",
    "output": "public Cluster disableSnapshotCopy(DisableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeDisableSnapshotCopy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String stripExtension(String filename) {int idx = filename.indexOf('.');if (idx != -1) {filename = filename.substring(0, idx);}return filename;}",
    "output": "public static string StripExtension(string filename){int idx = filename.IndexOf('.');if (idx != -1){filename = filename.Substring(0, idx);}return filename;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string StripExtension(string filename){int idx = filename.IndexOf('.');if (idx != -1){filename = filename.Substring(0, idx);}return filename;}",
    "output": "public static String stripExtension(String filename) {int idx = filename.indexOf('.');if (idx != -1) {filename = filename.substring(0, idx);}return filename;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}",
    "output": "public override java.nio.ByteBuffer putInt(int value){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer putInt(int value){throw new System.NotImplementedException();}",
    "output": "public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int lastIndexOf(final int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[ rval ]){break;}}return rval;}",
    "output": "public int LastIndexOf(int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[rval]){break;}}return rval;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int LastIndexOf(int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[rval]){break;}}return rval;}",
    "output": "public int lastIndexOf(final int o){int rval = _limit - 1;for (; rval >= 0; rval--){if (o == _array[ rval ]){break;}}return rval;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setCountsByTime(int[] counts, long msecStep) {countsByTime = counts;countsByTimeStepMSec = msecStep;}",
    "output": "public virtual void SetCountsByTime(int[] counts, long msecStep){countsByTime = counts;countsByTimeStepMSec = msecStep;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetCountsByTime(int[] counts, long msecStep){countsByTime = counts;countsByTimeStepMSec = msecStep;}",
    "output": "public void setCountsByTime(int[] counts, long msecStep) {countsByTime = counts;countsByTimeStepMSec = msecStep;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FeatHdrRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved = in.readByte();cbHdrData = in.readInt();rgbHdrData = in.readRemainder();}",
    "output": "public FeatHdrRecord(RecordInputStream in1){futureHeader = new FtrHeader(in1);isf_sharedFeatureType = in1.ReadShort();reserved = (byte)in1.ReadByte();cbHdrData = in1.ReadInt();rgbHdrData = in1.ReadRemainder();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FeatHdrRecord(RecordInputStream in1){futureHeader = new FtrHeader(in1);isf_sharedFeatureType = in1.ReadShort();reserved = (byte)in1.ReadByte();cbHdrData = in1.ReadInt();rgbHdrData = in1.ReadRemainder();}",
    "output": "public FeatHdrRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved = in.readByte();cbHdrData = in.readInt();rgbHdrData = in.readRemainder();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CopyOnWriteArrayList() {elements = EmptyArray.OBJECT;}",
    "output": "public CopyOnWriteArrayList(){elements = libcore.util.EmptyArray.OBJECT;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CopyOnWriteArrayList(){elements = libcore.util.EmptyArray.OBJECT;}",
    "output": "public CopyOnWriteArrayList() {elements = EmptyArray.OBJECT;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public WriteRequest(DeleteRequest deleteRequest) {setDeleteRequest(deleteRequest);}",
    "output": "public WriteRequest(DeleteRequest deleteRequest){_deleteRequest = deleteRequest;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public WriteRequest(DeleteRequest deleteRequest){_deleteRequest = deleteRequest;}",
    "output": "public WriteRequest(DeleteRequest deleteRequest) {setDeleteRequest(deleteRequest);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void readFully(byte[] buf){_in.readFully(buf);}",
    "output": "public void ReadFully(byte[] buf){_in.ReadFully(buf);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void ReadFully(byte[] buf){_in.ReadFully(buf);}",
    "output": "public void readFully(byte[] buf){_in.readFully(buf);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Cell getCell(Row row, int columnIndex) {Cell cell = row.getCell(columnIndex);if (cell == null) {cell = row.createCell(columnIndex);}return cell;}",
    "output": "public static ICell GetCell(IRow row, int column){ICell cell = row.GetCell(column);if (cell == null){cell = row.CreateCell(column);}return cell;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static ICell GetCell(IRow row, int column){ICell cell = row.GetCell(column);if (cell == null){cell = row.CreateCell(column);}return cell;}",
    "output": "public static Cell getCell(Row row, int columnIndex) {Cell cell = row.getCell(columnIndex);if (cell == null) {cell = row.createCell(columnIndex);}return cell;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setPackConfig(PackConfig pc) {this.packConfig = pc;}",
    "output": "public virtual void SetPackConfig(PackConfig pc){this.packConfig = pc;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetPackConfig(PackConfig pc){this.packConfig = pc;}",
    "output": "public void setPackConfig(PackConfig pc) {this.packConfig = pc;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getSignerName() {return \"HMAC-SHA1\";}",
    "output": "public override string GetSignerName(){return \"HMAC-SHA1\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string GetSignerName(){return \"HMAC-SHA1\";}",
    "output": "public String getSignerName() {return \"HMAC-SHA1\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IntervalSet or(IntSet a) {IntervalSet o = new IntervalSet();o.addAll(this);o.addAll(a);return o;}",
    "output": "public virtual Antlr4.Runtime.Misc.IntervalSet Or(IIntSet a){Antlr4.Runtime.Misc.IntervalSet o = new Antlr4.Runtime.Misc.IntervalSet();o.AddAll(this);o.AddAll(a);return o;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual Antlr4.Runtime.Misc.IntervalSet Or(IIntSet a){Antlr4.Runtime.Misc.IntervalSet o = new Antlr4.Runtime.Misc.IntervalSet();o.AddAll(this);o.AddAll(a);return o;}",
    "output": "public IntervalSet or(IntSet a) {IntervalSet o = new IntervalSet();o.addAll(this);o.addAll(a);return o;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return getClass().getName() + \" [\" +_value +\"]\";}",
    "output": "public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(\" [\");sb.Append(value);sb.Append(\"]\");return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(\" [\");sb.Append(value);sb.Append(\"]\");return sb.ToString();}",
    "output": "public String toString() {return getClass().getName() + \" [\" +_value +\"]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeVpcEndpointServicePermissionsResult describeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServicePermissions(request);}",
    "output": "public virtual DescribeVpcEndpointServicePermissionsResponse DescribeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcEndpointServicePermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcEndpointServicePermissionsResponseUnmarshaller.Instance;return Invoke<DescribeVpcEndpointServicePermissionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeVpcEndpointServicePermissionsResponse DescribeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcEndpointServicePermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcEndpointServicePermissionsResponseUnmarshaller.Instance;return Invoke<DescribeVpcEndpointServicePermissionsResponse>(request, options);}",
    "output": "public DescribeVpcEndpointServicePermissionsResult describeVpcEndpointServicePermissions(DescribeVpcEndpointServicePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServicePermissions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static byte[] copyOfRange(byte[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}",
    "output": "public static byte[] copyOfRange(byte[] original, int start, int end){if (start > end){throw new System.ArgumentException();}int originalLength = original.Length;if (start < 0 || start > originalLength){throw new System.IndexOutOfRangeException();}int resultLength = end - start;int copyLength = System.Math.Min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.Array.Copy(original, start, result, 0, copyLength);return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static byte[] copyOfRange(byte[] original, int start, int end){if (start > end){throw new System.ArgumentException();}int originalLength = original.Length;if (start < 0 || start > originalLength){throw new System.IndexOutOfRangeException();}int resultLength = end - start;int copyLength = System.Math.Min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.Array.Copy(original, start, result, 0, copyLength);return result;}",
    "output": "public static byte[] copyOfRange(byte[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);byte[] result = new byte[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTopicsRequest(String nextToken) {setNextToken(nextToken);}",
    "output": "public ListTopicsRequest(string nextToken){_nextToken = nextToken;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ListTopicsRequest(string nextToken){_nextToken = nextToken;}",
    "output": "public ListTopicsRequest(String nextToken) {setNextToken(nextToken);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void finish(FieldInfos fis, int numDocs) throws IOException {if (!pendingDocs.isEmpty()) {flush();numDirtyChunks++; }if (numDocs != this.numDocs) {throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);}indexWriter.finish(numDocs, vectorsStream.getFilePointer());vectorsStream.writeVLong(numChunks);vectorsStream.writeVLong(numDirtyChunks);CodecUtil.writeFooter(vectorsStream);}",
    "output": "public override void Finish(FieldInfos fis, int numDocs){if (!(pendingDocs.Count == 0)){Flush();}if (numDocs != this.numDocs){throw new Exception(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);}indexWriter.Finish(numDocs, vectorsStream.GetFilePointer());CodecUtil.WriteFooter(vectorsStream);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Finish(FieldInfos fis, int numDocs){if (!(pendingDocs.Count == 0)){Flush();}if (numDocs != this.numDocs){throw new Exception(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);}indexWriter.Finish(numDocs, vectorsStream.GetFilePointer());CodecUtil.WriteFooter(vectorsStream);}",
    "output": "public void finish(FieldInfos fis, int numDocs) throws IOException {if (!pendingDocs.isEmpty()) {flush();numDirtyChunks++; }if (numDocs != this.numDocs) {throw new RuntimeException(\"Wrote \" + this.numDocs + \" docs, finish called with numDocs=\" + numDocs);}indexWriter.finish(numDocs, vectorsStream.getFilePointer());vectorsStream.writeVLong(numChunks);vectorsStream.writeVLong(numDirtyChunks);CodecUtil.writeFooter(vectorsStream);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isIndexTerm(BytesRef term, TermStats stats) {if (count >= interval) {count = 1;return true;} else {count++;return false;}}",
    "output": "public override bool IsIndexTerm(BytesRef term, TermStats stats){if (count >= interval){count = 1;return true;}else{count++;return false;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool IsIndexTerm(BytesRef term, TermStats stats){if (count >= interval){count = 1;return true;}else{count++;return false;}}",
    "output": "public boolean isIndexTerm(BytesRef term, TermStats stats) {if (count >= interval) {count = 1;return true;} else {count++;return false;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AssociateDhcpOptionsResult associateDhcpOptions(AssociateDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeAssociateDhcpOptions(request);}",
    "output": "public virtual AssociateDhcpOptionsResponse AssociateDhcpOptions(AssociateDhcpOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociateDhcpOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociateDhcpOptionsResponseUnmarshaller.Instance;return Invoke<AssociateDhcpOptionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AssociateDhcpOptionsResponse AssociateDhcpOptions(AssociateDhcpOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociateDhcpOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociateDhcpOptionsResponseUnmarshaller.Instance;return Invoke<AssociateDhcpOptionsResponse>(request, options);}",
    "output": "public AssociateDhcpOptionsResult associateDhcpOptions(AssociateDhcpOptionsRequest request) {request = beforeClientExecution(request);return executeAssociateDhcpOptions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {return evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2){return Evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2){return Evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {return evaluate(srcRowIndex, srcColumnIndex, arg0, arg1, arg2, DEFAULT_ARG3);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void disconnect() {if (sock.isConnected())sock.disconnect();}",
    "output": "public virtual void Disconnect(){if (sock.IsConnected()){sock.Disconnect();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Disconnect(){if (sock.IsConnected()){sock.Disconnect();}}",
    "output": "public void disconnect() {if (sock.isConnected())sock.disconnect();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PredictionContext add(PredictionContext ctx) {if ( ctx==PredictionContext.EMPTY ) return PredictionContext.EMPTY;PredictionContext existing = cache.get(ctx);if ( existing!=null ) {return existing;}cache.put(ctx, ctx);return ctx;}",
    "output": "public PredictionContext Add(PredictionContext ctx){if (ctx == PredictionContext.EMPTY)return PredictionContext.EMPTY;PredictionContext existing = cache.Get(ctx);if (existing != null){return existing;}cache.Put(ctx, ctx);return ctx;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PredictionContext Add(PredictionContext ctx){if (ctx == PredictionContext.EMPTY)return PredictionContext.EMPTY;PredictionContext existing = cache.Get(ctx);if (existing != null){return existing;}cache.Put(ctx, ctx);return ctx;}",
    "output": "public PredictionContext add(PredictionContext ctx) {if ( ctx==PredictionContext.EMPTY ) return PredictionContext.EMPTY;PredictionContext existing = cache.get(ctx);if ( existing!=null ) {return existing;}cache.put(ctx, ctx);return ctx;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UploadLayerPartResult uploadLayerPart(UploadLayerPartRequest request) {request = beforeClientExecution(request);return executeUploadLayerPart(request);}",
    "output": "public virtual UploadLayerPartResponse UploadLayerPart(UploadLayerPartRequest request){var options = new InvokeOptions();options.RequestMarshaller = UploadLayerPartRequestMarshaller.Instance;options.ResponseUnmarshaller = UploadLayerPartResponseUnmarshaller.Instance;return Invoke<UploadLayerPartResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UploadLayerPartResponse UploadLayerPart(UploadLayerPartRequest request){var options = new InvokeOptions();options.RequestMarshaller = UploadLayerPartRequestMarshaller.Instance;options.ResponseUnmarshaller = UploadLayerPartResponseUnmarshaller.Instance;return Invoke<UploadLayerPartResponse>(request, options);}",
    "output": "public UploadLayerPartResult uploadLayerPart(UploadLayerPartRequest request) {request = beforeClientExecution(request);return executeUploadLayerPart(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getScriptText() {return getScriptText(null, null);}",
    "output": "public virtual string GetScriptText(){return GetScriptText(null, null);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetScriptText(){return GetScriptText(null, null);}",
    "output": "public String getScriptText() {return getScriptText(null, null);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeClusterSubnetGroupsResult describeClusterSubnetGroups() {return describeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}",
    "output": "public virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups(){return DescribeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups(){return DescribeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}",
    "output": "public DescribeClusterSubnetGroupsResult describeClusterSubnetGroups() {return describeClusterSubnetGroups(new DescribeClusterSubnetGroupsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public char setIndex(int position) {if (position < getBeginIndex() || position > getEndIndex())throw new IllegalArgumentException(\"Illegal Position: \" + position);index = start + position;return current();}",
    "output": "public override char SetIndex(int position){if (position < BeginIndex || position > EndIndex)throw new ArgumentException(\"Illegal Position: \" + position);index = start + position;return Current;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override char SetIndex(int position){if (position < BeginIndex || position > EndIndex)throw new ArgumentException(\"Illegal Position: \" + position);index = start + position;return Current;}",
    "output": "public char setIndex(int position) {if (position < getBeginIndex() || position > getEndIndex())throw new IllegalArgumentException(\"Illegal Position: \" + position);index = start + position;return current();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetPhoneNumberOrderResult getPhoneNumberOrder(GetPhoneNumberOrderRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberOrder(request);}",
    "output": "public virtual GetPhoneNumberOrderResponse GetPhoneNumberOrder(GetPhoneNumberOrderRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetPhoneNumberOrderRequestMarshaller.Instance;options.ResponseUnmarshaller = GetPhoneNumberOrderResponseUnmarshaller.Instance;return Invoke<GetPhoneNumberOrderResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetPhoneNumberOrderResponse GetPhoneNumberOrder(GetPhoneNumberOrderRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetPhoneNumberOrderRequestMarshaller.Instance;options.ResponseUnmarshaller = GetPhoneNumberOrderResponseUnmarshaller.Instance;return Invoke<GetPhoneNumberOrderResponse>(request, options);}",
    "output": "public GetPhoneNumberOrderResult getPhoneNumberOrder(GetPhoneNumberOrderRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberOrder(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public EpsilonTransition(ATNState target, int outermostPrecedenceReturn) {super(target);this.outermostPrecedenceReturn = outermostPrecedenceReturn;}",
    "output": "public EpsilonTransition(ATNState target, int outermostPrecedenceReturn): base(target){this.outermostPrecedenceReturn = outermostPrecedenceReturn;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public EpsilonTransition(ATNState target, int outermostPrecedenceReturn): base(target){this.outermostPrecedenceReturn = outermostPrecedenceReturn;}",
    "output": "public EpsilonTransition(ATNState target, int outermostPrecedenceReturn) {super(target);this.outermostPrecedenceReturn = outermostPrecedenceReturn;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DiffCommand setContextLines(int contextLines) {this.contextLines = contextLines;return this;}",
    "output": "public virtual NGit.Api.DiffCommand SetContextLines(int contextLines){this.contextLines = contextLines;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.DiffCommand SetContextLines(int contextLines){this.contextLines = contextLines;return this;}",
    "output": "public DiffCommand setContextLines(int contextLines) {this.contextLines = contextLines;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RejectVpcPeeringConnectionResult rejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeRejectVpcPeeringConnection(request);}",
    "output": "public virtual RejectVpcPeeringConnectionResponse RejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RejectVpcPeeringConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = RejectVpcPeeringConnectionResponseUnmarshaller.Instance;return Invoke<RejectVpcPeeringConnectionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RejectVpcPeeringConnectionResponse RejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RejectVpcPeeringConnectionRequestMarshaller.Instance;options.ResponseUnmarshaller = RejectVpcPeeringConnectionResponseUnmarshaller.Instance;return Invoke<RejectVpcPeeringConnectionResponse>(request, options);}",
    "output": "public RejectVpcPeeringConnectionResult rejectVpcPeeringConnection(RejectVpcPeeringConnectionRequest request) {request = beforeClientExecution(request);return executeRejectVpcPeeringConnection(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static boolean equals(int[] array1, int[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}",
    "output": "public static bool equals(int[] array1, int[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length != array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i] != array2[i]){return false;}}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static bool equals(int[] array1, int[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length != array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i] != array2[i]){return false;}}}return true;}",
    "output": "public static boolean equals(int[] array1, int[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static void main(String[] args) throws IOException {if (args.length<1) {System.err.println(\"Usage: java QualityQueriesFinder <index-dir>\");System.exit(1);}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.open(Paths.get(args[0])));String q[] = qqf.bestQueries(\"body\",20);for (int i=0; i<q.length; i++) {System.out.println(newline+formatQueryAsTrecTopic(i,q[i],null,null));}}",
    "output": "public static void Main(string[] args){if (args.Length < 1){throw new ArgumentException();}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.Open(new DirectoryInfo(args[0])));string[] q = qqf.BestQueries(\"body\", 20);for (int i = 0; i < q.Length; i++){Console.WriteLine(newline + FormatQueryAsTrecTopic(i, q[i], null, null));}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static void Main(string[] args){if (args.Length < 1){throw new ArgumentException();}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.Open(new DirectoryInfo(args[0])));string[] q = qqf.BestQueries(\"body\", 20);for (int i = 0; i < q.Length; i++){Console.WriteLine(newline + FormatQueryAsTrecTopic(i, q[i], null, null));}}",
    "output": "public static void main(String[] args) throws IOException {if (args.length<1) {System.err.println(\"Usage: java QualityQueriesFinder <index-dir>\");System.exit(1);}QualityQueriesFinder qqf = new QualityQueriesFinder(FSDirectory.open(Paths.get(args[0])));String q[] = qqf.bestQueries(\"body\",20);for (int i=0; i<q.length; i++) {System.out.println(newline+formatQueryAsTrecTopic(i,q[i],null,null));}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharsRef(char[] chars, int offset, int length) {this.chars = chars;this.offset = offset;this.length = length;assert isValid();}",
    "output": "public CharsRef(char[] chars, int offset, int length){this.chars = chars;this.Offset = offset;this.Length = length;Debug.Assert(IsValid());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CharsRef(char[] chars, int offset, int length){this.chars = chars;this.Offset = offset;this.Length = length;Debug.Assert(IsValid());}",
    "output": "public CharsRef(char[] chars, int offset, int length) {this.chars = chars;this.offset = offset;this.length = length;assert isValid();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateIPSetResult updateIPSet(UpdateIPSetRequest request) {request = beforeClientExecution(request);return executeUpdateIPSet(request);}",
    "output": "public virtual UpdateIPSetResponse UpdateIPSet(UpdateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateIPSetResponseUnmarshaller.Instance;return Invoke<UpdateIPSetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateIPSetResponse UpdateIPSet(UpdateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateIPSetResponseUnmarshaller.Instance;return Invoke<UpdateIPSetResponse>(request, options);}",
    "output": "public UpdateIPSetResult updateIPSet(UpdateIPSetRequest request) {request = beforeClientExecution(request);return executeUpdateIPSet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void print(Object obj) {print(String.valueOf(obj));}",
    "output": "public virtual void print(object obj){print(Sharpen.StringHelper.GetValueOf(obj));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void print(object obj){print(Sharpen.StringHelper.GetValueOf(obj));}",
    "output": "public void print(Object obj) {print(String.valueOf(obj));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"IndexFileDeleter.CommitPoint(\" + segmentsFileName + \")\";}",
    "output": "public override string ToString(){return \"IndexFileDeleter.CommitPoint(\" + segmentsFileName + \")\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"IndexFileDeleter.CommitPoint(\" + segmentsFileName + \")\";}",
    "output": "public String toString() {return \"IndexFileDeleter.CommitPoint(\" + segmentsFileName + \")\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized boolean waitForGeneration(long targetGen, int maxMS) throws InterruptedException {if (targetGen > searchingGen) {reopenLock.lock();waitingGen = Math.max(waitingGen, targetGen);try {reopenCond.signal();} finally {reopenLock.unlock();}long startMS = System.nanoTime()/1000000;while (targetGen > searchingGen) {if (maxMS < 0) {wait();} else {long msLeft = (startMS + maxMS) - System.nanoTime()/1000000;if (msLeft <= 0) {return false;} else {wait(msLeft);}}}}return true;}",
    "output": "public virtual bool WaitForGeneration(long targetGen, int maxMS){long curGen = writer.Generation;if (targetGen > curGen){throw new System.ArgumentException(\"targetGen=\" + targetGen + \" was never returned by the ReferenceManager instance (current gen=\" + curGen + \")\");}lock (this)if (targetGen <= searchingGen)return true;else{waitingGen = Math.Max(waitingGen, targetGen);reopenCond.Set();available.Reset();}long startMS = Time.NanoTime() / 1000000;while (targetGen > Interlocked.Read(ref searchingGen)){if (maxMS < 0){available.WaitOne();}else{long msLeft = (startMS + maxMS) - (Time.NanoTime()) / 1000000;if (msLeft <= 0){return false;}else{available.WaitOne(TimeSpan.FromMilliseconds(msLeft));}}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool WaitForGeneration(long targetGen, int maxMS){long curGen = writer.Generation;if (targetGen > curGen){throw new System.ArgumentException(\"targetGen=\" + targetGen + \" was never returned by the ReferenceManager instance (current gen=\" + curGen + \")\");}lock (this)if (targetGen <= searchingGen)return true;else{waitingGen = Math.Max(waitingGen, targetGen);reopenCond.Set();available.Reset();}long startMS = Time.NanoTime() / 1000000;while (targetGen > Interlocked.Read(ref searchingGen)){if (maxMS < 0){available.WaitOne();}else{long msLeft = (startMS + maxMS) - (Time.NanoTime()) / 1000000;if (msLeft <= 0){return false;}else{available.WaitOne(TimeSpan.FromMilliseconds(msLeft));}}}return true;}",
    "output": "public synchronized boolean waitForGeneration(long targetGen, int maxMS) throws InterruptedException {if (targetGen > searchingGen) {reopenLock.lock();waitingGen = Math.max(waitingGen, targetGen);try {reopenCond.signal();} finally {reopenLock.unlock();}long startMS = System.nanoTime()/1000000;while (targetGen > searchingGen) {if (maxMS < 0) {wait();} else {long msLeft = (startMS + maxMS) - System.nanoTime()/1000000;if (msLeft <= 0) {return false;} else {wait(msLeft);}}}}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringBuffer append(boolean b) {return append(b ? \"true\" : \"false\");}",
    "output": "public java.lang.StringBuffer append(bool b){return append(b ? \"true\" : \"false\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.lang.StringBuffer append(bool b){return append(b ? \"true\" : \"false\");}",
    "output": "public StringBuffer append(boolean b) {return append(b ? \"true\" : \"false\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer put(int index, byte b) {throw new ReadOnlyBufferException();}",
    "output": "public override java.nio.ByteBuffer put(int index, byte b){throw new java.nio.ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer put(int index, byte b){throw new java.nio.ReadOnlyBufferException();}",
    "output": "public ByteBuffer put(int index, byte b) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getLineCount() {return lineCount;}",
    "output": "public virtual int GetLineCount(){return lineCount;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetLineCount(){return lineCount;}",
    "output": "public int getLineCount() {return lineCount;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals( Object o ) {return o instanceof DutchStemmer;}",
    "output": "public override bool Equals(object o){return o is DutchStemmer;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){return o is DutchStemmer;}",
    "output": "public boolean equals( Object o ) {return o instanceof DutchStemmer;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateNotificationSubscriptionResult createNotificationSubscription(CreateNotificationSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateNotificationSubscription(request);}",
    "output": "public virtual CreateNotificationSubscriptionResponse CreateNotificationSubscription(CreateNotificationSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateNotificationSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateNotificationSubscriptionResponseUnmarshaller.Instance;return Invoke<CreateNotificationSubscriptionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateNotificationSubscriptionResponse CreateNotificationSubscription(CreateNotificationSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateNotificationSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateNotificationSubscriptionResponseUnmarshaller.Instance;return Invoke<CreateNotificationSubscriptionResponse>(request, options);}",
    "output": "public CreateNotificationSubscriptionResult createNotificationSubscription(CreateNotificationSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateNotificationSubscription(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isOutdated() {return snapshot.isModified(getFile());}",
    "output": "public virtual bool IsOutdated(){return snapshot.IsModified(GetFile());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsOutdated(){return snapshot.IsModified(GetFile());}",
    "output": "public boolean isOutdated() {return snapshot.isModified(getFile());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeVirtualInterfacesResult describeVirtualInterfaces() {return describeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}",
    "output": "public virtual DescribeVirtualInterfacesResponse DescribeVirtualInterfaces(){return DescribeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeVirtualInterfacesResponse DescribeVirtualInterfaces(){return DescribeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}",
    "output": "public DescribeVirtualInterfacesResult describeVirtualInterfaces() {return describeVirtualInterfaces(new DescribeVirtualInterfacesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void onChanged() {buildMap();for (DataSetObserver o : mObservers) {o.onChanged();}}",
    "output": "public override void onChanged(){this._enclosing.refreshExpGroupMetadataList(true, true);this._enclosing.notifyDataSetChanged();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void onChanged(){this._enclosing.refreshExpGroupMetadataList(true, true);this._enclosing.notifyDataSetChanged();}",
    "output": "public void onChanged() {buildMap();for (DataSetObserver o : mObservers) {o.onChanged();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteEventTrackerResult deleteEventTracker(DeleteEventTrackerRequest request) {request = beforeClientExecution(request);return executeDeleteEventTracker(request);}",
    "output": "public virtual DeleteEventTrackerResponse DeleteEventTracker(DeleteEventTrackerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteEventTrackerRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteEventTrackerResponseUnmarshaller.Instance;return Invoke<DeleteEventTrackerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteEventTrackerResponse DeleteEventTracker(DeleteEventTrackerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteEventTrackerRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteEventTrackerResponseUnmarshaller.Instance;return Invoke<DeleteEventTrackerResponse>(request, options);}",
    "output": "public DeleteEventTrackerResult deleteEventTracker(DeleteEventTrackerRequest request) {request = beforeClientExecution(request);return executeDeleteEventTracker(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean matches(ValueEval x) {if (x instanceof BlankEval) {switch(getCode()) {case CmpOp.NONE:case CmpOp.EQ:return _value.length() == 0;case CmpOp.NE:return _value.length() != 0;}return false;}if(!(x instanceof StringEval)) {return false;}String testedValue = ((StringEval) x).getStringValue();if (testedValue.length() < 1 && _value.length() < 1) {switch(getCode()) {case CmpOp.NONE: return true;case CmpOp.EQ:   return false;case CmpOp.NE:   return true;}return false;}if (_pattern != null) {return evaluate(_pattern.matcher(testedValue).matches());}return evaluate(testedValue.compareToIgnoreCase(_value));}",
    "output": "public override bool Matches(ValueEval x){if (x is BlankEval){switch (_operator.Code){case CmpOp.NONE:case CmpOp.EQ:return _value.Length == 0;case CmpOp.NE:return _value.Length != 0;}return false;}if (!(x is StringEval)){return false;}String testedValue = ((StringEval)x).StringValue;if ((testedValue.Length < 1 && _value.Length < 1)){switch (_operator.Code){case CmpOp.NONE: return true;case CmpOp.EQ: return false;case CmpOp.NE: return true;}return false;}if (_pattern != null){return Evaluate(_pattern.IsMatch(testedValue));}return Evaluate(string.Compare(testedValue, _value, StringComparison.CurrentCultureIgnoreCase));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Matches(ValueEval x){if (x is BlankEval){switch (_operator.Code){case CmpOp.NONE:case CmpOp.EQ:return _value.Length == 0;case CmpOp.NE:return _value.Length != 0;}return false;}if (!(x is StringEval)){return false;}String testedValue = ((StringEval)x).StringValue;if ((testedValue.Length < 1 && _value.Length < 1)){switch (_operator.Code){case CmpOp.NONE: return true;case CmpOp.EQ: return false;case CmpOp.NE: return true;}return false;}if (_pattern != null){return Evaluate(_pattern.IsMatch(testedValue));}return Evaluate(string.Compare(testedValue, _value, StringComparison.CurrentCultureIgnoreCase));}",
    "output": "public boolean matches(ValueEval x) {if (x instanceof BlankEval) {switch(getCode()) {case CmpOp.NONE:case CmpOp.EQ:return _value.length() == 0;case CmpOp.NE:return _value.length() != 0;}return false;}if(!(x instanceof StringEval)) {return false;}String testedValue = ((StringEval) x).getStringValue();if (testedValue.length() < 1 && _value.length() < 1) {switch(getCode()) {case CmpOp.NONE: return true;case CmpOp.EQ:   return false;case CmpOp.NE:   return true;}return false;}if (_pattern != null) {return evaluate(_pattern.matcher(testedValue).matches());}return evaluate(testedValue.compareToIgnoreCase(_value));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListWebsiteAuthorizationProvidersResult listWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request) {request = beforeClientExecution(request);return executeListWebsiteAuthorizationProviders(request);}",
    "output": "public virtual ListWebsiteAuthorizationProvidersResponse ListWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListWebsiteAuthorizationProvidersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListWebsiteAuthorizationProvidersResponseUnmarshaller.Instance;return Invoke<ListWebsiteAuthorizationProvidersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListWebsiteAuthorizationProvidersResponse ListWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListWebsiteAuthorizationProvidersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListWebsiteAuthorizationProvidersResponseUnmarshaller.Instance;return Invoke<ListWebsiteAuthorizationProvidersResponse>(request, options);}",
    "output": "public ListWebsiteAuthorizationProvidersResult listWebsiteAuthorizationProviders(ListWebsiteAuthorizationProvidersRequest request) {request = beforeClientExecution(request);return executeListWebsiteAuthorizationProviders(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void write(char[] buf, int offset, int count) {doWrite(buf, offset, count);}",
    "output": "public override void write(char[] buf, int offset, int count){doWrite(buf, offset, count);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void write(char[] buf, int offset, int count){doWrite(buf, offset, count);}",
    "output": "public void write(char[] buf, int offset, int count) {doWrite(buf, offset, count);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String formatAsString() {if(isWholeColumnReference()) {returnCellReference.convertNumToColString(_firstCell.getCol())+ \":\" +CellReference.convertNumToColString(_lastCell.getCol());}StringBuilder sb = new StringBuilder(32);sb.append(_firstCell.formatAsString());if(!_isSingleCell) {sb.append(CELL_DELIMITER);if(_lastCell.getSheetName() == null) {sb.append(_lastCell.formatAsString());} else {_lastCell.appendCellReference(sb);}}return sb.toString();}",
    "output": "public String FormatAsString(){if (IsWholeColumnReference()){returnCellReference.ConvertNumToColString(_firstCell.Col)+ \":\" +CellReference.ConvertNumToColString(_lastCell.Col);}StringBuilder sb = new StringBuilder(32);sb.Append(_firstCell.FormatAsString());if (!_isSingleCell){sb.Append(CELL_DELIMITER);if (_lastCell.SheetName == null){sb.Append(_lastCell.FormatAsString());}else{_lastCell.AppendCellReference(sb);}}return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public String FormatAsString(){if (IsWholeColumnReference()){returnCellReference.ConvertNumToColString(_firstCell.Col)+ \":\" +CellReference.ConvertNumToColString(_lastCell.Col);}StringBuilder sb = new StringBuilder(32);sb.Append(_firstCell.FormatAsString());if (!_isSingleCell){sb.Append(CELL_DELIMITER);if (_lastCell.SheetName == null){sb.Append(_lastCell.FormatAsString());}else{_lastCell.AppendCellReference(sb);}}return sb.ToString();}",
    "output": "public String formatAsString() {if(isWholeColumnReference()) {returnCellReference.convertNumToColString(_firstCell.getCol())+ \":\" +CellReference.convertNumToColString(_lastCell.getCol());}StringBuilder sb = new StringBuilder(32);sb.append(_firstCell.formatAsString());if(!_isSingleCell) {sb.append(CELL_DELIMITER);if(_lastCell.getSheetName() == null) {sb.append(_lastCell.formatAsString());} else {_lastCell.appendCellReference(sb);}}return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Graphics create(){return new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel );}",
    "output": "public EscherGraphics Create(){EscherGraphics g = new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel);return g;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public EscherGraphics Create(){EscherGraphics g = new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel);return g;}",
    "output": "public Graphics create(){return new EscherGraphics(escherGroup, workbook,foreground, font, verticalPointsPerPixel );}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DoubleDocValues(ValueSource vs) {this.vs = vs;}",
    "output": "public DoubleDocValues(ValueSource vs){this.m_vs = vs;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DoubleDocValues(ValueSource vs){this.m_vs = vs;}",
    "output": "public DoubleDocValues(ValueSource vs) {this.vs = vs;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static CharArraySet getDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}",
    "output": "public static CharArraySet GetDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static CharArraySet GetDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}",
    "output": "public static CharArraySet getDefaultStopSet(){return DefaultSetHolder.DEFAULT_STOP_SET;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteLoadBalancerPolicyResult deleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancerPolicy(request);}",
    "output": "public virtual DeleteLoadBalancerPolicyResponse DeleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLoadBalancerPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLoadBalancerPolicyResponseUnmarshaller.Instance;return Invoke<DeleteLoadBalancerPolicyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteLoadBalancerPolicyResponse DeleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLoadBalancerPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLoadBalancerPolicyResponseUnmarshaller.Instance;return Invoke<DeleteLoadBalancerPolicyResponse>(request, options);}",
    "output": "public DeleteLoadBalancerPolicyResult deleteLoadBalancerPolicy(DeleteLoadBalancerPolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLoadBalancerPolicy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ReplicationGroup decreaseReplicaCount(DecreaseReplicaCountRequest request) {request = beforeClientExecution(request);return executeDecreaseReplicaCount(request);}",
    "output": "public virtual DecreaseReplicaCountResponse DecreaseReplicaCount(DecreaseReplicaCountRequest request){var options = new InvokeOptions();options.RequestMarshaller = DecreaseReplicaCountRequestMarshaller.Instance;options.ResponseUnmarshaller = DecreaseReplicaCountResponseUnmarshaller.Instance;return Invoke<DecreaseReplicaCountResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DecreaseReplicaCountResponse DecreaseReplicaCount(DecreaseReplicaCountRequest request){var options = new InvokeOptions();options.RequestMarshaller = DecreaseReplicaCountRequestMarshaller.Instance;options.ResponseUnmarshaller = DecreaseReplicaCountResponseUnmarshaller.Instance;return Invoke<DecreaseReplicaCountResponse>(request, options);}",
    "output": "public ReplicationGroup decreaseReplicaCount(DecreaseReplicaCountRequest request) {request = beforeClientExecution(request);return executeDecreaseReplicaCount(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Result update(RevWalk walk) throws IOException {requireCanDoUpdate();try {return result = updateImpl(walk, new Store() {@OverrideResult execute(Result status) throws IOException {if (status == Result.NO_CHANGE)return status;return doUpdate(status);}});} catch (IOException x) {result = Result.IO_FAILURE;throw x;}}",
    "output": "public virtual RefUpdate.Result Update(RevWalk walk){RequireCanDoUpdate();try{return result = UpdateImpl(walk, new _Store_484(this));}catch (IOException x){result = RefUpdate.Result.IO_FAILURE;throw;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RefUpdate.Result Update(RevWalk walk){RequireCanDoUpdate();try{return result = UpdateImpl(walk, new _Store_484(this));}catch (IOException x){result = RefUpdate.Result.IO_FAILURE;throw;}}",
    "output": "public Result update(RevWalk walk) throws IOException {requireCanDoUpdate();try {return result = updateImpl(walk, new Store() {@OverrideResult execute(Result status) throws IOException {if (status == Result.NO_CHANGE)return status;return doUpdate(status);}});} catch (IOException x) {result = Result.IO_FAILURE;throw x;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Set<String> getChanged() {return Collections.unmodifiableSet(diff.getChanged());}",
    "output": "public virtual ICollection<string> GetChanged(){return Sharpen.Collections.UnmodifiableSet(diff.GetChanged());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ICollection<string> GetChanged(){return Sharpen.Collections.UnmodifiableSet(diff.GetChanged());}",
    "output": "public Set<String> getChanged() {return Collections.unmodifiableSet(diff.getChanged());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, \"\");return sb.toString();}",
    "output": "public static string ToHex(long value){return ToHex(value, 16);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string ToHex(long value){return ToHex(value, 16);}",
    "output": "public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, \"\");return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int createPlaceholder() {return _offset++;}",
    "output": "public int CreatePlaceholder(){return _offset++;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int CreatePlaceholder(){return _offset++;}",
    "output": "public int createPlaceholder() {return _offset++;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean equals(Object o) {if (o instanceof Map.Entry) {Map.Entry other = (Map.Entry) o;return (key == null ? other.getKey() == null : key.equals(other.getKey()))&& (value == null ? other.getValue() == null : value.equals(other.getValue()));}return false;}",
    "output": "public override bool Equals(object o){if (o is java.util.MapClass.Entry<K, V>){java.util.MapClass.Entry<K, V> other = (java.util.MapClass.Entry<K, V>)o;return ((object)key == null ? other.getKey() == null : key.Equals(other.getKey())) && ((object)value == null ? other.getValue() == null : value.Equals(other.getValue()));}return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){if (o is java.util.MapClass.Entry<K, V>){java.util.MapClass.Entry<K, V> other = (java.util.MapClass.Entry<K, V>)o;return ((object)key == null ? other.getKey() == null : key.Equals(other.getKey())) && ((object)value == null ? other.getValue() == null : value.Equals(other.getValue()));}return false;}",
    "output": "@Override public boolean equals(Object o) {if (o instanceof Map.Entry) {Map.Entry other = (Map.Entry) o;return (key == null ? other.getKey() == null : key.equals(other.getKey()))&& (value == null ? other.getValue() == null : value.equals(other.getValue()));}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.log(d0);if (Double.compare(d1, Math.E) == 0) {result = logE;} else {result = logE / Math.log(d1);}NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.SingleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.Log(d0);double base1 = d1;if (base1 == Math.E) {result = logE;} else {result = logE / Math.Log(base1);}NumericFunction.CheckValue(result);} catch (EvaluationException e) {return e.GetErrorEval();}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.SingleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.Log(d0);double base1 = d1;if (base1 == Math.E) {result = logE;} else {result = logE / Math.Log(base1);}NumericFunction.CheckValue(result);} catch (EvaluationException e) {return e.GetErrorEval();}return new NumberEval(result);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {double result;try {double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);double logE = Math.log(d0);if (Double.compare(d1, Math.E) == 0) {result = logE;} else {result = logE / Math.log(d1);}NumericFunction.checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteFilterResult deleteFilter(DeleteFilterRequest request) {request = beforeClientExecution(request);return executeDeleteFilter(request);}",
    "output": "public virtual DeleteFilterResponse DeleteFilter(DeleteFilterRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFilterRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFilterResponseUnmarshaller.Instance;return Invoke<DeleteFilterResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteFilterResponse DeleteFilter(DeleteFilterRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteFilterRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteFilterResponseUnmarshaller.Instance;return Invoke<DeleteFilterResponse>(request, options);}",
    "output": "public DeleteFilterResult deleteFilter(DeleteFilterRequest request) {request = beforeClientExecution(request);return executeDeleteFilter(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateInstanceSnapshotResult createInstanceSnapshot(CreateInstanceSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstanceSnapshot(request);}",
    "output": "public virtual CreateInstanceSnapshotResponse CreateInstanceSnapshot(CreateInstanceSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateInstanceSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateInstanceSnapshotResponseUnmarshaller.Instance;return Invoke<CreateInstanceSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateInstanceSnapshotResponse CreateInstanceSnapshot(CreateInstanceSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateInstanceSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateInstanceSnapshotResponseUnmarshaller.Instance;return Invoke<CreateInstanceSnapshotResponse>(request, options);}",
    "output": "public CreateInstanceSnapshotResult createInstanceSnapshot(CreateInstanceSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstanceSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<Token> getTokens(int start, int stop) {return getTokens(start, stop, null);}",
    "output": "public virtual IList<IToken> GetTokens(int start, int stop){return GetTokens(start, stop, null);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual IList<IToken> GetTokens(int start, int stop){return GetTokens(start, stop, null);}",
    "output": "public List<Token> getTokens(int start, int stop) {return getTokens(start, stop, null);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,String facetField,boolean facetFieldMultivalued,BytesRef facetPrefix,int initialSize) {if (facetFieldMultivalued) {return new MV(groupField, facetField, facetPrefix, initialSize);} else {return new SV(groupField, facetField, facetPrefix, initialSize);}}",
    "output": "public static TermGroupFacetCollector CreateTermGroupFacetCollector(string groupField,string facetField,bool facetFieldMultivalued,BytesRef facetPrefix,int initialSize){if (facetFieldMultivalued){return new MV(groupField, facetField, facetPrefix, initialSize);}else{return new SV(groupField, facetField, facetPrefix, initialSize);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static TermGroupFacetCollector CreateTermGroupFacetCollector(string groupField,string facetField,bool facetFieldMultivalued,BytesRef facetPrefix,int initialSize){if (facetFieldMultivalued){return new MV(groupField, facetField, facetPrefix, initialSize);}else{return new SV(groupField, facetField, facetPrefix, initialSize);}}",
    "output": "public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,String facetField,boolean facetFieldMultivalued,BytesRef facetPrefix,int initialSize) {if (facetFieldMultivalued) {return new MV(groupField, facetField, facetPrefix, initialSize);} else {return new SV(groupField, facetField, facetPrefix, initialSize);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RenameAlbumRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameAlbum\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public RenameAlbumRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"RenameAlbum\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RenameAlbumRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"RenameAlbum\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public RenameAlbumRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameAlbum\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean contains(Object object) {synchronized (mutex) {return c.contains(object);}}",
    "output": "public virtual bool contains(object @object){lock (mutex){return c.contains(@object);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool contains(object @object){lock (mutex){return c.contains(@object);}}",
    "output": "@Override public boolean contains(Object object) {synchronized (mutex) {return c.contains(object);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharBuffer put(char[] src, int srcOffset, int charCount) {if (charCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, charCount);position += charCount;return this;}",
    "output": "public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount){if (charCount > remaining()){throw new java.nio.BufferOverflowException();}System.Array.Copy(src, srcOffset, backingArray, offset + _position, charCount);_position += charCount;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount){if (charCount > remaining()){throw new java.nio.BufferOverflowException();}System.Array.Copy(src, srcOffset, backingArray, offset + _position, charCount);_position += charCount;return this;}",
    "output": "public CharBuffer put(char[] src, int srcOffset, int charCount) {if (charCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, charCount);position += charCount;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LegendRecord(RecordInputStream in) {field_1_xAxisUpperLeft = in.readInt();field_2_yAxisUpperLeft = in.readInt();field_3_xSize          = in.readInt();field_4_ySize          = in.readInt();field_5_type           = in.readByte();field_6_spacing        = in.readByte();field_7_options        = in.readShort();}",
    "output": "public LegendRecord(RecordInputStream in1){field_1_xAxisUpperLeft = in1.ReadInt();field_2_yAxisUpperLeft = in1.ReadInt();field_3_xSize = in1.ReadInt();field_4_ySize = in1.ReadInt();field_5_type = (byte)in1.ReadByte();field_6_spacing = (byte)in1.ReadByte();field_7_options = in1.ReadShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LegendRecord(RecordInputStream in1){field_1_xAxisUpperLeft = in1.ReadInt();field_2_yAxisUpperLeft = in1.ReadInt();field_3_xSize = in1.ReadInt();field_4_ySize = in1.ReadInt();field_5_type = (byte)in1.ReadByte();field_6_spacing = (byte)in1.ReadByte();field_7_options = in1.ReadShort();}",
    "output": "public LegendRecord(RecordInputStream in) {field_1_xAxisUpperLeft = in.readInt();field_2_yAxisUpperLeft = in.readInt();field_3_xSize          = in.readInt();field_4_ySize          = in.readInt();field_5_type           = in.readByte();field_6_spacing        = in.readByte();field_7_options        = in.readShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static byte[] encodedTypeString(int typeCode) {switch (typeCode) {case OBJ_COMMIT:return ENCODED_TYPE_COMMIT;case OBJ_TREE:return ENCODED_TYPE_TREE;case OBJ_BLOB:return ENCODED_TYPE_BLOB;case OBJ_TAG:return ENCODED_TYPE_TAG;default:throw new IllegalArgumentException(MessageFormat.format(JGitText.get().badObjectType, Integer.valueOf(typeCode)));}}",
    "output": "public static byte[] EncodedTypeString(int typeCode){switch (typeCode){case OBJ_COMMIT:{return ENCODED_TYPE_COMMIT;}case OBJ_TREE:{return ENCODED_TYPE_TREE;}case OBJ_BLOB:{return ENCODED_TYPE_BLOB;}case OBJ_TAG:{return ENCODED_TYPE_TAG;}default:{throw new ArgumentException(MessageFormat.Format(JGitText.Get().badObjectType, Sharpen.Extensions.ValueOf(typeCode)));}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static byte[] EncodedTypeString(int typeCode){switch (typeCode){case OBJ_COMMIT:{return ENCODED_TYPE_COMMIT;}case OBJ_TREE:{return ENCODED_TYPE_TREE;}case OBJ_BLOB:{return ENCODED_TYPE_BLOB;}case OBJ_TAG:{return ENCODED_TYPE_TAG;}default:{throw new ArgumentException(MessageFormat.Format(JGitText.Get().badObjectType, Sharpen.Extensions.ValueOf(typeCode)));}}}",
    "output": "public static byte[] encodedTypeString(int typeCode) {switch (typeCode) {case OBJ_COMMIT:return ENCODED_TYPE_COMMIT;case OBJ_TREE:return ENCODED_TYPE_TREE;case OBJ_BLOB:return ENCODED_TYPE_BLOB;case OBJ_TAG:return ENCODED_TYPE_TAG;default:throw new IllegalArgumentException(MessageFormat.format(JGitText.get().badObjectType, Integer.valueOf(typeCode)));}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ObjectId getCalulatedPatchId() {return ObjectId.fromRaw(digest.digest());}",
    "output": "public virtual ObjectId GetCalulatedPatchId(){return ObjectId.FromRaw(digest.Digest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ObjectId GetCalulatedPatchId(){return ObjectId.FromRaw(digest.Digest());}",
    "output": "public ObjectId getCalulatedPatchId() {return ObjectId.fromRaw(digest.digest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DefaultRowHeightRecord() {field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}",
    "output": "public DefaultRowHeightRecord(){field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DefaultRowHeightRecord(){field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}",
    "output": "public DefaultRowHeightRecord() {field_1_option_flags = 0x0000;field_2_row_height = DEFAULT_ROW_HEIGHT;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final ByteBuffer encode(CharBuffer buffer) {try {return newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).encode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}",
    "output": "public java.nio.ByteBuffer encode(java.nio.CharBuffer buffer){try{return newEncoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).encode(buffer);}catch (java.nio.charset.CharacterCodingException ex){throw new System.Exception(ex.Message, ex);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.nio.ByteBuffer encode(java.nio.CharBuffer buffer){try{return newEncoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).encode(buffer);}catch (java.nio.charset.CharacterCodingException ex){throw new System.Exception(ex.Message, ex);}}",
    "output": "public final ByteBuffer encode(CharBuffer buffer) {try {return newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).encode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final FloatBuffer get(float[] dst, int dstOffset, int floatCount) {if (floatCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, floatCount);position += floatCount;return this;}",
    "output": "public sealed override java.nio.FloatBuffer get(float[] dst, int dstOffset, int floatCount){if (floatCount > remaining()){throw new java.nio.BufferUnderflowException();}System.Array.Copy(backingArray, offset + _position, dst, dstOffset, floatCount);_position += floatCount;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override java.nio.FloatBuffer get(float[] dst, int dstOffset, int floatCount){if (floatCount > remaining()){throw new java.nio.BufferUnderflowException();}System.Array.Copy(backingArray, offset + _position, dst, dstOffset, floatCount);_position += floatCount;return this;}",
    "output": "public final FloatBuffer get(float[] dst, int dstOffset, int floatCount) {if (floatCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, floatCount);position += floatCount;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean hasNext() {return nextEntry != null;}",
    "output": "public virtual bool hasNext(){return this._nextEntry != null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool hasNext(){return this._nextEntry != null;}",
    "output": "public boolean hasNext() {return nextEntry != null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteNatGatewayResult deleteNatGateway(DeleteNatGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteNatGateway(request);}",
    "output": "public virtual DeleteNatGatewayResponse DeleteNatGateway(DeleteNatGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteNatGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteNatGatewayResponseUnmarshaller.Instance;return Invoke<DeleteNatGatewayResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteNatGatewayResponse DeleteNatGateway(DeleteNatGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteNatGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteNatGatewayResponseUnmarshaller.Instance;return Invoke<DeleteNatGatewayResponse>(request, options);}",
    "output": "public DeleteNatGatewayResult deleteNatGateway(DeleteNatGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteNatGateway(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String resolveNameXText(int refIndex, int definedNameIndex) {return linkTable.resolveNameXText(refIndex, definedNameIndex, this);}",
    "output": "public String ResolveNameXText(int reFindex, int definedNameIndex){return linkTable.ResolveNameXText(reFindex, definedNameIndex, this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public String ResolveNameXText(int reFindex, int definedNameIndex){return linkTable.ResolveNameXText(reFindex, definedNameIndex, this);}",
    "output": "public String resolveNameXText(int refIndex, int definedNameIndex) {return linkTable.resolveNameXText(refIndex, definedNameIndex, this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setMultiFields(CharSequence[] fields) {if (fields == null) {fields = new CharSequence[0];}getQueryConfigHandler().set(ConfigurationKeys.MULTI_FIELDS, fields);}",
    "output": "public virtual void SetMultiFields(string[] fields){if (fields == null){fields = new string[0];}QueryConfigHandler.Set(ConfigurationKeys.MULTI_FIELDS, fields);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetMultiFields(string[] fields){if (fields == null){fields = new string[0];}QueryConfigHandler.Set(ConfigurationKeys.MULTI_FIELDS, fields);}",
    "output": "public void setMultiFields(CharSequence[] fields) {if (fields == null) {fields = new CharSequence[0];}getQueryConfigHandler().set(ConfigurationKeys.MULTI_FIELDS, fields);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isCancelled() {lock.lock();try {return pm.isCancelled();} finally {lock.unlock();}}",
    "output": "public override bool IsCancelled(){Lock.Lock();try{return pm.IsCancelled();}finally{Lock.Unlock();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool IsCancelled(){Lock.Lock();try{return pm.IsCancelled();}finally{Lock.Unlock();}}",
    "output": "public boolean isCancelled() {lock.lock();try {return pm.isCancelled();} finally {lock.unlock();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RemoveTargetsResult removeTargets(RemoveTargetsRequest request) {request = beforeClientExecution(request);return executeRemoveTargets(request);}",
    "output": "public virtual RemoveTargetsResponse RemoveTargets(RemoveTargetsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveTargetsRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveTargetsResponseUnmarshaller.Instance;return Invoke<RemoveTargetsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RemoveTargetsResponse RemoveTargets(RemoveTargetsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveTargetsRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveTargetsResponseUnmarshaller.Instance;return Invoke<RemoveTargetsResponse>(request, options);}",
    "output": "public RemoveTargetsResult removeTargets(RemoveTargetsRequest request) {request = beforeClientExecution(request);return executeRemoveTargets(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, boolean transpositions) {super(term.field());if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {throw new IllegalArgumentException(\"maxEdits must be between 0 and \" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0) {throw new IllegalArgumentException(\"prefixLength cannot be negative.\");}if (maxExpansions <= 0) {throw new IllegalArgumentException(\"maxExpansions must be positive.\");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;int[] codePoints = FuzzyTermsEnum.stringToUTF32(term.text());this.termLength = codePoints.length;this.automata = FuzzyTermsEnum.buildAutomata(term.text(), codePoints, prefixLength, transpositions, maxEdits);setRewriteMethod(new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(maxExpansions));this.ramBytesUsed = calculateRamBytesUsed(term, this.automata);}",
    "output": "public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, bool transpositions): base(term.Field){if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE){throw new System.ArgumentException(\"maxEdits must be between 0 and \" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0){throw new System.ArgumentException(\"prefixLength cannot be negative.\");}if (maxExpansions < 0){throw new System.ArgumentException(\"maxExpansions cannot be negative.\");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;MultiTermRewriteMethod = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, bool transpositions): base(term.Field){if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE){throw new System.ArgumentException(\"maxEdits must be between 0 and \" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0){throw new System.ArgumentException(\"prefixLength cannot be negative.\");}if (maxExpansions < 0){throw new System.ArgumentException(\"maxExpansions cannot be negative.\");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;MultiTermRewriteMethod = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions);}",
    "output": "public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, boolean transpositions) {super(term.field());if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {throw new IllegalArgumentException(\"maxEdits must be between 0 and \" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);}if (prefixLength < 0) {throw new IllegalArgumentException(\"prefixLength cannot be negative.\");}if (maxExpansions <= 0) {throw new IllegalArgumentException(\"maxExpansions must be positive.\");}this.term = term;this.maxEdits = maxEdits;this.prefixLength = prefixLength;this.transpositions = transpositions;this.maxExpansions = maxExpansions;int[] codePoints = FuzzyTermsEnum.stringToUTF32(term.text());this.termLength = codePoints.length;this.automata = FuzzyTermsEnum.buildAutomata(term.text(), codePoints, prefixLength, transpositions, maxEdits);setRewriteMethod(new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(maxExpansions));this.ramBytesUsed = calculateRamBytesUsed(term, this.automata);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CheckoutCommand checkout() {return new CheckoutCommand(repo);}",
    "output": "public virtual CheckoutCommand Checkout(){return new CheckoutCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CheckoutCommand Checkout(){return new CheckoutCommand(repo);}",
    "output": "public CheckoutCommand checkout() {return new CheckoutCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(String sheetName, int rowIndex, int columnIndex) {EvaluationCell cell = _sewb.getEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.getCellType()) {case BOOLEAN:return BoolEval.valueOf(cell.getBooleanCellValue());case ERROR:return ErrorEval.valueOf(cell.getErrorCellValue());case FORMULA:return _evaluator.evaluate(cell);case NUMERIC:return new NumberEval(cell.getNumericCellValue());case STRING:return new StringEval(cell.getStringCellValue());case BLANK:return null;default:throw new IllegalStateException(\"Bad cell type (\" + cell.getCellType() + \")\");}}",
    "output": "public ValueEval Evaluate(String sheetName, int rowIndex, int columnIndex){IEvaluationCell cell = _sewb.GetEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.CellType){case CellType.Boolean:return BoolEval.ValueOf(cell.BooleanCellValue);case CellType.Error:return ErrorEval.ValueOf(cell.ErrorCellValue);case CellType.Formula:return _evaluator.Evaluate(cell);case CellType.Numeric:return new NumberEval(cell.NumericCellValue);case CellType.String:return new StringEval(cell.StringCellValue);case CellType.Blank:return null;}throw new InvalidOperationException(\"Bad cell type (\" + cell.CellType + \")\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ValueEval Evaluate(String sheetName, int rowIndex, int columnIndex){IEvaluationCell cell = _sewb.GetEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.CellType){case CellType.Boolean:return BoolEval.ValueOf(cell.BooleanCellValue);case CellType.Error:return ErrorEval.ValueOf(cell.ErrorCellValue);case CellType.Formula:return _evaluator.Evaluate(cell);case CellType.Numeric:return new NumberEval(cell.NumericCellValue);case CellType.String:return new StringEval(cell.StringCellValue);case CellType.Blank:return null;}throw new InvalidOperationException(\"Bad cell type (\" + cell.CellType + \")\");}",
    "output": "public ValueEval evaluate(String sheetName, int rowIndex, int columnIndex) {EvaluationCell cell = _sewb.getEvaluationCell(sheetName, rowIndex, columnIndex);switch (cell.getCellType()) {case BOOLEAN:return BoolEval.valueOf(cell.getBooleanCellValue());case ERROR:return ErrorEval.valueOf(cell.getErrorCellValue());case FORMULA:return _evaluator.evaluate(cell);case NUMERIC:return new NumberEval(cell.getNumericCellValue());case STRING:return new StringEval(cell.getStringCellValue());case BLANK:return null;default:throw new IllegalStateException(\"Bad cell type (\" + cell.getCellType() + \")\");}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutFileSystemPolicyResult putFileSystemPolicy(PutFileSystemPolicyRequest request) {request = beforeClientExecution(request);return executePutFileSystemPolicy(request);}",
    "output": "public virtual PutFileSystemPolicyResponse PutFileSystemPolicy(PutFileSystemPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutFileSystemPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutFileSystemPolicyResponseUnmarshaller.Instance;return Invoke<PutFileSystemPolicyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutFileSystemPolicyResponse PutFileSystemPolicy(PutFileSystemPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutFileSystemPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutFileSystemPolicyResponseUnmarshaller.Instance;return Invoke<PutFileSystemPolicyResponse>(request, options);}",
    "output": "public PutFileSystemPolicyResult putFileSystemPolicy(PutFileSystemPolicyRequest request) {request = beforeClientExecution(request);return executePutFileSystemPolicy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long fileLength(String name) throws IOException {ensureOpen();FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));if (e == null)throw new FileNotFoundException(name);return e.length;}",
    "output": "public override long FileLength(string name){EnsureOpen();if (this.writer != null){return writer.FileLength(name);}FileEntry e = entries[IndexFileNames.StripSegmentName(name)];if (e == null){throw new FileNotFoundException(name);}return e.Length;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long FileLength(string name){EnsureOpen();if (this.writer != null){return writer.FileLength(name);}FileEntry e = entries[IndexFileNames.StripSegmentName(name)];if (e == null){throw new FileNotFoundException(name);}return e.Length;}",
    "output": "public long fileLength(String name) throws IOException {ensureOpen();FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));if (e == null)throw new FileNotFoundException(name);return e.length;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeCacheClustersResult describeCacheClusters() {return describeCacheClusters(new DescribeCacheClustersRequest());}",
    "output": "public virtual DescribeCacheClustersResponse DescribeCacheClusters(){return DescribeCacheClusters(new DescribeCacheClustersRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeCacheClustersResponse DescribeCacheClusters(){return DescribeCacheClusters(new DescribeCacheClustersRequest());}",
    "output": "public DescribeCacheClustersResult describeCacheClusters() {return describeCacheClusters(new DescribeCacheClustersRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setObjectId(RevObject obj) {setObjectId(obj, obj.getType());}",
    "output": "public virtual void SetObjectId(RevObject obj){SetObjectId(obj, obj.Type);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetObjectId(RevObject obj){SetObjectId(obj, obj.Type);}",
    "output": "public void setObjectId(RevObject obj) {setObjectId(obj, obj.getType());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean rowHasCells(int row) {if (row >= records.length) {return false;}CellValueRecordInterface[] rowCells=records[row];if(rowCells==null) return false;for(int col=0;col<rowCells.length;col++) {if(rowCells[col]!=null) return true;}return false;}",
    "output": "public bool RowHasCells(int row){if (row > records.Length - 1) return false;  CellValueRecordInterface[] rowCells = records[row]; if (rowCells == null) return false;for (int col = 0; col < rowCells.Length; col++){if (rowCells[col] != null) return true;}return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool RowHasCells(int row){if (row > records.Length - 1) return false;  CellValueRecordInterface[] rowCells = records[row]; if (rowCells == null) return false;for (int col = 0; col < rowCells.Length; col++){if (rowCells[col] != null) return true;}return false;}",
    "output": "public boolean rowHasCells(int row) {if (row >= records.length) {return false;}CellValueRecordInterface[] rowCells=records[row];if(rowCells==null) return false;for(int col=0;col<rowCells.length;col++) {if(rowCells[col]!=null) return true;}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new SpanishLightStemFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new SpanishLightStemFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new SpanishLightStemFilter(input);}",
    "output": "public TokenStream create(TokenStream input) {return new SpanishLightStemFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}",
    "output": "public StoredField(string name, int value): base(name, TYPE){FieldsData = new Int32(value);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public StoredField(string name, int value): base(name, TYPE){FieldsData = new Int32(value);}",
    "output": "public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribePublicIpv4PoolsResult describePublicIpv4Pools(DescribePublicIpv4PoolsRequest request) {request = beforeClientExecution(request);return executeDescribePublicIpv4Pools(request);}",
    "output": "public virtual DescribePublicIpv4PoolsResponse DescribePublicIpv4Pools(DescribePublicIpv4PoolsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribePublicIpv4PoolsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribePublicIpv4PoolsResponseUnmarshaller.Instance;return Invoke<DescribePublicIpv4PoolsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribePublicIpv4PoolsResponse DescribePublicIpv4Pools(DescribePublicIpv4PoolsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribePublicIpv4PoolsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribePublicIpv4PoolsResponseUnmarshaller.Instance;return Invoke<DescribePublicIpv4PoolsResponse>(request, options);}",
    "output": "public DescribePublicIpv4PoolsResult describePublicIpv4Pools(DescribePublicIpv4PoolsRequest request) {request = beforeClientExecution(request);return executeDescribePublicIpv4Pools(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IndexRevision(IndexWriter writer) throws IOException {IndexDeletionPolicy delPolicy = writer.getConfig().getIndexDeletionPolicy();if (!(delPolicy instanceof SnapshotDeletionPolicy)) {throw new IllegalArgumentException(\"IndexWriter must be created with SnapshotDeletionPolicy\");}this.writer = writer;this.sdp = (SnapshotDeletionPolicy) delPolicy;this.commit = sdp.snapshot();this.version = revisionVersion(commit);this.sourceFiles = revisionFiles(commit);}",
    "output": "public IndexRevision(IndexWriter writer){sdp = writer.Config.IndexDeletionPolicy as SnapshotDeletionPolicy;if (sdp == null)throw new ArgumentException(\"IndexWriter must be created with SnapshotDeletionPolicy\", \"writer\");this.writer = writer;this.commit = sdp.Snapshot();this.version = RevisionVersion(commit);this.sourceFiles = RevisionFiles(commit);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IndexRevision(IndexWriter writer){sdp = writer.Config.IndexDeletionPolicy as SnapshotDeletionPolicy;if (sdp == null)throw new ArgumentException(\"IndexWriter must be created with SnapshotDeletionPolicy\", \"writer\");this.writer = writer;this.commit = sdp.Snapshot();this.version = RevisionVersion(commit);this.sourceFiles = RevisionFiles(commit);}",
    "output": "public IndexRevision(IndexWriter writer) throws IOException {IndexDeletionPolicy delPolicy = writer.getConfig().getIndexDeletionPolicy();if (!(delPolicy instanceof SnapshotDeletionPolicy)) {throw new IllegalArgumentException(\"IndexWriter must be created with SnapshotDeletionPolicy\");}this.writer = writer;this.sdp = (SnapshotDeletionPolicy) delPolicy;this.commit = sdp.snapshot();this.version = revisionVersion(commit);this.sourceFiles = revisionFiles(commit);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setTabIdArray(short[] array) {_tabids = array.clone();}",
    "output": "public void SetTabIdArray(short[] array){_tabids = array;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void SetTabIdArray(short[] array){_tabids = array;}",
    "output": "public void setTabIdArray(short[] array) {_tabids = array.clone();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateObjectAttributesResult updateObjectAttributes(UpdateObjectAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateObjectAttributes(request);}",
    "output": "public virtual UpdateObjectAttributesResponse UpdateObjectAttributes(UpdateObjectAttributesRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateObjectAttributesRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateObjectAttributesResponseUnmarshaller.Instance;return Invoke<UpdateObjectAttributesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateObjectAttributesResponse UpdateObjectAttributes(UpdateObjectAttributesRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateObjectAttributesRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateObjectAttributesResponseUnmarshaller.Instance;return Invoke<UpdateObjectAttributesResponse>(request, options);}",
    "output": "public UpdateObjectAttributesResult updateObjectAttributes(UpdateObjectAttributesRequest request) {request = beforeClientExecution(request);return executeUpdateObjectAttributes(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetGameSessionLogUrlResult getGameSessionLogUrl(GetGameSessionLogUrlRequest request) {request = beforeClientExecution(request);return executeGetGameSessionLogUrl(request);}",
    "output": "public virtual GetGameSessionLogUrlResponse GetGameSessionLogUrl(GetGameSessionLogUrlRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGameSessionLogUrlRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGameSessionLogUrlResponseUnmarshaller.Instance;return Invoke<GetGameSessionLogUrlResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetGameSessionLogUrlResponse GetGameSessionLogUrl(GetGameSessionLogUrlRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGameSessionLogUrlRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGameSessionLogUrlResponseUnmarshaller.Instance;return Invoke<GetGameSessionLogUrlResponse>(request, options);}",
    "output": "public GetGameSessionLogUrlResult getGameSessionLogUrl(GetGameSessionLogUrlRequest request) {request = beforeClientExecution(request);return executeGetGameSessionLogUrl(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RefCount(T object) {this.object = object;}",
    "output": "public RefCount(T @object){this.m_object = @object;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RefCount(T @object){this.m_object = @object;}",
    "output": "public RefCount(T object) {this.object = object;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer put(int index, byte b) {checkIndex(index);backingArray[offset + index] = b;return this;}",
    "output": "public override java.nio.ByteBuffer put(int index, byte b){checkIndex(index);backingArray[offset + index] = b;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer put(int index, byte b){checkIndex(index);backingArray[offset + index] = b;return this;}",
    "output": "public ByteBuffer put(int index, byte b) {checkIndex(index);backingArray[offset + index] = b;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IntervalSet LOOK(ATNState s, ATNState stopState, RuleContext ctx) {IntervalSet r = new IntervalSet();boolean seeThruPreds = true; PredictionContext lookContext = ctx != null ? PredictionContext.fromRuleContext(s.atn, ctx) : null;_LOOK(s, stopState, lookContext,r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}",
    "output": "public virtual IntervalSet Look(ATNState s, ATNState stopState, RuleContext ctx){IntervalSet r = new IntervalSet();bool seeThruPreds = true;PredictionContext lookContext = ctx != null ? PredictionContext.FromRuleContext(s.atn, ctx) : null;Look(s, stopState, lookContext, r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual IntervalSet Look(ATNState s, ATNState stopState, RuleContext ctx){IntervalSet r = new IntervalSet();bool seeThruPreds = true;PredictionContext lookContext = ctx != null ? PredictionContext.FromRuleContext(s.atn, ctx) : null;Look(s, stopState, lookContext, r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}",
    "output": "public IntervalSet LOOK(ATNState s, ATNState stopState, RuleContext ctx) {IntervalSet r = new IntervalSet();boolean seeThruPreds = true; PredictionContext lookContext = ctx != null ? PredictionContext.fromRuleContext(s.atn, ctx) : null;_LOOK(s, stopState, lookContext,r, new HashSet<ATNConfig>(), new BitSet(), seeThruPreds, true);return r;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getValidationType() {return _validationType;}",
    "output": "public int GetValidationType(){return _validationType;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int GetValidationType(){return _validationType;}",
    "output": "public int getValidationType() {return _validationType;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteTagCommand tagDelete() {return new DeleteTagCommand(repo);}",
    "output": "public virtual DeleteTagCommand TagDelete(){return new DeleteTagCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteTagCommand TagDelete(){return new DeleteTagCommand(repo);}",
    "output": "public DeleteTagCommand tagDelete() {return new DeleteTagCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SortRescorer(Sort sort) {this.sort = sort;}",
    "output": "public SortRescorer(Sort sort){this.sort = sort;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SortRescorer(Sort sort){this.sort = sort;}",
    "output": "public SortRescorer(Sort sort) {this.sort = sort;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void verifyBelongsToWorkbook(HSSFWorkbook wb) {if(wb.getWorkbook() != _workbook) {throw new IllegalArgumentException(\"This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?\");}}",
    "output": "public void VerifyBelongsToWorkbook(HSSFWorkbook wb){if (wb.Workbook != _workbook){throw new ArgumentException(\"This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?\");}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void VerifyBelongsToWorkbook(HSSFWorkbook wb){if (wb.Workbook != _workbook){throw new ArgumentException(\"This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?\");}}",
    "output": "public void verifyBelongsToWorkbook(HSSFWorkbook wb) {if(wb.getWorkbook() != _workbook) {throw new IllegalArgumentException(\"This Style does not belong to the supplied Workbook. Are you trying to assign a style from one workbook to the cell of a differnt workbook?\");}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringBuffer insert(int index, Object obj) {return insert(index, obj == null ? \"null\" : obj.toString());}",
    "output": "public java.lang.StringBuffer insert(int index, object obj){return insert(index, obj == null ? \"null\" : obj.ToString());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.lang.StringBuffer insert(int index, object obj){return insert(index, obj == null ? \"null\" : obj.ToString());}",
    "output": "public StringBuffer insert(int index, Object obj) {return insert(index, obj == null ? \"null\" : obj.toString());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean containsKey(CharSequence cs) {if(cs == null)throw new NullPointerException();return false;}",
    "output": "public override bool ContainsKey(ICharSequence text){if (text == null){throw new ArgumentNullException(\"text\");}return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool ContainsKey(ICharSequence text){if (text == null){throw new ArgumentNullException(\"text\");}return false;}",
    "output": "public boolean containsKey(CharSequence cs) {if(cs == null)throw new NullPointerException();return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int compareTo(HSSFRichTextString r) {return _string.compareTo(r._string);}",
    "output": "public int CompareTo(HSSFRichTextString other){return _string.CompareTo(other._string);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int CompareTo(HSSFRichTextString other){return _string.CompareTo(other._string);}",
    "output": "public int compareTo(HSSFRichTextString r) {return _string.compareTo(r._string);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RequestSpotInstancesRequest(String spotPrice) {setSpotPrice(spotPrice);}",
    "output": "public RequestSpotInstancesRequest(string spotPrice){_spotPrice = spotPrice;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RequestSpotInstancesRequest(string spotPrice){_spotPrice = spotPrice;}",
    "output": "public RequestSpotInstancesRequest(String spotPrice) {setSpotPrice(spotPrice);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ObjectId getNewObjectId() {return newObjectId;}",
    "output": "public virtual ObjectId GetNewObjectId(){return newObjectId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ObjectId GetNewObjectId(){return newObjectId;}",
    "output": "public ObjectId getNewObjectId() {return newObjectId;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}",
    "output": "public virtual void SetDeltaBaseAsOffset(bool deltaBaseAsOffset){this.deltaBaseAsOffset = deltaBaseAsOffset;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetDeltaBaseAsOffset(bool deltaBaseAsOffset){this.deltaBaseAsOffset = deltaBaseAsOffset;}",
    "output": "public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LengthFilterFactory(Map<String, String> args) {super(args);min = requireInt(args, MIN_KEY);max = requireInt(args, MAX_KEY);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public LengthFilterFactory(IDictionary<string, string> args): base(args){min = RequireInt32(args, MIN_KEY);max = RequireInt32(args, MAX_KEY);enablePositionIncrements = GetBoolean(args, \"enablePositionIncrements\", true);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LengthFilterFactory(IDictionary<string, string> args): base(args){min = RequireInt32(args, MIN_KEY);max = RequireInt32(args, MAX_KEY);enablePositionIncrements = GetBoolean(args, \"enablePositionIncrements\", true);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public LengthFilterFactory(Map<String, String> args) {super(args);min = requireInt(args, MIN_KEY);max = requireInt(args, MAX_KEY);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TruncateTokenFilter(TokenStream input, int length) {super(input);if (length < 1)throw new IllegalArgumentException(\"length parameter must be a positive number: \" + length);this.length = length;}",
    "output": "public TruncateTokenFilter(TokenStream input, int length): base(input){if (length < 1){throw new System.ArgumentOutOfRangeException(\"length parameter must be a positive number: \" + length);}this.length = length;this.termAttribute = AddAttribute<ICharTermAttribute>();this.keywordAttr = AddAttribute<IKeywordAttribute>();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public TruncateTokenFilter(TokenStream input, int length): base(input){if (length < 1){throw new System.ArgumentOutOfRangeException(\"length parameter must be a positive number: \" + length);}this.length = length;this.termAttribute = AddAttribute<ICharTermAttribute>();this.keywordAttr = AddAttribute<IKeywordAttribute>();}",
    "output": "public TruncateTokenFilter(TokenStream input, int length) {super(input);if (length < 1)throw new IllegalArgumentException(\"length parameter must be a positive number: \" + length);this.length = length;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListDomainsResult listDomains() {return listDomains(new ListDomainsRequest());}",
    "output": "public virtual ListDomainsResponse ListDomains(){return ListDomains(new ListDomainsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListDomainsResponse ListDomains(){return ListDomains(new ListDomainsRequest());}",
    "output": "public ListDomainsResult listDomains() {return listDomains(new ListDomainsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ArabicStemFilter create(TokenStream input) {return new ArabicStemFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new ArabicStemFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new ArabicStemFilter(input);}",
    "output": "public ArabicStemFilter create(TokenStream input) {return new ArabicStemFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PushCommand setRefSpecs(RefSpec... specs) {checkCallable();this.refSpecs.clear();Collections.addAll(refSpecs, specs);return this;}",
    "output": "public virtual NGit.Api.PushCommand SetRefSpecs(IList<RefSpec> specs){CheckCallable();this.refSpecs.Clear();Sharpen.Collections.AddAll(this.refSpecs, specs);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.PushCommand SetRefSpecs(IList<RefSpec> specs){CheckCallable();this.refSpecs.Clear();Sharpen.Collections.AddAll(this.refSpecs, specs);return this;}",
    "output": "public PushCommand setRefSpecs(RefSpec... specs) {checkCallable();this.refSpecs.clear();Collections.addAll(refSpecs, specs);return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BlameGenerator setDiffAlgorithm(DiffAlgorithm algorithm) {diffAlgorithm = algorithm;return this;}",
    "output": "public virtual NGit.Blame.BlameGenerator SetDiffAlgorithm(DiffAlgorithm algorithm){diffAlgorithm = algorithm;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Blame.BlameGenerator SetDiffAlgorithm(DiffAlgorithm algorithm){diffAlgorithm = algorithm;return this;}",
    "output": "public BlameGenerator setDiffAlgorithm(DiffAlgorithm algorithm) {diffAlgorithm = algorithm;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GroupingSearch setIncludeMaxScore(boolean includeMaxScore) {this.includeMaxScore = includeMaxScore;return this;}",
    "output": "public virtual GroupingSearch SetIncludeMaxScore(bool includeMaxScore){this.includeMaxScore = includeMaxScore;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GroupingSearch SetIncludeMaxScore(bool includeMaxScore){this.includeMaxScore = includeMaxScore;return this;}",
    "output": "public GroupingSearch setIncludeMaxScore(boolean includeMaxScore) {this.includeMaxScore = includeMaxScore;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Field[] createIndexableFields(Shape shape) {double distErr = SpatialArgs.calcDistanceFromErrPct(shape, distErrPct, ctx);return createIndexableFields(shape, distErr);}",
    "output": "public override Field[] CreateIndexableFields(IShape shape){double distErr = SpatialArgs.CalcDistanceFromErrPct(shape, m_distErrPct, m_ctx);return CreateIndexableFields(shape, distErr);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override Field[] CreateIndexableFields(IShape shape){double distErr = SpatialArgs.CalcDistanceFromErrPct(shape, m_distErrPct, m_ctx);return CreateIndexableFields(shape, distErr);}",
    "output": "public Field[] createIndexableFields(Shape shape) {double distErr = SpatialArgs.calcDistanceFromErrPct(shape, distErrPct, ctx);return createIndexableFields(shape, distErr);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutMethodResponseResult putMethodResponse(PutMethodResponseRequest request) {request = beforeClientExecution(request);return executePutMethodResponse(request);}",
    "output": "public virtual PutMethodResponseResponse PutMethodResponse(PutMethodResponseRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMethodResponseRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMethodResponseResponseUnmarshaller.Instance;return Invoke<PutMethodResponseResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutMethodResponseResponse PutMethodResponse(PutMethodResponseRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutMethodResponseRequestMarshaller.Instance;options.ResponseUnmarshaller = PutMethodResponseResponseUnmarshaller.Instance;return Invoke<PutMethodResponseResponse>(request, options);}",
    "output": "public PutMethodResponseResult putMethodResponse(PutMethodResponseRequest request) {request = beforeClientExecution(request);return executePutMethodResponse(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LegacyCredentials(Credential legacyCrendential) {this.legacyCredential = legacyCrendential;}",
    "output": "public LegacyCredentials(Credential legacyCredential){this.legacyCredential = legacyCredential;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LegacyCredentials(Credential legacyCredential){this.legacyCredential = legacyCredential;}",
    "output": "public LegacyCredentials(Credential legacyCrendential) {this.legacyCredential = legacyCrendential;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeFeatureTransformationResult describeFeatureTransformation(DescribeFeatureTransformationRequest request) {request = beforeClientExecution(request);return executeDescribeFeatureTransformation(request);}",
    "output": "public virtual DescribeFeatureTransformationResponse DescribeFeatureTransformation(DescribeFeatureTransformationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFeatureTransformationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFeatureTransformationResponseUnmarshaller.Instance;return Invoke<DescribeFeatureTransformationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeFeatureTransformationResponse DescribeFeatureTransformation(DescribeFeatureTransformationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFeatureTransformationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFeatureTransformationResponseUnmarshaller.Instance;return Invoke<DescribeFeatureTransformationResponse>(request, options);}",
    "output": "public DescribeFeatureTransformationResult describeFeatureTransformation(DescribeFeatureTransformationRequest request) {request = beforeClientExecution(request);return executeDescribeFeatureTransformation(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteRouteResult deleteRoute(DeleteRouteRequest request) {request = beforeClientExecution(request);return executeDeleteRoute(request);}",
    "output": "public virtual DeleteRouteResponse DeleteRoute(DeleteRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteRouteResponseUnmarshaller.Instance;return Invoke<DeleteRouteResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteRouteResponse DeleteRoute(DeleteRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteRouteResponseUnmarshaller.Instance;return Invoke<DeleteRouteResponse>(request, options);}",
    "output": "public DeleteRouteResult deleteRoute(DeleteRouteRequest request) {request = beforeClientExecution(request);return executeDeleteRoute(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AssociatePhoneNumbersWithVoiceConnectorResult associatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeAssociatePhoneNumbersWithVoiceConnector(request);}",
    "output": "public virtual AssociatePhoneNumbersWithVoiceConnectorResponse AssociatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorResponseUnmarshaller.Instance;return Invoke<AssociatePhoneNumbersWithVoiceConnectorResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AssociatePhoneNumbersWithVoiceConnectorResponse AssociatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssociatePhoneNumbersWithVoiceConnectorRequestMarshaller.Instance;options.ResponseUnmarshaller = AssociatePhoneNumbersWithVoiceConnectorResponseUnmarshaller.Instance;return Invoke<AssociatePhoneNumbersWithVoiceConnectorResponse>(request, options);}",
    "output": "public AssociatePhoneNumbersWithVoiceConnectorResult associatePhoneNumbersWithVoiceConnector(AssociatePhoneNumbersWithVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeAssociatePhoneNumbersWithVoiceConnector(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long ramBytesUsed() {long size = BASE_RAM_BYTES_USED + RamUsageEstimator.shallowSizeOf(blocks);if (blocks.length > 0) {size += (blocks.length - 1) * bytesUsedPerBlock;size += RamUsageEstimator.sizeOf(blocks[blocks.length - 1]);}return size;}",
    "output": "public long RamBytesUsed(){return ((blocks != null) ? (blockSize * blocks.Length) : 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public long RamBytesUsed(){return ((blocks != null) ? (blockSize * blocks.Length) : 0);}",
    "output": "public long ramBytesUsed() {long size = BASE_RAM_BYTES_USED + RamUsageEstimator.shallowSizeOf(blocks);if (blocks.length > 0) {size += (blocks.length - 1) * bytesUsedPerBlock;size += RamUsageEstimator.sizeOf(blocks[blocks.length - 1]);}return size;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public short readShort(){return _in.readShort();}",
    "output": "public short ReadShort(){return _in.ReadShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public short ReadShort(){return _in.ReadShort();}",
    "output": "public short readShort(){return _in.readShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdatePipelineNotificationsResult updatePipelineNotifications(UpdatePipelineNotificationsRequest request) {request = beforeClientExecution(request);return executeUpdatePipelineNotifications(request);}",
    "output": "public virtual UpdatePipelineNotificationsResponse UpdatePipelineNotifications(UpdatePipelineNotificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdatePipelineNotificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdatePipelineNotificationsResponseUnmarshaller.Instance;return Invoke<UpdatePipelineNotificationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdatePipelineNotificationsResponse UpdatePipelineNotifications(UpdatePipelineNotificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdatePipelineNotificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdatePipelineNotificationsResponseUnmarshaller.Instance;return Invoke<UpdatePipelineNotificationsResponse>(request, options);}",
    "output": "public UpdatePipelineNotificationsResult updatePipelineNotifications(UpdatePipelineNotificationsRequest request) {request = beforeClientExecution(request);return executeUpdatePipelineNotifications(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringWriter append(char c) {write(c);return this;}",
    "output": "public override java.io.Writer append(char c){write(c);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.io.Writer append(char c){write(c);return this;}",
    "output": "public StringWriter append(char c) {write(c);return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Iterator<V> iterator() {return new ValueIterator();}",
    "output": "public override java.util.Iterator<V> iterator(){return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.util.Iterator<V> iterator(){return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing);}",
    "output": "public Iterator<V> iterator() {return new ValueIterator();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UnitsRecord(RecordInputStream in) {field_1_units = in.readShort();}",
    "output": "public UnitsRecord(RecordInputStream in1){field_1_units = in1.ReadShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UnitsRecord(RecordInputStream in1){field_1_units = in1.ReadShort();}",
    "output": "public UnitsRecord(RecordInputStream in) {field_1_units = in.readShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isEmpty() {return first;}",
    "output": "public virtual bool IsEmpty(){return first;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsEmpty(){return first;}",
    "output": "public boolean isEmpty() {return first;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"ANY_DIFF\"; }",
    "output": "public override string ToString(){return \"ANY_DIFF\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"ANY_DIFF\";}",
    "output": "public String toString() {return \"ANY_DIFF\"; }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateDomainNameResult updateDomainName(UpdateDomainNameRequest request) {request = beforeClientExecution(request);return executeUpdateDomainName(request);}",
    "output": "public virtual UpdateDomainNameResponse UpdateDomainName(UpdateDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDomainNameResponseUnmarshaller.Instance;return Invoke<UpdateDomainNameResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateDomainNameResponse UpdateDomainName(UpdateDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDomainNameResponseUnmarshaller.Instance;return Invoke<UpdateDomainNameResponse>(request, options);}",
    "output": "public UpdateDomainNameResult updateDomainName(UpdateDomainNameRequest request) {request = beforeClientExecution(request);return executeUpdateDomainName(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteSnapshotRequest(String snapshotId) {setSnapshotId(snapshotId);}",
    "output": "public DeleteSnapshotRequest(string snapshotId){_snapshotId = snapshotId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteSnapshotRequest(string snapshotId){_snapshotId = snapshotId;}",
    "output": "public DeleteSnapshotRequest(String snapshotId) {setSnapshotId(snapshotId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void readFully(byte[] buf) {readFully(buf, 0, buf.length);}",
    "output": "public void ReadFully(byte[] buf){ReadFully(buf, 0, buf.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void ReadFully(byte[] buf){ReadFully(buf, 0, buf.Length);}",
    "output": "public void readFully(byte[] buf) {readFully(buf, 0, buf.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SliceReader(IntBlockPool pool) {this.pool = pool;}",
    "output": "public SliceReader(Int32BlockPool pool){this.pool = pool;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SliceReader(Int32BlockPool pool){this.pool = pool;}",
    "output": "public SliceReader(IntBlockPool pool) {this.pool = pool;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setDeltaSearchMemoryLimit(long memoryLimit) {deltaSearchMemoryLimit = memoryLimit;}",
    "output": "public virtual void SetDeltaSearchMemoryLimit(long memoryLimit){deltaSearchMemoryLimit = memoryLimit;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetDeltaSearchMemoryLimit(long memoryLimit){deltaSearchMemoryLimit = memoryLimit;}",
    "output": "public void setDeltaSearchMemoryLimit(long memoryLimit) {deltaSearchMemoryLimit = memoryLimit;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BOOKBOOL]\\n\");buffer.append(\"    .savelinkvalues  = \").append(Integer.toHexString(getSaveLinkValues())).append(\"\\n\");buffer.append(\"[/BOOKBOOL]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[BOOKBOOL]\\n\");buffer.Append(\"    .savelinkvalues  = \").Append(StringUtil.ToHexString(SaveLinkValues)).Append(\"\\n\");buffer.Append(\"[/BOOKBOOL]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[BOOKBOOL]\\n\");buffer.Append(\"    .savelinkvalues  = \").Append(StringUtil.ToHexString(SaveLinkValues)).Append(\"\\n\");buffer.Append(\"[/BOOKBOOL]\\n\");return buffer.ToString();}",
    "output": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BOOKBOOL]\\n\");buffer.append(\"    .savelinkvalues  = \").append(Integer.toHexString(getSaveLinkValues())).append(\"\\n\");buffer.append(\"[/BOOKBOOL]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeTransitGatewayAttachmentsResult describeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayAttachments(request);}",
    "output": "public virtual DescribeTransitGatewayAttachmentsResponse DescribeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller.Instance;return Invoke<DescribeTransitGatewayAttachmentsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeTransitGatewayAttachmentsResponse DescribeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller.Instance;return Invoke<DescribeTransitGatewayAttachmentsResponse>(request, options);}",
    "output": "public DescribeTransitGatewayAttachmentsResult describeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayAttachments(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateVpcResult createVpc(CreateVpcRequest request) {request = beforeClientExecution(request);return executeCreateVpc(request);}",
    "output": "public virtual CreateVpcResponse CreateVpc(CreateVpcRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpcRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpcResponseUnmarshaller.Instance;return Invoke<CreateVpcResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateVpcResponse CreateVpc(CreateVpcRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpcRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpcResponseUnmarshaller.Instance;return Invoke<CreateVpcResponse>(request, options);}",
    "output": "public CreateVpcResult createVpc(CreateVpcRequest request) {request = beforeClientExecution(request);return executeCreateVpc(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeElasticGpusResult describeElasticGpus(DescribeElasticGpusRequest request) {request = beforeClientExecution(request);return executeDescribeElasticGpus(request);}",
    "output": "public virtual DescribeElasticGpusResponse DescribeElasticGpus(DescribeElasticGpusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeElasticGpusRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeElasticGpusResponseUnmarshaller.Instance;return Invoke<DescribeElasticGpusResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeElasticGpusResponse DescribeElasticGpus(DescribeElasticGpusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeElasticGpusRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeElasticGpusResponseUnmarshaller.Instance;return Invoke<DescribeElasticGpusResponse>(request, options);}",
    "output": "public DescribeElasticGpusResult describeElasticGpus(DescribeElasticGpusRequest request) {request = beforeClientExecution(request);return executeDescribeElasticGpus(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putInt(position++ * SizeOf.INT, c);return this;}",
    "output": "public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}byteBuffer.putInt(_position++ * libcore.io.SizeOf.INT, c);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}byteBuffer.putInt(_position++ * libcore.io.SizeOf.INT, c);return this;}",
    "output": "public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}byteBuffer.putInt(position++ * SizeOf.INT, c);return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateEndpointsBatchResult updateEndpointsBatch(UpdateEndpointsBatchRequest request) {request = beforeClientExecution(request);return executeUpdateEndpointsBatch(request);}",
    "output": "public virtual UpdateEndpointsBatchResponse UpdateEndpointsBatch(UpdateEndpointsBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEndpointsBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEndpointsBatchResponseUnmarshaller.Instance;return Invoke<UpdateEndpointsBatchResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateEndpointsBatchResponse UpdateEndpointsBatch(UpdateEndpointsBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEndpointsBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEndpointsBatchResponseUnmarshaller.Instance;return Invoke<UpdateEndpointsBatchResponse>(request, options);}",
    "output": "public UpdateEndpointsBatchResult updateEndpointsBatch(UpdateEndpointsBatchRequest request) {request = beforeClientExecution(request);return executeUpdateEndpointsBatch(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void fromRaw(byte[] bs, int p) {w1 = NB.decodeInt32(bs, p);w2 = NB.decodeInt32(bs, p + 4);w3 = NB.decodeInt32(bs, p + 8);w4 = NB.decodeInt32(bs, p + 12);w5 = NB.decodeInt32(bs, p + 16);}",
    "output": "public virtual void FromRaw(byte[] bs, int p){w1 = NB.DecodeInt32(bs, p);w2 = NB.DecodeInt32(bs, p + 4);w3 = NB.DecodeInt32(bs, p + 8);w4 = NB.DecodeInt32(bs, p + 12);w5 = NB.DecodeInt32(bs, p + 16);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void FromRaw(byte[] bs, int p){w1 = NB.DecodeInt32(bs, p);w2 = NB.DecodeInt32(bs, p + 4);w3 = NB.DecodeInt32(bs, p + 8);w4 = NB.DecodeInt32(bs, p + 12);w5 = NB.DecodeInt32(bs, p + 16);}",
    "output": "public void fromRaw(byte[] bs, int p) {w1 = NB.decodeInt32(bs, p);w2 = NB.decodeInt32(bs, p + 4);w3 = NB.decodeInt32(bs, p + 8);w4 = NB.decodeInt32(bs, p + 12);w5 = NB.decodeInt32(bs, p + 16);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static OpenSshConfig get(FS fs) {File home = fs.userHome();if (home == null)home = new File(\".\").getAbsoluteFile(); final File config = new File(new File(home, SshConstants.SSH_DIR),SshConstants.CONFIG);return new OpenSshConfig(home, config);}",
    "output": "public static NGit.Transport.OpenSshConfig Get(FS fs){FilePath home = fs.UserHome();if (home == null){home = new FilePath(\".\").GetAbsoluteFile();}FilePath config = new FilePath(new FilePath(home, \".ssh\"), Constants.CONFIG);NGit.Transport.OpenSshConfig osc = new NGit.Transport.OpenSshConfig(home, config);osc.Refresh();return osc;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static NGit.Transport.OpenSshConfig Get(FS fs){FilePath home = fs.UserHome();if (home == null){home = new FilePath(\".\").GetAbsoluteFile();}FilePath config = new FilePath(new FilePath(home, \".ssh\"), Constants.CONFIG);NGit.Transport.OpenSshConfig osc = new NGit.Transport.OpenSshConfig(home, config);osc.Refresh();return osc;}",
    "output": "public static OpenSshConfig get(FS fs) {File home = fs.userHome();if (home == null)home = new File(\".\").getAbsoluteFile(); final File config = new File(new File(home, SshConstants.SSH_DIR),SshConstants.CONFIG);return new OpenSshConfig(home, config);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public VCenterRecord(RecordInputStream in) {field_1_vcenter = in.readShort();}",
    "output": "public VCenterRecord(RecordInputStream in1){field_1_vcenter = in1.ReadShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public VCenterRecord(RecordInputStream in1){field_1_vcenter = in1.ReadShort();}",
    "output": "public VCenterRecord(RecordInputStream in) {field_1_vcenter = in.readShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {ensureOpen();ReplicationSession session = sessions.get(sessionID);if (session != null && session.isExpired(expirationThresholdMilllis)) {releaseSession(sessionID);session = null;}if (session == null) {throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source+ \" file=\" + fileName);}sessions.get(sessionID).markAccessed();return session.revision.revision.open(source, fileName);}",
    "output": "public virtual Stream ObtainFile(string sessionId, string source, string fileName){lock (padlock){EnsureOpen();ReplicationSession session;if (sessions.TryGetValue(sessionId, out session) && session != null && session.IsExpired(ExpirationThreshold)){ReleaseSession(sessionId);session = null;}if (session == null){throw new SessionExpiredException(string.Format(\"session ({0}) expired while obtaining file: source={1} file={2}\", sessionId, source, fileName));}sessions[sessionId].MarkAccessed();return session.Revision.Revision.Open(source, fileName);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual Stream ObtainFile(string sessionId, string source, string fileName){lock (padlock){EnsureOpen();ReplicationSession session;if (sessions.TryGetValue(sessionId, out session) && session != null && session.IsExpired(ExpirationThreshold)){ReleaseSession(sessionId);session = null;}if (session == null){throw new SessionExpiredException(string.Format(\"session ({0}) expired while obtaining file: source={1} file={2}\", sessionId, source, fileName));}sessions[sessionId].MarkAccessed();return session.Revision.Revision.Open(source, fileName);}}",
    "output": "public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {ensureOpen();ReplicationSession session = sessions.get(sessionID);if (session != null && session.isExpired(expirationThresholdMilllis)) {releaseSession(sessionID);session = null;}if (session == null) {throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source+ \" file=\" + fileName);}sessions.get(sessionID).markAccessed();return session.revision.revision.open(source, fileName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DownloadDefaultKeyPairResult downloadDefaultKeyPair(DownloadDefaultKeyPairRequest request) {request = beforeClientExecution(request);return executeDownloadDefaultKeyPair(request);}",
    "output": "public virtual DownloadDefaultKeyPairResponse DownloadDefaultKeyPair(DownloadDefaultKeyPairRequest request){var options = new InvokeOptions();options.RequestMarshaller = DownloadDefaultKeyPairRequestMarshaller.Instance;options.ResponseUnmarshaller = DownloadDefaultKeyPairResponseUnmarshaller.Instance;return Invoke<DownloadDefaultKeyPairResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DownloadDefaultKeyPairResponse DownloadDefaultKeyPair(DownloadDefaultKeyPairRequest request){var options = new InvokeOptions();options.RequestMarshaller = DownloadDefaultKeyPairRequestMarshaller.Instance;options.ResponseUnmarshaller = DownloadDefaultKeyPairResponseUnmarshaller.Instance;return Invoke<DownloadDefaultKeyPairResponse>(request, options);}",
    "output": "public DownloadDefaultKeyPairResult downloadDefaultKeyPair(DownloadDefaultKeyPairRequest request) {request = beforeClientExecution(request);return executeDownloadDefaultKeyPair(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(request);}",
    "output": "public virtual DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResponse>(request, options);}",
    "output": "public DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ResetEbsDefaultKmsKeyIdResult resetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request) {request = beforeClientExecution(request);return executeResetEbsDefaultKmsKeyId(request);}",
    "output": "public virtual ResetEbsDefaultKmsKeyIdResponse ResetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request){var options = new InvokeOptions();options.RequestMarshaller = ResetEbsDefaultKmsKeyIdRequestMarshaller.Instance;options.ResponseUnmarshaller = ResetEbsDefaultKmsKeyIdResponseUnmarshaller.Instance;return Invoke<ResetEbsDefaultKmsKeyIdResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ResetEbsDefaultKmsKeyIdResponse ResetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request){var options = new InvokeOptions();options.RequestMarshaller = ResetEbsDefaultKmsKeyIdRequestMarshaller.Instance;options.ResponseUnmarshaller = ResetEbsDefaultKmsKeyIdResponseUnmarshaller.Instance;return Invoke<ResetEbsDefaultKmsKeyIdResponse>(request, options);}",
    "output": "public ResetEbsDefaultKmsKeyIdResult resetEbsDefaultKmsKeyId(ResetEbsDefaultKmsKeyIdRequest request) {request = beforeClientExecution(request);return executeResetEbsDefaultKmsKeyId(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getPropertiesPerBlock() {return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}",
    "output": "public int GetPropertiesPerBlock(){return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int GetPropertiesPerBlock(){return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}",
    "output": "public int getPropertiesPerBlock() {return bigBlockSize / POIFSConstants.PROPERTY_SIZE;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {return this.evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE){return this.Evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE){return this.Evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {return this.evaluate(srcRowIndex, srcColumnIndex, numberVE, null);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetFindingsStatisticsResult getFindingsStatistics(GetFindingsStatisticsRequest request) {request = beforeClientExecution(request);return executeGetFindingsStatistics(request);}",
    "output": "public virtual GetFindingsStatisticsResponse GetFindingsStatistics(GetFindingsStatisticsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFindingsStatisticsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFindingsStatisticsResponseUnmarshaller.Instance;return Invoke<GetFindingsStatisticsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetFindingsStatisticsResponse GetFindingsStatistics(GetFindingsStatisticsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFindingsStatisticsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFindingsStatisticsResponseUnmarshaller.Instance;return Invoke<GetFindingsStatisticsResponse>(request, options);}",
    "output": "public GetFindingsStatisticsResult getFindingsStatistics(GetFindingsStatisticsRequest request) {request = beforeClientExecution(request);return executeGetFindingsStatistics(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DBCluster modifyDBCluster(ModifyDBClusterRequest request) {request = beforeClientExecution(request);return executeModifyDBCluster(request);}",
    "output": "public virtual ModifyDBClusterResponse ModifyDBCluster(ModifyDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyDBClusterResponseUnmarshaller.Instance;return Invoke<ModifyDBClusterResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ModifyDBClusterResponse ModifyDBCluster(ModifyDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyDBClusterResponseUnmarshaller.Instance;return Invoke<ModifyDBClusterResponse>(request, options);}",
    "output": "public DBCluster modifyDBCluster(ModifyDBClusterRequest request) {request = beforeClientExecution(request);return executeModifyDBCluster(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LimitTokenCountFilterFactory(Map<String, String> args) {super(args);maxTokenCount = requireInt(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = getBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public LimitTokenCountFilterFactory(IDictionary<string, string> args): base(args){maxTokenCount = RequireInt32(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = GetBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LimitTokenCountFilterFactory(IDictionary<string, string> args): base(args){maxTokenCount = RequireInt32(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = GetBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public LimitTokenCountFilterFactory(Map<String, String> args) {super(args);maxTokenCount = requireInt(args, MAX_TOKEN_COUNT_KEY);consumeAllTokens = getBoolean(args, CONSUME_ALL_TOKENS_KEY, false);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MatchNoDocsQuery build(QueryNode queryNode) throws QueryNodeException {if (!(queryNode instanceof MatchNoDocsQueryNode)) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass().getName()));}return new MatchNoDocsQuery();}",
    "output": "public virtual Query Build(IQueryNode queryNode){if (!(queryNode is MatchNoDocsQueryNode)){throw new QueryNodeException(new Message(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.ToQueryString(new EscapeQuerySyntax()), queryNode.GetType().Name));}return new BooleanQuery();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual Query Build(IQueryNode queryNode){if (!(queryNode is MatchNoDocsQueryNode)){throw new QueryNodeException(new Message(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.ToQueryString(new EscapeQuerySyntax()), queryNode.GetType().Name));}return new BooleanQuery();}",
    "output": "public MatchNoDocsQuery build(QueryNode queryNode) throws QueryNodeException {if (!(queryNode instanceof MatchNoDocsQueryNode)) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.LUCENE_QUERY_CONVERSION_ERROR, queryNode.toQueryString(new EscapeQuerySyntaxImpl()), queryNode.getClass().getName()));}return new MatchNoDocsQuery();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetUserPolicyRequest(String userName, String policyName) {setUserName(userName);setPolicyName(policyName);}",
    "output": "public GetUserPolicyRequest(string userName, string policyName){_userName = userName;_policyName = policyName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GetUserPolicyRequest(string userName, string policyName){_userName = userName;_policyName = policyName;}",
    "output": "public GetUserPolicyRequest(String userName, String policyName) {setUserName(userName);setPolicyName(policyName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Cluster rotateEncryptionKey(RotateEncryptionKeyRequest request) {request = beforeClientExecution(request);return executeRotateEncryptionKey(request);}",
    "output": "public virtual RotateEncryptionKeyResponse RotateEncryptionKey(RotateEncryptionKeyRequest request){var options = new InvokeOptions();options.RequestMarshaller = RotateEncryptionKeyRequestMarshaller.Instance;options.ResponseUnmarshaller = RotateEncryptionKeyResponseUnmarshaller.Instance;return Invoke<RotateEncryptionKeyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RotateEncryptionKeyResponse RotateEncryptionKey(RotateEncryptionKeyRequest request){var options = new InvokeOptions();options.RequestMarshaller = RotateEncryptionKeyRequestMarshaller.Instance;options.ResponseUnmarshaller = RotateEncryptionKeyResponseUnmarshaller.Instance;return Invoke<RotateEncryptionKeyResponse>(request, options);}",
    "output": "public Cluster rotateEncryptionKey(RotateEncryptionKeyRequest request) {request = beforeClientExecution(request);return executeRotateEncryptionKey(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getLinesAdded() {return nAdded;}",
    "output": "public virtual int GetLinesAdded(){return nAdded;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetLinesAdded(){return nAdded;}",
    "output": "public int getLinesAdded() {return nAdded;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<Token> getHiddenTokensToLeft(int tokenIndex, int channel) {lazyInit();if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {throw new IndexOutOfBoundsException(tokenIndex+\" not in 0..\"+(tokens.size()-1));}if (tokenIndex == 0) {return null;}int prevOnChannel =previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);if ( prevOnChannel == tokenIndex - 1 ) return null;int from = prevOnChannel+1;int to = tokenIndex-1;return filterForChannel(from, to, channel);}",
    "output": "public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex, int channel){LazyInit();if (tokenIndex < 0 || tokenIndex >= tokens.Count){throw new ArgumentOutOfRangeException(tokenIndex + \" not in 0..\" + (tokens.Count - 1));}if (tokenIndex == 0){return null;}int prevOnChannel = PreviousTokenOnChannel(tokenIndex - 1, Lexer.DefaultTokenChannel);if (prevOnChannel == tokenIndex - 1){return null;}int from = prevOnChannel + 1;int to = tokenIndex - 1;return FilterForChannel(from, to, channel);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex, int channel){LazyInit();if (tokenIndex < 0 || tokenIndex >= tokens.Count){throw new ArgumentOutOfRangeException(tokenIndex + \" not in 0..\" + (tokens.Count - 1));}if (tokenIndex == 0){return null;}int prevOnChannel = PreviousTokenOnChannel(tokenIndex - 1, Lexer.DefaultTokenChannel);if (prevOnChannel == tokenIndex - 1){return null;}int from = prevOnChannel + 1;int to = tokenIndex - 1;return FilterForChannel(from, to, channel);}",
    "output": "public List<Token> getHiddenTokensToLeft(int tokenIndex, int channel) {lazyInit();if ( tokenIndex<0 || tokenIndex>=tokens.size() ) {throw new IndexOutOfBoundsException(tokenIndex+\" not in 0..\"+(tokens.size()-1));}if (tokenIndex == 0) {return null;}int prevOnChannel =previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);if ( prevOnChannel == tokenIndex - 1 ) return null;int from = prevOnChannel+1;int to = tokenIndex-1;return filterForChannel(from, to, channel);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValidDBInstanceModificationsMessage describeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeValidDBInstanceModifications(request);}",
    "output": "public virtual DescribeValidDBInstanceModificationsResponse DescribeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeValidDBInstanceModificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeValidDBInstanceModificationsResponseUnmarshaller.Instance;return Invoke<DescribeValidDBInstanceModificationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeValidDBInstanceModificationsResponse DescribeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeValidDBInstanceModificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeValidDBInstanceModificationsResponseUnmarshaller.Instance;return Invoke<DescribeValidDBInstanceModificationsResponse>(request, options);}",
    "output": "public ValidDBInstanceModificationsMessage describeValidDBInstanceModifications(DescribeValidDBInstanceModificationsRequest request) {request = beforeClientExecution(request);return executeDescribeValidDBInstanceModifications(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void add(RevFlag flag) {flags |= flag.mask;}",
    "output": "public void Add(RevFlag flag){flags |= flag.mask;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Add(RevFlag flag){flags |= flag.mask;}",
    "output": "public final void add(RevFlag flag) {flags |= flag.mask;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {Iterator<E> it = iterator();while (it.hasNext()) {it.next();it.remove();}}",
    "output": "public virtual void clear(){java.util.Iterator<E> it = iterator();while (it.hasNext()){it.next();it.remove();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void clear(){java.util.Iterator<E> it = iterator();while (it.hasNext()){it.next();it.remove();}}",
    "output": "public void clear() {Iterator<E> it = iterator();while (it.hasNext()) {it.next();it.remove();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RegisterImageResult registerImage(RegisterImageRequest request) {request = beforeClientExecution(request);return executeRegisterImage(request);}",
    "output": "public virtual RegisterImageResponse RegisterImage(RegisterImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterImageRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterImageResponseUnmarshaller.Instance;return Invoke<RegisterImageResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RegisterImageResponse RegisterImage(RegisterImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterImageRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterImageResponseUnmarshaller.Instance;return Invoke<RegisterImageResponse>(request, options);}",
    "output": "public RegisterImageResult registerImage(RegisterImageRequest request) {request = beforeClientExecution(request);return executeRegisterImage(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object other) {return sameClassAs(other) &&term.equals(((TermQuery) other).term);}",
    "output": "public override bool Equals(object o){if (!(o is TermQuery)){return false;}TermQuery other = (TermQuery)o;return (this.Boost == other.Boost) && this.term.Equals(other.term);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){if (!(o is TermQuery)){return false;}TermQuery other = (TermQuery)o;return (this.Boost == other.Boost) && this.term.Equals(other.term);}",
    "output": "public boolean equals(Object other) {return sameClassAs(other) &&term.equals(((TermQuery) other).term);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public URI(String scheme, String authority, String path, String query,String fragment) throws URISyntaxException {if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {throw new URISyntaxException(path, \"Relative path\");}StringBuilder uri = new StringBuilder();if (scheme != null) {uri.append(scheme);uri.append(':');}if (authority != null) {uri.append(\"\");AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path != null) {PATH_ENCODER.appendEncoded(uri, path);}if (query != null) {uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment != null) {uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.toString(), false);}",
    "output": "public URI(string scheme, string authority, string path, string query, string fragment){if (scheme != null && path != null && !string.IsNullOrEmpty(path) && path[0] != '/'){throw new java.net.URISyntaxException(path, \"Relative path\");}java.lang.StringBuilder uri = new java.lang.StringBuilder();if (scheme != null){uri.append(scheme);uri.append(':');}if (authority != null){uri.append(\"\");AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path != null){PATH_ENCODER.appendEncoded(uri, path);}if (query != null){uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment != null){uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.ToString(), false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public URI(string scheme, string authority, string path, string query, string fragment){if (scheme != null && path != null && !string.IsNullOrEmpty(path) && path[0] != '/'){throw new java.net.URISyntaxException(path, \"Relative path\");}java.lang.StringBuilder uri = new java.lang.StringBuilder();if (scheme != null){uri.append(scheme);uri.append(':');}if (authority != null){uri.append(\"\");AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path != null){PATH_ENCODER.appendEncoded(uri, path);}if (query != null){uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment != null){uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.ToString(), false);}",
    "output": "public URI(String scheme, String authority, String path, String query,String fragment) throws URISyntaxException {if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {throw new URISyntaxException(path, \"Relative path\");}StringBuilder uri = new StringBuilder();if (scheme != null) {uri.append(scheme);uri.append(':');}if (authority != null) {uri.append(\"\");AUTHORITY_ENCODER.appendEncoded(uri, authority);}if (path != null) {PATH_ENCODER.appendEncoded(uri, path);}if (query != null) {uri.append('?');ALL_LEGAL_ENCODER.appendEncoded(uri, query);}if (fragment != null) {uri.append('#');ALL_LEGAL_ENCODER.appendEncoded(uri, fragment);}parseURI(uri.toString(), false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BlameGenerator(Repository repository, String path) {this.repository = repository;this.resultPath = PathFilter.create(path);idBuf = new MutableObjectId();setFollowFileRenames(true);initRevPool(false);remaining = -1;}",
    "output": "public BlameGenerator(Repository repository, string path){this.repository = repository;this.resultPath = PathFilter.Create(path);idBuf = new MutableObjectId();SetFollowFileRenames(true);InitRevPool(false);remaining = -1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BlameGenerator(Repository repository, string path){this.repository = repository;this.resultPath = PathFilter.Create(path);idBuf = new MutableObjectId();SetFollowFileRenames(true);InitRevPool(false);remaining = -1;}",
    "output": "public BlameGenerator(Repository repository, String path) {this.repository = repository;this.resultPath = PathFilter.create(path);idBuf = new MutableObjectId();setFollowFileRenames(true);initRevPool(false);remaining = -1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized void writeTo(OutputStream out) throws IOException {out.write(buf, 0, count);}",
    "output": "public virtual void writeTo(java.io.OutputStream @out){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void writeTo(java.io.OutputStream @out){throw new System.NotImplementedException();}",
    "output": "public synchronized void writeTo(OutputStream out) throws IOException {out.write(buf, 0, count);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeletableItem(String name, java.util.List<Attribute> attributes) {setName(name);setAttributes(attributes);}",
    "output": "public DeletableItem(string name, List<Attribute> attributes){_name = name;_attributes = attributes;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeletableItem(string name, List<Attribute> attributes){_name = name;_attributes = attributes;}",
    "output": "public DeletableItem(String name, java.util.List<Attribute> attributes) {setName(name);setAttributes(attributes);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeGroupResult describeGroup(DescribeGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGroup(request);}",
    "output": "public virtual DescribeGroupResponse DescribeGroup(DescribeGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGroupResponseUnmarshaller.Instance;return Invoke<DescribeGroupResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeGroupResponse DescribeGroup(DescribeGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGroupResponseUnmarshaller.Instance;return Invoke<DescribeGroupResponse>(request, options);}",
    "output": "public DescribeGroupResult describeGroup(DescribeGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGroup(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public EnableVpcClassicLinkResult enableVpcClassicLink(EnableVpcClassicLinkRequest request) {request = beforeClientExecution(request);return executeEnableVpcClassicLink(request);}",
    "output": "public virtual EnableVpcClassicLinkResponse EnableVpcClassicLink(EnableVpcClassicLinkRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableVpcClassicLinkRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableVpcClassicLinkResponseUnmarshaller.Instance;return Invoke<EnableVpcClassicLinkResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual EnableVpcClassicLinkResponse EnableVpcClassicLink(EnableVpcClassicLinkRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableVpcClassicLinkRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableVpcClassicLinkResponseUnmarshaller.Instance;return Invoke<EnableVpcClassicLinkResponse>(request, options);}",
    "output": "public EnableVpcClassicLinkResult enableVpcClassicLink(EnableVpcClassicLinkRequest request) {request = beforeClientExecution(request);return executeEnableVpcClassicLink(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeStacksResult describeStacks() {return describeStacks(new DescribeStacksRequest());}",
    "output": "public virtual DescribeStacksResponse DescribeStacks(){return DescribeStacks(new DescribeStacksRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeStacksResponse DescribeStacks(){return DescribeStacks(new DescribeStacksRequest());}",
    "output": "public DescribeStacksResult describeStacks() {return describeStacks(new DescribeStacksRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharBuffer duplicate() {return copy(this);}",
    "output": "public override java.nio.CharBuffer duplicate(){return copy(this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.CharBuffer duplicate(){return copy(this);}",
    "output": "public CharBuffer duplicate() {return copy(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static double mod(double n, double d) {if (d == 0) {return Double.NaN;}else if (sign(n) == sign(d)) {return n % d;}else {return ((n % d) + d) % d;}}",
    "output": "public static double Mod(double n, double d){double result = 0;if (d == 0){result = double.NaN;}else if (Sign(n) == Sign(d)){result = n % d;}else{result = ((n % d) + d) % d;}return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static double Mod(double n, double d){double result = 0;if (d == 0){result = double.NaN;}else if (Sign(n) == Sign(d)){result = n % d;}else{result = ((n % d) + d) % d;}return result;}",
    "output": "public static double mod(double n, double d) {if (d == 0) {return Double.NaN;}else if (sign(n) == sign(d)) {return n % d;}else {return ((n % d) + d) % d;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String getLocalizedMessage(String key, Locale locale) {Object message = getResourceBundleObject(key, locale);if (message == null) {return \"Message with key:\" + key + \" and locale: \" + locale+ \" not found.\";}return message.toString();}",
    "output": "public static string GetLocalizedMessage(string key, CultureInfo locale){string message = GetResourceBundleObject(key, locale);if (message == null){return \"Message with key:\" + key + \" and locale: \" + locale+ \" not found.\";}return message;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string GetLocalizedMessage(string key, CultureInfo locale){string message = GetResourceBundleObject(key, locale);if (message == null){return \"Message with key:\" + key + \" and locale: \" + locale+ \" not found.\";}return message;}",
    "output": "public static String getLocalizedMessage(String key, Locale locale) {Object message = getResourceBundleObject(key, locale);if (message == null) {return \"Message with key:\" + key + \" and locale: \" + locale+ \" not found.\";}return message.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return \"\";return getChild().toQueryString(escapeSyntaxParser) + \"^\"+ getValueString();}",
    "output": "public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (Child == null)return \"\";return Child.ToQueryString(escapeSyntaxParser) + \"^\"+ GetValueString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (Child == null)return \"\";return Child.ToQueryString(escapeSyntaxParser) + \"^\"+ GetValueString();}",
    "output": "public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return \"\";return getChild().toQueryString(escapeSyntaxParser) + \"^\"+ getValueString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return \"\";return \"( \" + getChild().toQueryString(escapeSyntaxParser) + \" )\";}",
    "output": "public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (GetChild() == null)return \"\";return \"( \" + GetChild().ToQueryString(escapeSyntaxParser) + \" )\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser){if (GetChild() == null)return \"\";return \"( \" + GetChild().ToQueryString(escapeSyntaxParser) + \" )\";}",
    "output": "public CharSequence toQueryString(EscapeQuerySyntax escapeSyntaxParser) {if (getChild() == null)return \"\";return \"( \" + getChild().toQueryString(escapeSyntaxParser) + \" )\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetInvalidationResult getInvalidation(GetInvalidationRequest request) {request = beforeClientExecution(request);return executeGetInvalidation(request);}",
    "output": "public virtual GetInvalidationResponse GetInvalidation(GetInvalidationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInvalidationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInvalidationResponseUnmarshaller.Instance;return Invoke<GetInvalidationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetInvalidationResponse GetInvalidation(GetInvalidationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInvalidationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInvalidationResponseUnmarshaller.Instance;return Invoke<GetInvalidationResponse>(request, options);}",
    "output": "public GetInvalidationResult getInvalidation(GetInvalidationRequest request) {request = beforeClientExecution(request);return executeGetInvalidation(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String formatAsString() {return formatAsString(null, false);}",
    "output": "public String FormatAsString(){return FormatAsString(null, false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public String FormatAsString(){return FormatAsString(null, false);}",
    "output": "public String formatAsString() {return formatAsString(null, false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final int prefixCompare(byte[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, mask(1, NB.decodeInt32(bs, p)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, mask(2, NB.decodeInt32(bs, p + 4)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, mask(3, NB.decodeInt32(bs, p + 8)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, mask(4, NB.decodeInt32(bs, p + 12)));if (cmp != 0)return cmp;return NB.compareUInt32(w5, mask(5, NB.decodeInt32(bs, p + 16)));}",
    "output": "public int PrefixCompare(byte[] bs, int p){int cmp;cmp = NB.CompareUInt32(w1, Mask(1, NB.DecodeInt32(bs, p)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w2, Mask(2, NB.DecodeInt32(bs, p + 4)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w3, Mask(3, NB.DecodeInt32(bs, p + 8)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w4, Mask(4, NB.DecodeInt32(bs, p + 12)));if (cmp != 0){return cmp;}return NB.CompareUInt32(w5, Mask(5, NB.DecodeInt32(bs, p + 16)));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int PrefixCompare(byte[] bs, int p){int cmp;cmp = NB.CompareUInt32(w1, Mask(1, NB.DecodeInt32(bs, p)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w2, Mask(2, NB.DecodeInt32(bs, p + 4)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w3, Mask(3, NB.DecodeInt32(bs, p + 8)));if (cmp != 0){return cmp;}cmp = NB.CompareUInt32(w4, Mask(4, NB.DecodeInt32(bs, p + 12)));if (cmp != 0){return cmp;}return NB.CompareUInt32(w5, Mask(5, NB.DecodeInt32(bs, p + 16)));}",
    "output": "public final int prefixCompare(byte[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, mask(1, NB.decodeInt32(bs, p)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, mask(2, NB.decodeInt32(bs, p + 4)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, mask(3, NB.decodeInt32(bs, p + 8)));if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, mask(4, NB.decodeInt32(bs, p + 12)));if (cmp != 0)return cmp;return NB.compareUInt32(w5, mask(5, NB.decodeInt32(bs, p + 16)));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AddApplicationInputProcessingConfigurationResult addApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request) {request = beforeClientExecution(request);return executeAddApplicationInputProcessingConfiguration(request);}",
    "output": "public virtual AddApplicationInputProcessingConfigurationResponse AddApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationInputProcessingConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationInputProcessingConfigurationResponseUnmarshaller.Instance;return Invoke<AddApplicationInputProcessingConfigurationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AddApplicationInputProcessingConfigurationResponse AddApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationInputProcessingConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationInputProcessingConfigurationResponseUnmarshaller.Instance;return Invoke<AddApplicationInputProcessingConfigurationResponse>(request, options);}",
    "output": "public AddApplicationInputProcessingConfigurationResult addApplicationInputProcessingConfiguration(AddApplicationInputProcessingConfigurationRequest request) {request = beforeClientExecution(request);return executeAddApplicationInputProcessingConfiguration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static TermRangeQuery newStringRange(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {BytesRef lower = lowerTerm == null ? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null ? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}",
    "output": "public static TermRangeQuery NewStringRange(string field, string lowerTerm, string upperTerm, bool includeLower, bool includeUpper){BytesRef lower = lowerTerm == null ? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null ? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static TermRangeQuery NewStringRange(string field, string lowerTerm, string upperTerm, bool includeLower, bool includeUpper){BytesRef lower = lowerTerm == null ? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null ? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}",
    "output": "public static TermRangeQuery newStringRange(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {BytesRef lower = lowerTerm == null ? null : new BytesRef(lowerTerm);BytesRef upper = upperTerm == null ? null : new BytesRef(upperTerm);return new TermRangeQuery(field, lower, upper, includeLower, includeUpper);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "static public double fv(double r, int nper, double pmt, double pv, int type) {return -(pv * Math.pow(1 + r, nper) + pmt * (1+r*type) * (Math.pow(1 + r, nper) - 1) / r);}",
    "output": "static public double FV(double r, int nper, double pmt, double pv, int type){double fv = -(pv * Math.Pow(1 + r, nper) + pmt * (1 + r * type) * (Math.Pow(1 + r, nper) - 1) / r);return fv;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "static public double FV(double r, int nper, double pmt, double pv, int type){double fv = -(pv * Math.Pow(1 + r, nper) + pmt * (1 + r * type) * (Math.Pow(1 + r, nper) - 1) / r);return fv;}",
    "output": "static public double fv(double r, int nper, double pmt, double pv, int type) {return -(pv * Math.pow(1 + r, nper) + pmt * (1+r*type) * (Math.pow(1 + r, nper) - 1) / r);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int checkExternSheet(int firstSheetIndex, int lastSheetIndex) {int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.length; i++) {SupBookRecord ebr = _externalBookBlocks[i].getExternalBookRecord();if (ebr.isInternalReferences()) {thisWbIndex = i;break;}}if (thisWbIndex < 0) {throw new RuntimeException(\"Could not find 'internal references' EXTERNALBOOK\");}int i = _externSheetRecord.getRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (i >= 0) {return i;}return _externSheetRecord.addRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}",
    "output": "public int CheckExternSheet(int firstSheetIndex, int lastSheetIndex){int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.Length; i++){SupBookRecord ebr = _externalBookBlocks[i].GetExternalBookRecord();if (ebr.IsInternalReferences){thisWbIndex = i;break;}}if (thisWbIndex < 0){throw new InvalidOperationException(\"Could not find 'internal references' EXTERNALBOOK\");}int j = _externSheetRecord.GetRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (j >= 0){return j;}return _externSheetRecord.AddRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int CheckExternSheet(int firstSheetIndex, int lastSheetIndex){int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.Length; i++){SupBookRecord ebr = _externalBookBlocks[i].GetExternalBookRecord();if (ebr.IsInternalReferences){thisWbIndex = i;break;}}if (thisWbIndex < 0){throw new InvalidOperationException(\"Could not find 'internal references' EXTERNALBOOK\");}int j = _externSheetRecord.GetRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (j >= 0){return j;}return _externSheetRecord.AddRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}",
    "output": "public int checkExternSheet(int firstSheetIndex, int lastSheetIndex) {int thisWbIndex = -1; for (int i = 0; i < _externalBookBlocks.length; i++) {SupBookRecord ebr = _externalBookBlocks[i].getExternalBookRecord();if (ebr.isInternalReferences()) {thisWbIndex = i;break;}}if (thisWbIndex < 0) {throw new RuntimeException(\"Could not find 'internal references' EXTERNALBOOK\");}int i = _externSheetRecord.getRefIxForSheet(thisWbIndex, firstSheetIndex, lastSheetIndex);if (i >= 0) {return i;}return _externSheetRecord.addRef(thisWbIndex, firstSheetIndex, lastSheetIndex);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeSentimentDetectionJobResult describeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeSentimentDetectionJob(request);}",
    "output": "public virtual DescribeSentimentDetectionJobResponse DescribeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSentimentDetectionJobRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSentimentDetectionJobResponseUnmarshaller.Instance;return Invoke<DescribeSentimentDetectionJobResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeSentimentDetectionJobResponse DescribeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSentimentDetectionJobRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSentimentDetectionJobResponseUnmarshaller.Instance;return Invoke<DescribeSentimentDetectionJobResponse>(request, options);}",
    "output": "public DescribeSentimentDetectionJobResult describeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeSentimentDetectionJob(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[UNITS]\\n\");buffer.append(\"    .units                = \").append(\"0x\").append(HexDump.toHex(  getUnits ())).append(\" (\").append( getUnits() ).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"[/UNITS]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[UNITS]\\n\");buffer.Append(\"    .units                = \").Append(\"0x\").Append(HexDump.ToHex(Units)).Append(\" (\").Append(Units).Append(\" )\");buffer.Append(Environment.NewLine);buffer.Append(\"[/UNITS]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[UNITS]\\n\");buffer.Append(\"    .units                = \").Append(\"0x\").Append(HexDump.ToHex(Units)).Append(\" (\").Append(Units).Append(\" )\");buffer.Append(Environment.NewLine);buffer.Append(\"[/UNITS]\\n\");return buffer.ToString();}",
    "output": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[UNITS]\\n\");buffer.append(\"    .units                = \").append(\"0x\").append(HexDump.toHex(  getUnits ())).append(\" (\").append( getUnits() ).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"[/UNITS]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NavigableMap<K, V> tailMap(K from, boolean inclusive) {Bound fromBound = inclusive ? INCLUSIVE : EXCLUSIVE;return subMap(from, fromBound, null, NO_BOUND);}",
    "output": "public java.util.NavigableMap<K, V> tailMap(K from, bool inclusive){java.util.TreeMap.Bound fromBound = inclusive ? java.util.TreeMap.Bound.INCLUSIVE: java.util.TreeMap.Bound.EXCLUSIVE;return this.subMap(from, fromBound, default(K), java.util.TreeMap.Bound.NO_BOUND);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.util.NavigableMap<K, V> tailMap(K from, bool inclusive){java.util.TreeMap.Bound fromBound = inclusive ? java.util.TreeMap.Bound.INCLUSIVE: java.util.TreeMap.Bound.EXCLUSIVE;return this.subMap(from, fromBound, default(K), java.util.TreeMap.Bound.NO_BOUND);}",
    "output": "public NavigableMap<K, V> tailMap(K from, boolean inclusive) {Bound fromBound = inclusive ? INCLUSIVE : EXCLUSIVE;return subMap(from, fromBound, null, NO_BOUND);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int compareTo(Ref o1, Ref o2) {return o1.getName().compareTo(o2.getName());}",
    "output": "public static int CompareTo(Ref o1, Ref o2){return Sharpen.Runtime.CompareOrdinal(o1.GetName(), o2.GetName());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int CompareTo(Ref o1, Ref o2){return Sharpen.Runtime.CompareOrdinal(o1.GetName(), o2.GetName());}",
    "output": "public static int compareTo(Ref o1, Ref o2) {return o1.getName().compareTo(o2.getName());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutEventsConfigurationResult putEventsConfiguration(PutEventsConfigurationRequest request) {request = beforeClientExecution(request);return executePutEventsConfiguration(request);}",
    "output": "public virtual PutEventsConfigurationResponse PutEventsConfiguration(PutEventsConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutEventsConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutEventsConfigurationResponseUnmarshaller.Instance;return Invoke<PutEventsConfigurationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutEventsConfigurationResponse PutEventsConfiguration(PutEventsConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutEventsConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutEventsConfigurationResponseUnmarshaller.Instance;return Invoke<PutEventsConfigurationResponse>(request, options);}",
    "output": "public PutEventsConfigurationResult putEventsConfiguration(PutEventsConfigurationRequest request) {request = beforeClientExecution(request);return executePutEventsConfiguration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DetachFromIndexResult detachFromIndex(DetachFromIndexRequest request) {request = beforeClientExecution(request);return executeDetachFromIndex(request);}",
    "output": "public virtual DetachFromIndexResponse DetachFromIndex(DetachFromIndexRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetachFromIndexRequestMarshaller.Instance;options.ResponseUnmarshaller = DetachFromIndexResponseUnmarshaller.Instance;return Invoke<DetachFromIndexResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DetachFromIndexResponse DetachFromIndex(DetachFromIndexRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetachFromIndexRequestMarshaller.Instance;options.ResponseUnmarshaller = DetachFromIndexResponseUnmarshaller.Instance;return Invoke<DetachFromIndexResponse>(request, options);}",
    "output": "public DetachFromIndexResult detachFromIndex(DetachFromIndexRequest request) {request = beforeClientExecution(request);return executeDetachFromIndex(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RebaseCommand rebase() {return new RebaseCommand(repo);}",
    "output": "public virtual RebaseCommand Rebase(){return new RebaseCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RebaseCommand Rebase(){return new RebaseCommand(repo);}",
    "output": "public RebaseCommand rebase() {return new RebaseCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchGroup<T> next() {assert iter.hasNext();final SearchGroup<T> group = iter.next();if (group.sortValues == null) {throw new IllegalArgumentException(\"group.sortValues is null; you must pass fillFields=true to the first pass collector\");}return group;}",
    "output": "public ISearchGroup<T> Next(){ISearchGroup<T> group = iter.Current;if (group.SortValues == null){throw new ArgumentException(\"group.sortValues is null; you must pass fillFields=true to the first pass collector\");}return group;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ISearchGroup<T> Next(){ISearchGroup<T> group = iter.Current;if (group.SortValues == null){throw new ArgumentException(\"group.sortValues is null; you must pass fillFields=true to the first pass collector\");}return group;}",
    "output": "public SearchGroup<T> next() {assert iter.hasNext();final SearchGroup<T> group = iter.next();if (group.sortValues == null) {throw new IllegalArgumentException(\"group.sortValues is null; you must pass fillFields=true to the first pass collector\");}return group;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateMLModelResult updateMLModel(UpdateMLModelRequest request) {request = beforeClientExecution(request);return executeUpdateMLModel(request);}",
    "output": "public virtual UpdateMLModelResponse UpdateMLModel(UpdateMLModelRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMLModelRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMLModelResponseUnmarshaller.Instance;return Invoke<UpdateMLModelResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateMLModelResponse UpdateMLModel(UpdateMLModelRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMLModelRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMLModelResponseUnmarshaller.Instance;return Invoke<UpdateMLModelResponse>(request, options);}",
    "output": "public UpdateMLModelResult updateMLModel(UpdateMLModelRequest request) {request = beforeClientExecution(request);return executeUpdateMLModel(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateIPSetResult createIPSet(CreateIPSetRequest request) {request = beforeClientExecution(request);return executeCreateIPSet(request);}",
    "output": "public virtual CreateIPSetResponse CreateIPSet(CreateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateIPSetResponseUnmarshaller.Instance;return Invoke<CreateIPSetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateIPSetResponse CreateIPSet(CreateIPSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateIPSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateIPSetResponseUnmarshaller.Instance;return Invoke<CreateIPSetResponse>(request, options);}",
    "output": "public CreateIPSetResult createIPSet(CreateIPSetRequest request) {request = beforeClientExecution(request);return executeCreateIPSet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FieldDateResolutionFCListener(QueryConfigHandler config) {this.config = config;}",
    "output": "public FieldDateResolutionFCListener(QueryConfigHandler config){this.config = config;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FieldDateResolutionFCListener(QueryConfigHandler config){this.config = config;}",
    "output": "public FieldDateResolutionFCListener(QueryConfigHandler config) {this.config = config;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean containsValue(Object value) {HashMapEntry[] tab = table;int len = tab.length;if (value == null) {for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (e.value == null) {return true;}}}return entryForNullKey != null && entryForNullKey.value == null;}for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return entryForNullKey != null && value.equals(entryForNullKey.value);}",
    "output": "public override bool containsValue(object value){java.util.HashMap.HashMapEntry<K, V>[] tab = table;int len = tab.Length;if (value == null){{for (int i = 0; i < len; i++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i]; e != null; e = e.next){if (e.value == null){return true;}}}}}return entryForNullKey != null && (object)entryForNullKey.value == null;}{for (int i_1 = 0; i_1 < len; i_1++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i_1]; e != null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return entryForNullKey != null && value.Equals(entryForNullKey.value);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool containsValue(object value){java.util.HashMap.HashMapEntry<K, V>[] tab = table;int len = tab.Length;if (value == null){{for (int i = 0; i < len; i++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i]; e != null; e = e.next){if (e.value == null){return true;}}}}}return entryForNullKey != null && (object)entryForNullKey.value == null;}{for (int i_1 = 0; i_1 < len; i_1++){{for (java.util.HashMap.HashMapEntry<K, V> e = tab[i_1]; e != null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return entryForNullKey != null && value.Equals(entryForNullKey.value);}",
    "output": "@Override public boolean containsValue(Object value) {HashMapEntry[] tab = table;int len = tab.length;if (value == null) {for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (e.value == null) {return true;}}}return entryForNullKey != null && entryForNullKey.value == null;}for (int i = 0; i < len; i++) {for (HashMapEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return entryForNullKey != null && value.equals(entryForNullKey.value);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeWorkspaceBundlesResult describeWorkspaceBundles(DescribeWorkspaceBundlesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceBundles(request);}",
    "output": "public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles(DescribeWorkspaceBundlesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeWorkspaceBundlesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeWorkspaceBundlesResponseUnmarshaller.Instance;return Invoke<DescribeWorkspaceBundlesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles(DescribeWorkspaceBundlesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeWorkspaceBundlesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeWorkspaceBundlesResponseUnmarshaller.Instance;return Invoke<DescribeWorkspaceBundlesResponse>(request, options);}",
    "output": "public DescribeWorkspaceBundlesResult describeWorkspaceBundles(DescribeWorkspaceBundlesRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspaceBundles(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -1;return this;}",
    "output": "public DocsEnum Reset(int[] postings){this.postings = postings;upto = -1;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DocsEnum Reset(int[] postings){this.postings = postings;upto = -1;return this;}",
    "output": "public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -1;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(sid); out.writeShort(_reserved0);out.writeInt(_engineId);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(sid); out1.WriteShort(_reserved0);out1.WriteInt(_engineId);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(sid); out1.WriteShort(_reserved0);out1.WriteInt(_engineId);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(sid); out.writeShort(_reserved0);out.writeInt(_engineId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static CharBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteCharArrayBuffer(capacity);}",
    "output": "public static java.nio.CharBuffer allocate(int capacity_1){if (capacity_1 < 0){throw new System.ArgumentException();}return new java.nio.ReadWriteCharArrayBuffer(capacity_1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static java.nio.CharBuffer allocate(int capacity_1){if (capacity_1 < 0){throw new System.ArgumentException();}return new java.nio.ReadWriteCharArrayBuffer(capacity_1);}",
    "output": "public static CharBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteCharArrayBuffer(capacity);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(\">=\");buffer.append(operands[ 1 ]);return buffer.toString();}",
    "output": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\">=\");buffer.Append(operands[1]);return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\">=\");buffer.Append(operands[1]);return buffer.ToString();}",
    "output": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(\">=\");buffer.append(operands[ 1 ]);return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeletePipelineResult deletePipeline(DeletePipelineRequest request) {request = beforeClientExecution(request);return executeDeletePipeline(request);}",
    "output": "public virtual DeletePipelineResponse DeletePipeline(DeletePipelineRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeletePipelineRequestMarshaller.Instance;options.ResponseUnmarshaller = DeletePipelineResponseUnmarshaller.Instance;return Invoke<DeletePipelineResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeletePipelineResponse DeletePipeline(DeletePipelineRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeletePipelineRequestMarshaller.Instance;options.ResponseUnmarshaller = DeletePipelineResponseUnmarshaller.Instance;return Invoke<DeletePipelineResponse>(request, options);}",
    "output": "public DeletePipelineResult deletePipeline(DeletePipelineRequest request) {request = beforeClientExecution(request);return executeDeletePipeline(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public InterfaceHdrRecord(int codePage) {_codepage = codePage;}",
    "output": "public InterfaceHdrRecord(int codePage){_codepage = codePage;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public InterfaceHdrRecord(int codePage){_codepage = codePage;}",
    "output": "public InterfaceHdrRecord(int codePage) {_codepage = codePage;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeScalingParametersResult describeScalingParameters(DescribeScalingParametersRequest request) {request = beforeClientExecution(request);return executeDescribeScalingParameters(request);}",
    "output": "public virtual DescribeScalingParametersResponse DescribeScalingParameters(DescribeScalingParametersRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScalingParametersRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScalingParametersResponseUnmarshaller.Instance;return Invoke<DescribeScalingParametersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeScalingParametersResponse DescribeScalingParameters(DescribeScalingParametersRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScalingParametersRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScalingParametersResponseUnmarshaller.Instance;return Invoke<DescribeScalingParametersResponse>(request, options);}",
    "output": "public DescribeScalingParametersResult describeScalingParameters(DescribeScalingParametersRequest request) {request = beforeClientExecution(request);return executeDescribeScalingParameters(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Entry<K, V> higherEntry(K key) {return immutableCopy(findBounded(key, HIGHER));}",
    "output": "public java.util.MapClass.Entry<K, V> higherEntry(K key){return this._enclosing.immutableCopy(this.findBounded(key, java.util.TreeMap.Relation.HIGHER));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.util.MapClass.Entry<K, V> higherEntry(K key){return this._enclosing.immutableCopy(this.findBounded(key, java.util.TreeMap.Relation.HIGHER));}",
    "output": "public Entry<K, V> higherEntry(K key) {return immutableCopy(findBounded(key, HIGHER));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateSpotDatafeedSubscriptionRequest(String bucket) {setBucket(bucket);}",
    "output": "public CreateSpotDatafeedSubscriptionRequest(string bucket){_bucket = bucket;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CreateSpotDatafeedSubscriptionRequest(string bucket){_bucket = bucket;}",
    "output": "public CreateSpotDatafeedSubscriptionRequest(String bucket) {setBucket(bucket);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getLocalizedMessage() {return getLocalizedMessage(Locale.getDefault());}",
    "output": "public virtual string GetLocalizedMessage(){return GetLocalizedMessage(CultureInfo.InvariantCulture);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetLocalizedMessage(){return GetLocalizedMessage(CultureInfo.InvariantCulture);}",
    "output": "public String getLocalizedMessage() {return getLocalizedMessage(Locale.getDefault());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UDFFinder getUDFFinder(){return _uBook.getUDFFinder();}",
    "output": "public UDFFinder GetUDFFinder(){return _uBook.GetUDFFinder();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UDFFinder GetUDFFinder(){return _uBook.GetUDFFinder();}",
    "output": "public UDFFinder getUDFFinder(){return _uBook.getUDFFinder();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ExternalName getExternalName(String nameName, String sheetName, int externalWorkbookNumber) {throw new IllegalStateException(\"XSSF-style external names are not supported for HSSF\");}",
    "output": "public ExternalName GetExternalName(String nameName, String sheetName, int externalWorkbookNumber){throw new InvalidOperationException(\"XSSF-style external names are not supported for HSSF\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ExternalName GetExternalName(String nameName, String sheetName, int externalWorkbookNumber){throw new InvalidOperationException(\"XSSF-style external names are not supported for HSSF\");}",
    "output": "public ExternalName getExternalName(String nameName, String sheetName, int externalWorkbookNumber) {throw new IllegalStateException(\"XSSF-style external names are not supported for HSSF\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OldFormulaRecord(RecordInputStream ris) {super(ris, ris.getSid() == biff2_sid);if (isBiff2()) {field_4_value = ris.readDouble();} else {long valueLongBits  = ris.readLong();specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);if (specialCachedValue == null) {field_4_value = Double.longBitsToDouble(valueLongBits);}}if (isBiff2()) {field_5_options = (short)ris.readUByte();} else {field_5_options = ris.readShort();}int expression_len = ris.readShort();int nBytesAvailable = ris.available();field_6_parsed_expr = Formula.read(expression_len, ris, nBytesAvailable);}",
    "output": "public OldFormulaRecord(RecordInputStream ris) :base(ris, ris.Sid == biff2_sid){;if (IsBiff2){field_4_value = ris.ReadDouble();}else{long valueLongBits = ris.ReadLong();specialCachedValue = SpecialCachedValue.Create(valueLongBits);if (specialCachedValue == null){field_4_value = BitConverter.Int64BitsToDouble(valueLongBits);}}if (IsBiff2){field_5_options = (short)ris.ReadUByte();}else{field_5_options = ris.ReadShort();}int expression_len = ris.ReadShort();int nBytesAvailable = ris.Available();field_6_Parsed_expr = Formula.Read(expression_len, ris, nBytesAvailable);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public OldFormulaRecord(RecordInputStream ris) :base(ris, ris.Sid == biff2_sid){;if (IsBiff2){field_4_value = ris.ReadDouble();}else{long valueLongBits = ris.ReadLong();specialCachedValue = SpecialCachedValue.Create(valueLongBits);if (specialCachedValue == null){field_4_value = BitConverter.Int64BitsToDouble(valueLongBits);}}if (IsBiff2){field_5_options = (short)ris.ReadUByte();}else{field_5_options = ris.ReadShort();}int expression_len = ris.ReadShort();int nBytesAvailable = ris.Available();field_6_Parsed_expr = Formula.Read(expression_len, ris, nBytesAvailable);}",
    "output": "public OldFormulaRecord(RecordInputStream ris) {super(ris, ris.getSid() == biff2_sid);if (isBiff2()) {field_4_value = ris.readDouble();} else {long valueLongBits  = ris.readLong();specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);if (specialCachedValue == null) {field_4_value = Double.longBitsToDouble(valueLongBits);}}if (isBiff2()) {field_5_options = (short)ris.readUByte();} else {field_5_options = ris.readShort();}int expression_len = ris.readShort();int nBytesAvailable = ris.available();field_6_parsed_expr = Formula.read(expression_len, ris, nBytesAvailable);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int stem(char s[], int len) {assert s.length >= len + 1 : \"this stemmer requires an oversized array of at least 1\";len = plural.apply(s, len);len = unification.apply(s, len);len = adverb.apply(s, len);int oldlen;do {oldlen = len;len = augmentative.apply(s, len);} while (len != oldlen);oldlen = len;len = noun.apply(s, len);if (len == oldlen) { len = verb.apply(s, len);}len = vowel.apply(s, len);for (int i = 0; i < len; i++)switch(s[i]) {case '\u00e1': s[i] = 'a'; break;case '\u00e9':case '\u00ea': s[i] = 'e'; break;case '\u00ed': s[i] = 'i'; break;case '\u00f3': s[i] = 'o'; break;case '\u00fa': s[i] = 'u'; break;}return len;}",
    "output": "public virtual int Stem(char[] s, int len){Debug.Assert(s.Length >= len + 1, \"this stemmer requires an oversized array of at least 1\");len = plural.Apply(s, len);len = unification.Apply(s, len);len = adverb.Apply(s, len);int oldlen;do{oldlen = len;len = augmentative.Apply(s, len);} while (len != oldlen);oldlen = len;len = noun.Apply(s, len);if (len == oldlen) {len = verb.Apply(s, len);}len = vowel.Apply(s, len);for (int i = 0; i < len; i++){switch (s[i]){case '\u00e1':s[i] = 'a';break;case '\u00e9':case '\u00ea':s[i] = 'e';break;case '\u00ed':s[i] = 'i';break;case '\u00f3':s[i] = 'o';break;case '\u00fa':s[i] = 'u';break;}}return len;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int Stem(char[] s, int len){Debug.Assert(s.Length >= len + 1, \"this stemmer requires an oversized array of at least 1\");len = plural.Apply(s, len);len = unification.Apply(s, len);len = adverb.Apply(s, len);int oldlen;do{oldlen = len;len = augmentative.Apply(s, len);} while (len != oldlen);oldlen = len;len = noun.Apply(s, len);if (len == oldlen) {len = verb.Apply(s, len);}len = vowel.Apply(s, len);for (int i = 0; i < len; i++){switch (s[i]){case '\u00e1':s[i] = 'a';break;case '\u00e9':case '\u00ea':s[i] = 'e';break;case '\u00ed':s[i] = 'i';break;case '\u00f3':s[i] = 'o';break;case '\u00fa':s[i] = 'u';break;}}return len;}",
    "output": "public int stem(char s[], int len) {assert s.length >= len + 1 : \"this stemmer requires an oversized array of at least 1\";len = plural.apply(s, len);len = unification.apply(s, len);len = adverb.apply(s, len);int oldlen;do {oldlen = len;len = augmentative.apply(s, len);} while (len != oldlen);oldlen = len;len = noun.apply(s, len);if (len == oldlen) { len = verb.apply(s, len);}len = vowel.apply(s, len);for (int i = 0; i < len; i++)switch(s[i]) {case '\u00e1': s[i] = 'a'; break;case '\u00e9':case '\u00ea': s[i] = 'e'; break;case '\u00ed': s[i] = 'i'; break;case '\u00f3': s[i] = 'o'; break;case '\u00fa': s[i] = 'u'; break;}return len;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean sameProperties(FontRecord other) {returnfield_1_font_height         == other.field_1_font_height &&field_2_attributes          == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight         == other.field_4_bold_weight &&field_5_super_sub_script    == other.field_5_super_sub_script &&field_6_underline           == other.field_6_underline &&field_7_family              == other.field_7_family &&field_8_charset             == other.field_8_charset &&field_9_zero                == other.field_9_zero &&Objects.equals(this.field_11_font_name, other.field_11_font_name);}",
    "output": "public bool SameProperties(FontRecord other){returnfield_1_font_height == other.field_1_font_height &&field_2_attributes == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight == other.field_4_bold_weight &&field_5_base_sub_script == other.field_5_base_sub_script &&field_6_underline == other.field_6_underline &&field_7_family == other.field_7_family &&field_8_charset == other.field_8_charset &&field_9_zero == other.field_9_zero &&field_11_font_name.Equals(other.field_11_font_name);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool SameProperties(FontRecord other){returnfield_1_font_height == other.field_1_font_height &&field_2_attributes == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight == other.field_4_bold_weight &&field_5_base_sub_script == other.field_5_base_sub_script &&field_6_underline == other.field_6_underline &&field_7_family == other.field_7_family &&field_8_charset == other.field_8_charset &&field_9_zero == other.field_9_zero &&field_11_font_name.Equals(other.field_11_font_name);}",
    "output": "public boolean sameProperties(FontRecord other) {returnfield_1_font_height         == other.field_1_font_height &&field_2_attributes          == other.field_2_attributes &&field_3_color_palette_index == other.field_3_color_palette_index &&field_4_bold_weight         == other.field_4_bold_weight &&field_5_super_sub_script    == other.field_5_super_sub_script &&field_6_underline           == other.field_6_underline &&field_7_family              == other.field_7_family &&field_8_charset             == other.field_8_charset &&field_9_zero                == other.field_9_zero &&Objects.equals(this.field_11_font_name, other.field_11_font_name);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString() {return FormulaError.REF.getString();}",
    "output": "public override String ToFormulaString(){return HSSFErrorConstants.GetText(HSSFErrorConstants.ERROR_REF);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){return HSSFErrorConstants.GetText(HSSFErrorConstants.ERROR_REF);}",
    "output": "public String toFormulaString() {return FormulaError.REF.getString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StartTextDetectionResult startTextDetection(StartTextDetectionRequest request) {request = beforeClientExecution(request);return executeStartTextDetection(request);}",
    "output": "public virtual StartTextDetectionResponse StartTextDetection(StartTextDetectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartTextDetectionRequestMarshaller.Instance;options.ResponseUnmarshaller = StartTextDetectionResponseUnmarshaller.Instance;return Invoke<StartTextDetectionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual StartTextDetectionResponse StartTextDetection(StartTextDetectionRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartTextDetectionRequestMarshaller.Instance;options.ResponseUnmarshaller = StartTextDetectionResponseUnmarshaller.Instance;return Invoke<StartTextDetectionResponse>(request, options);}",
    "output": "public StartTextDetectionResult startTextDetection(StartTextDetectionRequest request) {request = beforeClientExecution(request);return executeStartTextDetection(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteMessageBatchRequestEntry(String id, String receiptHandle) {setId(id);setReceiptHandle(receiptHandle);}",
    "output": "public DeleteMessageBatchRequestEntry(string id, string receiptHandle){_id = id;_receiptHandle = receiptHandle;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteMessageBatchRequestEntry(string id, string receiptHandle){_id = id;_receiptHandle = receiptHandle;}",
    "output": "public DeleteMessageBatchRequestEntry(String id, String receiptHandle) {setId(id);setReceiptHandle(receiptHandle);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PatternCaptureGroupTokenFilter create(TokenStream input) {return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}",
    "output": "public override TokenStream Create(TokenStream input){return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}",
    "output": "public PatternCaptureGroupTokenFilter create(TokenStream input) {return new PatternCaptureGroupTokenFilter(input, preserveOriginal, pattern);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SigningCertificate(String userName, String certificateId, String certificateBody, StatusType status) {setUserName(userName);setCertificateId(certificateId);setCertificateBody(certificateBody);setStatus(status.toString());}",
    "output": "public SigningCertificate(string userName, string certificateId, string certificateBody, StatusType status){_userName = userName;_certificateId = certificateId;_certificateBody = certificateBody;_status = status;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SigningCertificate(string userName, string certificateId, string certificateBody, StatusType status){_userName = userName;_certificateId = certificateId;_certificateBody = certificateBody;_status = status;}",
    "output": "public SigningCertificate(String userName, String certificateId, String certificateBody, StatusType status) {setUserName(userName);setCertificateId(certificateId);setCertificateBody(certificateBody);setStatus(status.toString());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DistributionConfig(String callerReference, Boolean enabled) {setCallerReference(callerReference);setEnabled(enabled);}",
    "output": "public DistributionConfig(string callerReference, bool enabled){_callerReference = callerReference;_enabled = enabled;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DistributionConfig(string callerReference, bool enabled){_callerReference = callerReference;_enabled = enabled;}",
    "output": "public DistributionConfig(String callerReference, Boolean enabled) {setCallerReference(callerReference);setEnabled(enabled);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FastCharStream(Reader r) {input = r;}",
    "output": "public FastCharStream(TextReader r){input = r;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FastCharStream(TextReader r){input = r;}",
    "output": "public FastCharStream(Reader r) {input = r;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int end(int group) {ensureMatch();return matchOffsets[(group * 2) + 1];}",
    "output": "public int end(int group_1){ensureMatch();return matchOffsets[(group_1 * 2) + 1];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int end(int group_1){ensureMatch();return matchOffsets[(group_1 * 2) + 1];}",
    "output": "public int end(int group) {ensureMatch();return matchOffsets[(group * 2) + 1];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final Map.Entry<K, V> next() { return nextEntry(); }",
    "output": "public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}",
    "output": "public final Map.Entry<K, V> next() { return nextEntry(); }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BlameCommand setTextComparator(RawTextComparator textComparator) {this.textComparator = textComparator;return this;}",
    "output": "public virtual NGit.Api.BlameCommand SetTextComparator(RawTextComparator textComparator){this.textComparator = textComparator;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.BlameCommand SetTextComparator(RawTextComparator textComparator){this.textComparator = textComparator;return this;}",
    "output": "public BlameCommand setTextComparator(RawTextComparator textComparator) {this.textComparator = textComparator;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final T pop() {if (size > 0) {T result = heap[1];       heap[1] = heap[size];     heap[size] = null;        size--;downHeap(1);              return result;} else {return null;}}",
    "output": "public T Pop(){if (size > 0){T result = heap[1]; heap[1] = heap[size]; heap[size] = default(T); size--;DownHeap(); return result;}else{return default(T);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public T Pop(){if (size > 0){T result = heap[1]; heap[1] = heap[size]; heap[size] = default(T); size--;DownHeap(); return result;}else{return default(T);}}",
    "output": "public final T pop() {if (size > 0) {T result = heap[1];       heap[1] = heap[size];     heap[size] = null;        size--;downHeap(1);              return result;} else {return null;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return getClass().getSimpleName() + \"(fields=\" + fields.size() + \",delegate=\" + postingsReader + \")\";}",
    "output": "public override string ToString(){return \"arc=\" + fstArc + \" state=\" + fsaState;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"arc=\" + fstArc + \" state=\" + fsaState;}",
    "output": "public String toString() {return getClass().getSimpleName() + \"(fields=\" + fields.size() + \",delegate=\" + postingsReader + \")\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String shortenRefName(String noteRefName) {if (noteRefName.startsWith(Constants.R_NOTES))return noteRefName.substring(Constants.R_NOTES.length());return noteRefName;}",
    "output": "public static string ShortenRefName(string noteRefName){if (noteRefName.StartsWith(Constants.R_NOTES)){return Sharpen.Runtime.Substring(noteRefName, Constants.R_NOTES.Length);}return noteRefName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string ShortenRefName(string noteRefName){if (noteRefName.StartsWith(Constants.R_NOTES)){return Sharpen.Runtime.Substring(noteRefName, Constants.R_NOTES.Length);}return noteRefName;}",
    "output": "public static String shortenRefName(String noteRefName) {if (noteRefName.startsWith(Constants.R_NOTES))return noteRefName.substring(Constants.R_NOTES.length());return noteRefName;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeDomainsResult describeDomains() {return describeDomains(new DescribeDomainsRequest());}",
    "output": "public virtual DescribeDomainsResponse DescribeDomains(){return DescribeDomains(new DescribeDomainsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeDomainsResponse DescribeDomains(){return DescribeDomains(new DescribeDomainsRequest());}",
    "output": "public DescribeDomainsResult describeDomains() {return describeDomains(new DescribeDomainsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int available() {return ccis.available();}",
    "output": "public int Available(){return _le.Available();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int Available(){return _le.Available();}",
    "output": "public int available() {return ccis.available();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetContentModerationResult getContentModeration(GetContentModerationRequest request) {request = beforeClientExecution(request);return executeGetContentModeration(request);}",
    "output": "public virtual GetContentModerationResponse GetContentModeration(GetContentModerationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetContentModerationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetContentModerationResponseUnmarshaller.Instance;return Invoke<GetContentModerationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetContentModerationResponse GetContentModeration(GetContentModerationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetContentModerationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetContentModerationResponseUnmarshaller.Instance;return Invoke<GetContentModerationResponse>(request, options);}",
    "output": "public GetContentModerationResult getContentModeration(GetContentModerationRequest request) {request = beforeClientExecution(request);return executeGetContentModeration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PrintStream(OutputStream out) {super(out);if (out == null) {throw new NullPointerException();}}",
    "output": "public PrintStream(java.io.OutputStream @out) : base(@out){if (@out == null){throw new System.ArgumentNullException();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PrintStream(java.io.OutputStream @out) : base(@out){if (@out == null){throw new System.ArgumentNullException();}}",
    "output": "public PrintStream(OutputStream out) {super(out);if (out == null) {throw new NullPointerException();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}",
    "output": "public override long RamBytesUsed(){long ramBytesUsed = 0;foreach (TermsReader r in fields.Values){ramBytesUsed += r.dict == null ? 0 : r.dict.GetSizeInBytes();}return ramBytesUsed;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long RamBytesUsed(){long ramBytesUsed = 0;foreach (TermsReader r in fields.Values){ramBytesUsed += r.dict == null ? 0 : r.dict.GetSizeInBytes();}return ramBytesUsed;}",
    "output": "public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetIntegrationResult getIntegration(GetIntegrationRequest request) {request = beforeClientExecution(request);return executeGetIntegration(request);}",
    "output": "public virtual GetIntegrationResponse GetIntegration(GetIntegrationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetIntegrationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetIntegrationResponseUnmarshaller.Instance;return Invoke<GetIntegrationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetIntegrationResponse GetIntegration(GetIntegrationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetIntegrationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetIntegrationResponseUnmarshaller.Instance;return Invoke<GetIntegrationResponse>(request, options);}",
    "output": "public GetIntegrationResult getIntegration(GetIntegrationRequest request) {request = beforeClientExecution(request);return executeGetIntegration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setVisibility(int v) {if (getVisibility() != v) {super.setVisibility(v);if (mIndeterminate) {if (v == GONE || v == INVISIBLE) {stopAnimation();} else {startAnimation();}}}}",
    "output": "public override void setVisibility(int v){if (getVisibility() != v){base.setVisibility(v);if (mIndeterminate){if (v == GONE || v == INVISIBLE){stopAnimation();}else{startAnimation();}}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void setVisibility(int v){if (getVisibility() != v){base.setVisibility(v);if (mIndeterminate){if (v == GONE || v == INVISIBLE){stopAnimation();}else{startAnimation();}}}}",
    "output": "public void setVisibility(int v) {if (getVisibility() != v) {super.setVisibility(v);if (mIndeterminate) {if (v == GONE || v == INVISIBLE) {stopAnimation();} else {startAnimation();}}}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean matches(char s[], int len) {if (!super.matches(s, len))return false;for (int i = 0; i < exceptions.length; i++)if (endsWith(s, len, exceptions[i]))return false;return true;}",
    "output": "public override bool Matches(char[] s, int len){if (!base.Matches(s, len)){return false;}for (int i = 0; i < m_exceptions.Length; i++){if (StemmerUtil.EndsWith(s, len, m_exceptions[i])){return false;}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Matches(char[] s, int len){if (!base.Matches(s, len)){return false;}for (int i = 0; i < m_exceptions.Length; i++){if (StemmerUtil.EndsWith(s, len, m_exceptions[i])){return false;}}return true;}",
    "output": "public boolean matches(char s[], int len) {if (!super.matches(s, len))return false;for (int i = 0; i < exceptions.length; i++)if (endsWith(s, len, exceptions[i]))return false;return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeFleetCapacityResult describeFleetCapacity(DescribeFleetCapacityRequest request) {request = beforeClientExecution(request);return executeDescribeFleetCapacity(request);}",
    "output": "public virtual DescribeFleetCapacityResponse DescribeFleetCapacity(DescribeFleetCapacityRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetCapacityRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetCapacityResponseUnmarshaller.Instance;return Invoke<DescribeFleetCapacityResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeFleetCapacityResponse DescribeFleetCapacity(DescribeFleetCapacityRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetCapacityRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetCapacityResponseUnmarshaller.Instance;return Invoke<DescribeFleetCapacityResponse>(request, options);}",
    "output": "public DescribeFleetCapacityResult describeFleetCapacity(DescribeFleetCapacityRequest request) {request = beforeClientExecution(request);return executeDescribeFleetCapacity(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UploadPackInternalServerErrorException(Throwable why) {initCause(why);}",
    "output": "public UploadPackInternalServerErrorException(Exception why){Sharpen.Extensions.InitCause(this, why);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UploadPackInternalServerErrorException(Exception why){Sharpen.Extensions.InitCause(this, why);}",
    "output": "public UploadPackInternalServerErrorException(Throwable why) {initCause(why);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetNetworkResult getNetwork(GetNetworkRequest request) {request = beforeClientExecution(request);return executeGetNetwork(request);}",
    "output": "public virtual GetNetworkResponse GetNetwork(GetNetworkRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetNetworkRequestMarshaller.Instance;options.ResponseUnmarshaller = GetNetworkResponseUnmarshaller.Instance;return Invoke<GetNetworkResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetNetworkResponse GetNetwork(GetNetworkRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetNetworkRequestMarshaller.Instance;options.ResponseUnmarshaller = GetNetworkResponseUnmarshaller.Instance;return Invoke<GetNetworkResponse>(request, options);}",
    "output": "public GetNetworkResult getNetwork(GetNetworkRequest request) {request = beforeClientExecution(request);return executeGetNetwork(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AllocatePrivateVirtualInterfaceResult allocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAllocatePrivateVirtualInterface(request);}",
    "output": "public virtual AllocatePrivateVirtualInterfaceResponse AllocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request){var options = new InvokeOptions();options.RequestMarshaller = AllocatePrivateVirtualInterfaceRequestMarshaller.Instance;options.ResponseUnmarshaller = AllocatePrivateVirtualInterfaceResponseUnmarshaller.Instance;return Invoke<AllocatePrivateVirtualInterfaceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AllocatePrivateVirtualInterfaceResponse AllocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request){var options = new InvokeOptions();options.RequestMarshaller = AllocatePrivateVirtualInterfaceRequestMarshaller.Instance;options.ResponseUnmarshaller = AllocatePrivateVirtualInterfaceResponseUnmarshaller.Instance;return Invoke<AllocatePrivateVirtualInterfaceResponse>(request, options);}",
    "output": "public AllocatePrivateVirtualInterfaceResult allocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeAllocatePrivateVirtualInterface(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDeploymentResult getDeployment(GetDeploymentRequest request) {request = beforeClientExecution(request);return executeGetDeployment(request);}",
    "output": "public virtual GetDeploymentResponse GetDeployment(GetDeploymentRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentResponseUnmarshaller.Instance;return Invoke<GetDeploymentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetDeploymentResponse GetDeployment(GetDeploymentRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentResponseUnmarshaller.Instance;return Invoke<GetDeploymentResponse>(request, options);}",
    "output": "public GetDeploymentResult getDeployment(GetDeploymentRequest request) {request = beforeClientExecution(request);return executeGetDeployment(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateRepoAuthorizationRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoAuthorization\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]\");setMethod(MethodType.POST);}",
    "output": "public UpdateRepoAuthorizationRequest(): base(\"cr\", \"2016-06-07\", \"UpdateRepoAuthorization\", \"cr\", \"openAPI\"){UriPattern = \"/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]\";Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UpdateRepoAuthorizationRequest(): base(\"cr\", \"2016-06-07\", \"UpdateRepoAuthorization\", \"cr\", \"openAPI\"){UriPattern = \"/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]\";Method = MethodType.POST;}",
    "output": "public UpdateRepoAuthorizationRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoAuthorization\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/authorizations/[AuthorizeId]\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void foldToASCII(char[] input, int length){final int maxSizeNeeded = 4 * length;if (output.length < maxSizeNeeded) {output = new char[ArrayUtil.oversize(maxSizeNeeded, Character.BYTES)];}outputPos = foldToASCII(input, 0, output, 0, length);if (preserveOriginal && needToPreserve(input, length)) {state = captureState();}}",
    "output": "public void FoldToASCII(char[] input, int length){if (preserveOriginal){state = CaptureState();}int maxSizeNeeded = 4 * length;if (output.Length < maxSizeNeeded){output = new char[ArrayUtil.Oversize(maxSizeNeeded, RamUsageEstimator.NUM_BYTES_CHAR)];}outputPos = FoldToASCII(input, 0, output, 0, length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void FoldToASCII(char[] input, int length){if (preserveOriginal){state = CaptureState();}int maxSizeNeeded = 4 * length;if (output.Length < maxSizeNeeded){output = new char[ArrayUtil.Oversize(maxSizeNeeded, RamUsageEstimator.NUM_BYTES_CHAR)];}outputPos = FoldToASCII(input, 0, output, 0, length);}",
    "output": "public void foldToASCII(char[] input, int length){final int maxSizeNeeded = 4 * length;if (output.length < maxSizeNeeded) {output = new char[ArrayUtil.oversize(maxSizeNeeded, Character.BYTES)];}outputPos = foldToASCII(input, 0, output, 0, length);if (preserveOriginal && needToPreserve(input, length)) {state = captureState();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean hasEntry(String name) {if (excludes.contains(name)) {return false;}return directory.hasEntry(name);}",
    "output": "public bool HasEntry(String name){if (excludes.Contains(name)){return false;}return directory.HasEntry(name);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool HasEntry(String name){if (excludes.Contains(name)){return false;}return directory.HasEntry(name);}",
    "output": "public boolean hasEntry(String name) {if (excludes.contains(name)) {return false;}return directory.hasEntry(name);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setLockMessage(String msg) {lockMessage = msg;}",
    "output": "public virtual void SetLockMessage(string msg){lockMessage = msg;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetLockMessage(string msg){lockMessage = msg;}",
    "output": "public void setLockMessage(String msg) {lockMessage = msg;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ReflogCommand reflog() {return new ReflogCommand(repo);}",
    "output": "public virtual ReflogCommand Reflog(){return new ReflogCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ReflogCommand Reflog(){return new ReflogCommand(repo);}",
    "output": "public ReflogCommand reflog() {return new ReflogCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeShort(getFirstColumn());out.writeShort(getLastColumn());}",
    "output": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(FirstRow);out1.WriteShort(LastRow);out1.WriteShort(FirstColumn);out1.WriteShort(LastColumn);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(FirstRow);out1.WriteShort(LastRow);out1.WriteShort(FirstColumn);out1.WriteShort(LastColumn);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeShort(getFirstColumn());out.writeShort(getLastColumn());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int response(java.net.HttpURLConnection c)throws IOException {try {return c.getResponseCode();} catch (ConnectException ce) {final URL url = c.getURL();final String host = (url == null) ? \"<null>\" : url.getHost(); if (\"Connection timed out: connect\".equals(ce.getMessage())) throw new ConnectException(MessageFormat.format(JGitText.get().connectionTimeOut, host));throw new ConnectException(ce.getMessage() + \" \" + host); }}",
    "output": "public static int Response(HttpURLConnection c){try{return c.GetResponseCode();}catch (ConnectException ce){string host = c.GetURL().GetHost();if (\"Connection timed out: connect\".Equals(ce.Message)){throw new ConnectException(MessageFormat.Format(JGitText.Get().connectionTimeOut,host));}throw new ConnectException(ce.Message + \" \" + host);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int Response(HttpURLConnection c){try{return c.GetResponseCode();}catch (ConnectException ce){string host = c.GetURL().GetHost();if (\"Connection timed out: connect\".Equals(ce.Message)){throw new ConnectException(MessageFormat.Format(JGitText.Get().connectionTimeOut,host));}throw new ConnectException(ce.Message + \" \" + host);}}",
    "output": "public static int response(java.net.HttpURLConnection c)throws IOException {try {return c.getResponseCode();} catch (ConnectException ce) {final URL url = c.getURL();final String host = (url == null) ? \"<null>\" : url.getHost(); if (\"Connection timed out: connect\".equals(ce.getMessage())) throw new ConnectException(MessageFormat.format(JGitText.get().connectionTimeOut, host));throw new ConnectException(ce.getMessage() + \" \" + host); }}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static void fill(long[] array, long value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}",
    "output": "public static void fill(long[] array, long value){{for (int i = 0; i < array.Length; i++){array[i] = value;}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static void fill(long[] array, long value){{for (int i = 0; i < array.Length; i++){array[i] = value;}}}",
    "output": "public static void fill(long[] array, long value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeInt(getPositionOfBof());out.writeShort(field_2_option_flags);String name = field_5_sheetname;out.writeByte(name.length());out.writeByte(field_4_isMultibyteUnicode);if (isMultibyte()) {StringUtil.putUnicodeLE(name, out);} else {StringUtil.putCompressedUnicode(name, out);}}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteInt(PositionOfBof);out1.WriteShort(field_2_option_flags);String name = field_5_sheetname;out1.WriteByte(name.Length);out1.WriteByte(field_4_isMultibyteUnicode);if (IsMultibyte){StringUtil.PutUnicodeLE(name, out1);}else{StringUtil.PutCompressedUnicode(name, out1);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteInt(PositionOfBof);out1.WriteShort(field_2_option_flags);String name = field_5_sheetname;out1.WriteByte(name.Length);out1.WriteByte(field_4_isMultibyteUnicode);if (IsMultibyte){StringUtil.PutUnicodeLE(name, out1);}else{StringUtil.PutCompressedUnicode(name, out1);}}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeInt(getPositionOfBof());out.writeShort(field_2_option_flags);String name = field_5_sheetname;out.writeByte(name.length());out.writeByte(field_4_isMultibyteUnicode);if (isMultibyte()) {StringUtil.putUnicodeLE(name, out);} else {StringUtil.putCompressedUnicode(name, out);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String getNonBlankTextOrFail(Element e) throws ParserException {String v = getText(e);if (null != v)v = v.trim();if (null == v || 0 == v.length()) {throw new ParserException(e.getTagName() + \" has no text\");}return v;}",
    "output": "public static string GetNonBlankTextOrFail(XmlElement e){string v = GetText(e);if (null != v)v = v.Trim();if (null == v || 0 == v.Length){throw new ParserException(e.ToString() + \" has no text\");}return v;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string GetNonBlankTextOrFail(XmlElement e){string v = GetText(e);if (null != v)v = v.Trim();if (null == v || 0 == v.Length){throw new ParserException(e.ToString() + \" has no text\");}return v;}",
    "output": "public static String getNonBlankTextOrFail(Element e) throws ParserException {String v = getText(e);if (null != v)v = v.trim();if (null == v || 0 == v.length()) {throw new ParserException(e.getTagName() + \" has no text\");}return v;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void buildFieldConfig(FieldConfig fieldConfig) {Map<String, Float> fieldBoostMap = this.config.get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap != null) {Float boost = fieldBoostMap.get(fieldConfig.getField());if (boost != null) {fieldConfig.set(ConfigurationKeys.BOOST, boost);}}}",
    "output": "public virtual void BuildFieldConfig(FieldConfig fieldConfig){IDictionary<string, float?> fieldBoostMap = this.config.Get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap != null){float? boost;if (fieldBoostMap.TryGetValue(fieldConfig.Field, out boost) && boost != null){fieldConfig.Set(ConfigurationKeys.BOOST, boost);}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void BuildFieldConfig(FieldConfig fieldConfig){IDictionary<string, float?> fieldBoostMap = this.config.Get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap != null){float? boost;if (fieldBoostMap.TryGetValue(fieldConfig.Field, out boost) && boost != null){fieldConfig.Set(ConfigurationKeys.BOOST, boost);}}}",
    "output": "public void buildFieldConfig(FieldConfig fieldConfig) {Map<String, Float> fieldBoostMap = this.config.get(ConfigurationKeys.FIELD_BOOST_MAP);if (fieldBoostMap != null) {Float boost = fieldBoostMap.get(fieldConfig.getField());if (boost != null) {fieldConfig.set(ConfigurationKeys.BOOST, boost);}}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutLifecyclePolicyResult putLifecyclePolicy(PutLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executePutLifecyclePolicy(request);}",
    "output": "public virtual PutLifecyclePolicyResponse PutLifecyclePolicy(PutLifecyclePolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutLifecyclePolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutLifecyclePolicyResponseUnmarshaller.Instance;return Invoke<PutLifecyclePolicyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutLifecyclePolicyResponse PutLifecyclePolicy(PutLifecyclePolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutLifecyclePolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = PutLifecyclePolicyResponseUnmarshaller.Instance;return Invoke<PutLifecyclePolicyResponse>(request, options);}",
    "output": "public PutLifecyclePolicyResult putLifecyclePolicy(PutLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executePutLifecyclePolicy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SortedSet<E> subSet(E start, E end) {return subSet(start, true, end, false);}",
    "output": "public virtual java.util.SortedSet<E> subSet(E start, E end){return subSet(start, true, end, false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.util.SortedSet<E> subSet(E start, E end){return subSet(start, true, end, false);}",
    "output": "public SortedSet<E> subSet(E start, E end) {return subSet(start, true, end, false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setParams(String params) {super.setParams(params);if (params != null) {int multiplier;if (params.endsWith(\"s\")) {multiplier = 1;params = params.substring(0, params.length()-1);} else if (params.endsWith(\"m\")) {multiplier = 60;params = params.substring(0, params.length()-1);} else if (params.endsWith(\"h\")) {multiplier = 3600;params = params.substring(0, params.length()-1);} else {multiplier = 1;}waitTimeSec = Double.parseDouble(params) * multiplier;} else {throw new IllegalArgumentException(\"you must specify the wait time, eg: 10.0s, 4.5m, 2h\");}}",
    "output": "public override void SetParams(string @params){base.SetParams(@params);if (@params != null){int multiplier;if (@params.EndsWith(\"s\", StringComparison.Ordinal)){multiplier = 1;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith(\"m\", StringComparison.Ordinal)){multiplier = 60;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith(\"h\", StringComparison.Ordinal)){multiplier = 3600;@params = @params.Substring(0, @params.Length - 1);}else{multiplier = 1;}waitTimeSec = double.Parse(@params, CultureInfo.InvariantCulture) * multiplier;}else{throw new ArgumentException(\"you must specify the wait time, eg: 10.0s, 4.5m, 2h\");}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SetParams(string @params){base.SetParams(@params);if (@params != null){int multiplier;if (@params.EndsWith(\"s\", StringComparison.Ordinal)){multiplier = 1;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith(\"m\", StringComparison.Ordinal)){multiplier = 60;@params = @params.Substring(0, @params.Length - 1);}else if (@params.EndsWith(\"h\", StringComparison.Ordinal)){multiplier = 3600;@params = @params.Substring(0, @params.Length - 1);}else{multiplier = 1;}waitTimeSec = double.Parse(@params, CultureInfo.InvariantCulture) * multiplier;}else{throw new ArgumentException(\"you must specify the wait time, eg: 10.0s, 4.5m, 2h\");}}",
    "output": "public void setParams(String params) {super.setParams(params);if (params != null) {int multiplier;if (params.endsWith(\"s\")) {multiplier = 1;params = params.substring(0, params.length()-1);} else if (params.endsWith(\"m\")) {multiplier = 60;params = params.substring(0, params.length()-1);} else if (params.endsWith(\"h\")) {multiplier = 3600;params = params.substring(0, params.length()-1);} else {multiplier = 1;}waitTimeSec = Double.parseDouble(params) * multiplier;} else {throw new IllegalArgumentException(\"you must specify the wait time, eg: 10.0s, 4.5m, 2h\");}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutAttributesRequest(String domainName, String itemName, java.util.List<ReplaceableAttribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}",
    "output": "public PutAttributesRequest(string domainName, string itemName, List<ReplaceableAttribute> attributes, UpdateCondition expected){_domainName = domainName;_itemName = itemName;_attributes = attributes;_expected = expected;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PutAttributesRequest(string domainName, string itemName, List<ReplaceableAttribute> attributes, UpdateCondition expected){_domainName = domainName;_itemName = itemName;_attributes = attributes;_expected = expected;}",
    "output": "public PutAttributesRequest(String domainName, String itemName, java.util.List<ReplaceableAttribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeStreamConsumerResult describeStreamConsumer(DescribeStreamConsumerRequest request) {request = beforeClientExecution(request);return executeDescribeStreamConsumer(request);}",
    "output": "public virtual DescribeStreamConsumerResponse DescribeStreamConsumer(DescribeStreamConsumerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeStreamConsumerRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeStreamConsumerResponseUnmarshaller.Instance;return Invoke<DescribeStreamConsumerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeStreamConsumerResponse DescribeStreamConsumer(DescribeStreamConsumerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeStreamConsumerRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeStreamConsumerResponseUnmarshaller.Instance;return Invoke<DescribeStreamConsumerResponse>(request, options);}",
    "output": "public DescribeStreamConsumerResult describeStreamConsumer(DescribeStreamConsumerRequest request) {request = beforeClientExecution(request);return executeDescribeStreamConsumer(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void freeze() {this.frozen = true;}",
    "output": "public virtual void Freeze(){this.frozen = true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Freeze(){this.frozen = true;}",
    "output": "public void freeze() {this.frozen = true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FuzzyLikeThisQueryBuilder(Analyzer analyzer) {this.analyzer = analyzer;}",
    "output": "public FuzzyLikeThisQueryBuilder(Analyzer analyzer){this.analyzer = analyzer;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FuzzyLikeThisQueryBuilder(Analyzer analyzer){this.analyzer = analyzer;}",
    "output": "public FuzzyLikeThisQueryBuilder(Analyzer analyzer) {this.analyzer = analyzer;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DBClusterSnapshot copyDBClusterSnapshot(CopyDBClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCopyDBClusterSnapshot(request);}",
    "output": "public virtual CopyDBClusterSnapshotResponse CopyDBClusterSnapshot(CopyDBClusterSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyDBClusterSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyDBClusterSnapshotResponseUnmarshaller.Instance;return Invoke<CopyDBClusterSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CopyDBClusterSnapshotResponse CopyDBClusterSnapshot(CopyDBClusterSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyDBClusterSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyDBClusterSnapshotResponseUnmarshaller.Instance;return Invoke<CopyDBClusterSnapshotResponse>(request, options);}",
    "output": "public DBClusterSnapshot copyDBClusterSnapshot(CopyDBClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeCopyDBClusterSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OutputStreamDataOutput(OutputStream os) {this.os = os;}",
    "output": "public OutputStreamDataOutput(Stream os){this._writer = new BinaryWriter(os);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public OutputStreamDataOutput(Stream os){this._writer = new BinaryWriter(os);}",
    "output": "public OutputStreamDataOutput(OutputStream os) {this.os = os;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String findPattern(String pat) {int k = super.find(pat);if (k >= 0) {return unpackValues(k);}return \"\";}",
    "output": "public virtual string FindPattern(string pat){int k = base.Find(pat);if (k >= 0){return UnpackValues(k);}return \"\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string FindPattern(string pat){int k = base.Find(pat);if (k >= 0){return UnpackValues(k);}return \"\";}",
    "output": "public String findPattern(String pat) {int k = super.find(pat);if (k >= 0) {return unpackValues(k);}return \"\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int murmurhash3_x86_32(BytesRef bytes, int seed) {return murmurhash3_x86_32(bytes.bytes, bytes.offset, bytes.length, seed);}",
    "output": "public static int Murmurhash3_x86_32(BytesRef bytes, int seed){return Murmurhash3_x86_32(bytes.Bytes, bytes.Offset, bytes.Length, seed);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int Murmurhash3_x86_32(BytesRef bytes, int seed){return Murmurhash3_x86_32(bytes.Bytes, bytes.Offset, bytes.Length, seed);}",
    "output": "public static int murmurhash3_x86_32(BytesRef bytes, int seed) {return murmurhash3_x86_32(bytes.bytes, bytes.offset, bytes.length, seed);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isOverridable() {return overridable;}",
    "output": "public virtual bool IsOverridable(){return overridable;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsOverridable(){return overridable;}",
    "output": "public boolean isOverridable() {return overridable;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateMemberResult updateMember(UpdateMemberRequest request) {request = beforeClientExecution(request);return executeUpdateMember(request);}",
    "output": "public virtual UpdateMemberResponse UpdateMember(UpdateMemberRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMemberRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMemberResponseUnmarshaller.Instance;return Invoke<UpdateMemberResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateMemberResponse UpdateMember(UpdateMemberRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateMemberRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateMemberResponseUnmarshaller.Instance;return Invoke<UpdateMemberResponse>(request, options);}",
    "output": "public UpdateMemberResult updateMember(UpdateMemberRequest request) {request = beforeClientExecution(request);return executeUpdateMember(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CopyFpgaImageResult copyFpgaImage(CopyFpgaImageRequest request) {request = beforeClientExecution(request);return executeCopyFpgaImage(request);}",
    "output": "public virtual CopyFpgaImageResponse CopyFpgaImage(CopyFpgaImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyFpgaImageRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyFpgaImageResponseUnmarshaller.Instance;return Invoke<CopyFpgaImageResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CopyFpgaImageResponse CopyFpgaImage(CopyFpgaImageRequest request){var options = new InvokeOptions();options.RequestMarshaller = CopyFpgaImageRequestMarshaller.Instance;options.ResponseUnmarshaller = CopyFpgaImageResponseUnmarshaller.Instance;return Invoke<CopyFpgaImageResponse>(request, options);}",
    "output": "public CopyFpgaImageResult copyFpgaImage(CopyFpgaImageRequest request) {request = beforeClientExecution(request);return executeCopyFpgaImage(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void inform(ResourceLoader loader) {try { OpenNLPOpsFactory.getPOSTaggerModel(posTaggerModelFile, loader);} catch (IOException e) {throw new IllegalArgumentException(e);}}",
    "output": "public virtual void Inform(IResourceLoader loader){try{ OpenNLPOpsFactory.GetPOSTaggerModel(posTaggerModelFile, loader);}catch (IOException e){throw new ArgumentException(e.ToString(), e);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Inform(IResourceLoader loader){try{ OpenNLPOpsFactory.GetPOSTaggerModel(posTaggerModelFile, loader);}catch (IOException e){throw new ArgumentException(e.ToString(), e);}}",
    "output": "public void inform(ResourceLoader loader) {try { OpenNLPOpsFactory.getPOSTaggerModel(posTaggerModelFile, loader);} catch (IOException e) {throw new IllegalArgumentException(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) {super(firstRow, lastRow, firstCol, lastCol);if (lastRow < firstRow || lastCol < firstCol) {throw new IllegalArgumentException(\"Invalid cell range, having lastRow < firstRow || lastCol < firstCol, \" +\"had rows \" + lastRow + \" >= \" + firstRow + \" or cells \" + lastCol + \" >= \" + firstCol);}}",
    "output": "public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol): base(firstRow, lastRow, firstCol, lastCol){if (lastRow < firstRow || lastCol < firstCol)throw new ArgumentException(\"lastRow < firstRow || lastCol < firstCol\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol): base(firstRow, lastRow, firstCol, lastCol){if (lastRow < firstRow || lastCol < firstCol)throw new ArgumentException(\"lastRow < firstRow || lastCol < firstCol\");}",
    "output": "public CellRangeAddress(int firstRow, int lastRow, int firstCol, int lastCol) {super(firstRow, lastRow, firstCol, lastCol);if (lastRow < firstRow || lastCol < firstCol) {throw new IllegalArgumentException(\"Invalid cell range, having lastRow < firstRow || lastCol < firstCol, \" +\"had rows \" + lastRow + \" >= \" + firstRow + \" or cells \" + lastCol + \" >= \" + firstCol);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(ATNConfig a, ATNConfig b) {if ( a==b ) return true;if ( a==null || b==null ) return false;return a.state.stateNumber==b.state.stateNumber&& a.context.equals(b.context);}",
    "output": "public override bool Equals(ATNConfig a, ATNConfig b){if (a == b){return true;}if (a == null || b == null){return false;}return a.state.stateNumber == b.state.stateNumber && a.context.Equals(b.context);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(ATNConfig a, ATNConfig b){if (a == b){return true;}if (a == null || b == null){return false;}return a.state.stateNumber == b.state.stateNumber && a.context.Equals(b.context);}",
    "output": "public boolean equals(ATNConfig a, ATNConfig b) {if ( a==b ) return true;if ( a==null || b==null ) return false;return a.state.stateNumber==b.state.stateNumber&& a.context.equals(b.context);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PushCommand setPushTags() {refSpecs.add(Transport.REFSPEC_TAGS);return this;}",
    "output": "public virtual NGit.Api.PushCommand SetPushTags(){refSpecs.AddItem(NGit.Transport.Transport.REFSPEC_TAGS);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.PushCommand SetPushTags(){refSpecs.AddItem(NGit.Transport.Transport.REFSPEC_TAGS);return this;}",
    "output": "public PushCommand setPushTags() {refSpecs.add(Transport.REFSPEC_TAGS);return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateEvaluationResult createEvaluation(CreateEvaluationRequest request) {request = beforeClientExecution(request);return executeCreateEvaluation(request);}",
    "output": "public virtual CreateEvaluationResponse CreateEvaluation(CreateEvaluationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateEvaluationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateEvaluationResponseUnmarshaller.Instance;return Invoke<CreateEvaluationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateEvaluationResponse CreateEvaluation(CreateEvaluationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateEvaluationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateEvaluationResponseUnmarshaller.Instance;return Invoke<CreateEvaluationResponse>(request, options);}",
    "output": "public CreateEvaluationResult createEvaluation(CreateEvaluationRequest request) {request = beforeClientExecution(request);return executeCreateEvaluation(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeOrderableDBInstanceOptionsResult describeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeOrderableDBInstanceOptions(request);}",
    "output": "public virtual DescribeOrderableDBInstanceOptionsResponse DescribeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeOrderableDBInstanceOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeOrderableDBInstanceOptionsResponseUnmarshaller.Instance;return Invoke<DescribeOrderableDBInstanceOptionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeOrderableDBInstanceOptionsResponse DescribeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeOrderableDBInstanceOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeOrderableDBInstanceOptionsResponseUnmarshaller.Instance;return Invoke<DescribeOrderableDBInstanceOptionsResponse>(request, options);}",
    "output": "public DescribeOrderableDBInstanceOptionsResult describeOrderableDBInstanceOptions(DescribeOrderableDBInstanceOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeOrderableDBInstanceOptions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long getPosition() {return (long) currentBlockIndex * blockSize + currentBlockUpto;}",
    "output": "public long GetPosition(){return (long)currentBlockIndex * outerInstance.blockSize + currentBlockUpto;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public long GetPosition(){return (long)currentBlockIndex * outerInstance.blockSize + currentBlockUpto;}",
    "output": "public long getPosition() {return (long) currentBlockIndex * blockSize + currentBlockUpto;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new FrenchLightStemFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new FrenchLightStemFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new FrenchLightStemFilter(input);}",
    "output": "public TokenStream create(TokenStream input) {return new FrenchLightStemFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AssignPrivateIpAddressesResult assignPrivateIpAddresses(AssignPrivateIpAddressesRequest request) {request = beforeClientExecution(request);return executeAssignPrivateIpAddresses(request);}",
    "output": "public virtual AssignPrivateIpAddressesResponse AssignPrivateIpAddresses(AssignPrivateIpAddressesRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssignPrivateIpAddressesRequestMarshaller.Instance;options.ResponseUnmarshaller = AssignPrivateIpAddressesResponseUnmarshaller.Instance;return Invoke<AssignPrivateIpAddressesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AssignPrivateIpAddressesResponse AssignPrivateIpAddresses(AssignPrivateIpAddressesRequest request){var options = new InvokeOptions();options.RequestMarshaller = AssignPrivateIpAddressesRequestMarshaller.Instance;options.ResponseUnmarshaller = AssignPrivateIpAddressesResponseUnmarshaller.Instance;return Invoke<AssignPrivateIpAddressesResponse>(request, options);}",
    "output": "public AssignPrivateIpAddressesResult assignPrivateIpAddresses(AssignPrivateIpAddressesRequest request) {request = beforeClientExecution(request);return executeAssignPrivateIpAddresses(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean setExecute(File f, boolean canExec) {return false;}",
    "output": "public override bool SetExecute(FilePath f, bool canExec){return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool SetExecute(FilePath f, bool canExec){return false;}",
    "output": "public boolean setExecute(File f, boolean canExec) {return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup) {try {ValueEval lookupValue = OperandResolver.getSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.resolveTableArrayArg(table_array);boolean isRangeLookup;try {isRangeLookup = LookupUtils.resolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);} catch(RuntimeException e) {isRangeLookup = true;}int rowIndex = LookupUtils.lookupIndexOfValue(lookupValue, LookupUtils.createColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.resolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = createResultColumnVector(tableArray, colIndex);return resultCol.getItem(rowIndex);} catch (EvaluationException e) {return e.getErrorEval();}}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup){try{ValueEval lookupValue = OperandResolver.GetSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.ResolveTableArrayArg(table_array);bool isRangeLookup = LookupUtils.ResolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);int rowIndex = LookupUtils.LookupIndexOfValue(lookupValue, LookupUtils.CreateColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.ResolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = CreateResultColumnVector(tableArray, colIndex);return resultCol.GetItem(rowIndex);}catch (EvaluationException e){return e.GetErrorEval();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup){try{ValueEval lookupValue = OperandResolver.GetSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.ResolveTableArrayArg(table_array);bool isRangeLookup = LookupUtils.ResolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);int rowIndex = LookupUtils.LookupIndexOfValue(lookupValue, LookupUtils.CreateColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.ResolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = CreateResultColumnVector(tableArray, colIndex);return resultCol.GetItem(rowIndex);}catch (EvaluationException e){return e.GetErrorEval();}}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval lookup_value, ValueEval table_array,ValueEval col_index, ValueEval range_lookup) {try {ValueEval lookupValue = OperandResolver.getSingleValue(lookup_value, srcRowIndex, srcColumnIndex);TwoDEval tableArray = LookupUtils.resolveTableArrayArg(table_array);boolean isRangeLookup;try {isRangeLookup = LookupUtils.resolveRangeLookupArg(range_lookup, srcRowIndex, srcColumnIndex);} catch(RuntimeException e) {isRangeLookup = true;}int rowIndex = LookupUtils.lookupIndexOfValue(lookupValue, LookupUtils.createColumnVector(tableArray, 0), isRangeLookup);int colIndex = LookupUtils.resolveRowOrColIndexArg(col_index, srcRowIndex, srcColumnIndex);ValueVector resultCol = createResultColumnVector(tableArray, colIndex);return resultCol.getItem(rowIndex);} catch (EvaluationException e) {return e.getErrorEval();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateGameSessionResult createGameSession(CreateGameSessionRequest request) {request = beforeClientExecution(request);return executeCreateGameSession(request);}",
    "output": "public virtual CreateGameSessionResponse CreateGameSession(CreateGameSessionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateGameSessionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateGameSessionResponseUnmarshaller.Instance;return Invoke<CreateGameSessionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateGameSessionResponse CreateGameSession(CreateGameSessionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateGameSessionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateGameSessionResponseUnmarshaller.Instance;return Invoke<CreateGameSessionResponse>(request, options);}",
    "output": "public CreateGameSessionResult createGameSession(CreateGameSessionRequest request) {request = beforeClientExecution(request);return executeCreateGameSession(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RowRecord getRow(int rowIndex) {int maxrow = SpreadsheetVersion.EXCEL97.getLastRowIndex();if (rowIndex < 0 || rowIndex > maxrow) {throw new IllegalArgumentException(\"The row number must be between 0 and \" + maxrow + \", but had: \" + rowIndex);}return _rowRecords.get(Integer.valueOf(rowIndex));}",
    "output": "public RowRecord GetRow(int rowIndex){if (rowIndex < 0 || rowIndex > 65535){throw new ArgumentException(\"The row number must be between 0 and 65535\");}return (RowRecord)_rowRecords[rowIndex];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RowRecord GetRow(int rowIndex){if (rowIndex < 0 || rowIndex > 65535){throw new ArgumentException(\"The row number must be between 0 and 65535\");}return (RowRecord)_rowRecords[rowIndex];}",
    "output": "public RowRecord getRow(int rowIndex) {int maxrow = SpreadsheetVersion.EXCEL97.getLastRowIndex();if (rowIndex < 0 || rowIndex > maxrow) {throw new IllegalArgumentException(\"The row number must be between 0 and \" + maxrow + \", but had: \" + rowIndex);}return _rowRecords.get(Integer.valueOf(rowIndex));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeClientPropertiesResult describeClientProperties(DescribeClientPropertiesRequest request) {request = beforeClientExecution(request);return executeDescribeClientProperties(request);}",
    "output": "public virtual DescribeClientPropertiesResponse DescribeClientProperties(DescribeClientPropertiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeClientPropertiesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeClientPropertiesResponseUnmarshaller.Instance;return Invoke<DescribeClientPropertiesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeClientPropertiesResponse DescribeClientProperties(DescribeClientPropertiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeClientPropertiesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeClientPropertiesResponseUnmarshaller.Instance;return Invoke<DescribeClientPropertiesResponse>(request, options);}",
    "output": "public DescribeClientPropertiesResult describeClientProperties(DescribeClientPropertiesRequest request) {request = beforeClientExecution(request);return executeDescribeClientProperties(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Builder(CompositeReader reader) {this.reader = reader;}",
    "output": "public Builder(CompositeReader reader){this.reader = reader;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Builder(CompositeReader reader){this.reader = reader;}",
    "output": "public Builder(CompositeReader reader) {this.reader = reader;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized void mark(int readlimit) {in.mark(readlimit);}",
    "output": "public override void mark(int readlimit){lock (this){@in.mark(readlimit);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void mark(int readlimit){lock (this){@in.mark(readlimit);}}",
    "output": "public synchronized void mark(int readlimit) {in.mark(readlimit);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void print(int inum) {print(String.valueOf(inum));}",
    "output": "public virtual void print(int inum){print(inum.ToString());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void print(int inum){print(inum.ToString());}",
    "output": "public void print(int inum) {print(String.valueOf(inum));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static final ObjectId fromRaw(int[] is) {return fromRaw(is, 0);}",
    "output": "public static NGit.ObjectId FromRaw(int[] @is){return FromRaw(@is, 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static NGit.ObjectId FromRaw(int[] @is){return FromRaw(@is, 0);}",
    "output": "public static final ObjectId fromRaw(int[] is) {return fromRaw(is, 0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return slice.toString()+\":\"+ postingsEnum;}",
    "output": "public override string ToString(){return Slice.ToString() + \":\" + DocsEnum;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return Slice.ToString() + \":\" + DocsEnum;}",
    "output": "public String toString() {return slice.toString()+\":\"+ postingsEnum;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(getMode());}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Mode);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Mode);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(getMode());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public int size() {return Impl.this.size();}",
    "output": "public override int size(){return this._enclosing.size();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int size(){return this._enclosing.size();}",
    "output": "@Override public int size() {return Impl.this.size();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int hashCode(Object... objects) {return Arrays.hashCode(objects);}",
    "output": "public static int hashCode(object o){return (o == null) ? 0 : o.GetHashCode();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int hashCode(object o){return (o == null) ? 0 : o.GetHashCode();}",
    "output": "public static int hashCode(Object... objects) {return Arrays.hashCode(objects);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer putFloat(int index, float value) {throw new ReadOnlyBufferException();}",
    "output": "public override java.nio.ByteBuffer putFloat(int index, float value){throw new java.nio.ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer putFloat(int index, float value){throw new java.nio.ReadOnlyBufferException();}",
    "output": "public ByteBuffer putFloat(int index, float value) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListJournalS3ExportsForLedgerResult listJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request) {request = beforeClientExecution(request);return executeListJournalS3ExportsForLedger(request);}",
    "output": "public virtual ListJournalS3ExportsForLedgerResponse ListJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListJournalS3ExportsForLedgerRequestMarshaller.Instance;options.ResponseUnmarshaller = ListJournalS3ExportsForLedgerResponseUnmarshaller.Instance;return Invoke<ListJournalS3ExportsForLedgerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListJournalS3ExportsForLedgerResponse ListJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListJournalS3ExportsForLedgerRequestMarshaller.Instance;options.ResponseUnmarshaller = ListJournalS3ExportsForLedgerResponseUnmarshaller.Instance;return Invoke<ListJournalS3ExportsForLedgerResponse>(request, options);}",
    "output": "public ListJournalS3ExportsForLedgerResult listJournalS3ExportsForLedger(ListJournalS3ExportsForLedgerRequest request) {request = beforeClientExecution(request);return executeListJournalS3ExportsForLedger(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteMessageBatchResult deleteMessageBatch(DeleteMessageBatchRequest request) {request = beforeClientExecution(request);return executeDeleteMessageBatch(request);}",
    "output": "public virtual DeleteMessageBatchResponse DeleteMessageBatch(DeleteMessageBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteMessageBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteMessageBatchResponseUnmarshaller.Instance;return Invoke<DeleteMessageBatchResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteMessageBatchResponse DeleteMessageBatch(DeleteMessageBatchRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteMessageBatchRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteMessageBatchResponseUnmarshaller.Instance;return Invoke<DeleteMessageBatchResponse>(request, options);}",
    "output": "public DeleteMessageBatchResult deleteMessageBatch(DeleteMessageBatchRequest request) {request = beforeClientExecution(request);return executeDeleteMessageBatch(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void write(LittleEndianOutput out) {out.writeByte(getSid() + getPtgClass());writeCoordinates(out);}",
    "output": "public override void Write(ILittleEndianOutput out1){out1.WriteByte(Sid + PtgClass);WriteCoordinates(out1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Write(ILittleEndianOutput out1){out1.WriteByte(Sid + PtgClass);WriteCoordinates(out1);}",
    "output": "public final void write(LittleEndianOutput out) {out.writeByte(getSid() + getPtgClass());writeCoordinates(out);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {if (buckets < 1 || buckets > 255) {throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"+ buckets);}if (sorter == null) throw new IllegalArgumentException(\"BytesRefSorter must not be null.\");this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}",
    "output": "public FSTCompletionBuilder(int buckets, IBytesRefSorter sorter, int shareMaxTailLength){if (buckets < 1 || buckets > 255){throw new System.ArgumentException(\"Buckets must be >= 1 and <= 255: \" + buckets);}if (sorter == null){throw new System.ArgumentException(\"BytesRefSorter must not be null.\");}this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FSTCompletionBuilder(int buckets, IBytesRefSorter sorter, int shareMaxTailLength){if (buckets < 1 || buckets > 255){throw new System.ArgumentException(\"Buckets must be >= 1 and <= 255: \" + buckets);}if (sorter == null){throw new System.ArgumentException(\"BytesRefSorter must not be null.\");}this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}",
    "output": "public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {if (buckets < 1 || buckets > 255) {throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"+ buckets);}if (sorter == null) throw new IllegalArgumentException(\"BytesRefSorter must not be null.\");this.sorter = sorter;this.buckets = buckets;this.shareMaxTailLength = shareMaxTailLength;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void incRef() {refCount.incrementAndGet();}",
    "output": "public virtual void IncRef(){refCount.IncrementAndGet();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void IncRef(){refCount.IncrementAndGet();}",
    "output": "public void incRef() {refCount.incrementAndGet();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean supports(CredentialItem... items) {for (CredentialItem i : items) {if (i instanceof CredentialItem.Username)continue;else if (i instanceof CredentialItem.Password)continue;else return false;}return true;}",
    "output": "public override bool Supports(params CredentialItem[] items){foreach (CredentialItem i in items){if (i is CredentialItem.Username){continue;}else{if (i is CredentialItem.Password){continue;}else{return false;}}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Supports(params CredentialItem[] items){foreach (CredentialItem i in items){if (i is CredentialItem.Username){continue;}else{if (i is CredentialItem.Password){continue;}else{return false;}}}return true;}",
    "output": "public boolean supports(CredentialItem... items) {for (CredentialItem i : items) {if (i instanceof CredentialItem.Username)continue;else if (i instanceof CredentialItem.Password)continue;else return false;}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteVpnConnectionRequest(String vpnConnectionId) {setVpnConnectionId(vpnConnectionId);}",
    "output": "public DeleteVpnConnectionRequest(string vpnConnectionId){_vpnConnectionId = vpnConnectionId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteVpnConnectionRequest(string vpnConnectionId){_vpnConnectionId = vpnConnectionId;}",
    "output": "public DeleteVpnConnectionRequest(String vpnConnectionId) {setVpnConnectionId(vpnConnectionId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 4) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}",
    "output": "public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){if (args.Length != 4){return ErrorEval.VALUE_INVALID;}return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){if (args.Length != 4){return ErrorEval.VALUE_INVALID;}return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}",
    "output": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 4) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void print(double d) {print(String.valueOf(d));}",
    "output": "public virtual void print(double d){print(d.ToString());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void print(double d){print(d.ToString());}",
    "output": "public void print(double d) {print(String.valueOf(d));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateUserProfileResult updateUserProfile(UpdateUserProfileRequest request) {request = beforeClientExecution(request);return executeUpdateUserProfile(request);}",
    "output": "public virtual UpdateUserProfileResponse UpdateUserProfile(UpdateUserProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateUserProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateUserProfileResponseUnmarshaller.Instance;return Invoke<UpdateUserProfileResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateUserProfileResponse UpdateUserProfile(UpdateUserProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateUserProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateUserProfileResponseUnmarshaller.Instance;return Invoke<UpdateUserProfileResponse>(request, options);}",
    "output": "public UpdateUserProfileResult updateUserProfile(UpdateUserProfileRequest request) {request = beforeClientExecution(request);return executeUpdateUserProfile(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}",
    "output": "public override TreeFilter Clone(){TreeFilter[] s = new TreeFilter[subfilters.Length];for (int i = 0; i < s.Length; i++){s[i] = subfilters[i].Clone();}return new AndTreeFilter.List(s);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TreeFilter Clone(){TreeFilter[] s = new TreeFilter[subfilters.Length];for (int i = 0; i < s.Length; i++){s[i] = subfilters[i].Clone();}return new AndTreeFilter.List(s);}",
    "output": "public RevFilter clone() {final RevFilter[] s = new RevFilter[subfilters.length];for (int i = 0; i < s.length; i++)s[i] = subfilters[i].clone();return new List(s);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetFederationTokenRequest(String name) {setName(name);}",
    "output": "public GetFederationTokenRequest(string name){_name = name;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GetFederationTokenRequest(string name){_name = name;}",
    "output": "public GetFederationTokenRequest(String name) {setName(name);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Cell translateUnicodeValues(Cell cell) {String s = cell.getRichStringCellValue().getString();boolean foundUnicode = false;String lowerCaseStr = s.toLowerCase(Locale.ROOT);for (UnicodeMapping entry : unicodeMappings) {String key = entry.entityName;if (lowerCaseStr.contains(key)) {s = s.replaceAll(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode) {cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(s));}return cell;}",
    "output": "public static ICell TranslateUnicodeValues(ICell cell){String s = cell.RichStringCellValue.String;bool foundUnicode = false;String lowerCaseStr = s.ToLower();for (int i = 0; i < unicodeMappings.Length; i++){UnicodeMapping entry = unicodeMappings[i];String key = entry.entityName;if (lowerCaseStr.IndexOf(key, StringComparison.Ordinal) != -1){s = s.Replace(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode){cell.SetCellValue(new HSSFRichTextString(s));}return cell;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static ICell TranslateUnicodeValues(ICell cell){String s = cell.RichStringCellValue.String;bool foundUnicode = false;String lowerCaseStr = s.ToLower();for (int i = 0; i < unicodeMappings.Length; i++){UnicodeMapping entry = unicodeMappings[i];String key = entry.entityName;if (lowerCaseStr.IndexOf(key, StringComparison.Ordinal) != -1){s = s.Replace(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode){cell.SetCellValue(new HSSFRichTextString(s));}return cell;}",
    "output": "public static Cell translateUnicodeValues(Cell cell) {String s = cell.getRichStringCellValue().getString();boolean foundUnicode = false;String lowerCaseStr = s.toLowerCase(Locale.ROOT);for (UnicodeMapping entry : unicodeMappings) {String key = entry.entityName;if (lowerCaseStr.contains(key)) {s = s.replaceAll(key, entry.resolvedValue);foundUnicode = true;}}if (foundUnicode) {cell.setCellValue(cell.getRow().getSheet().getWorkbook().getCreationHelper().createRichTextString(s));}return cell;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateChangeSetResult createChangeSet(CreateChangeSetRequest request) {request = beforeClientExecution(request);return executeCreateChangeSet(request);}",
    "output": "public virtual CreateChangeSetResponse CreateChangeSet(CreateChangeSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateChangeSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateChangeSetResponseUnmarshaller.Instance;return Invoke<CreateChangeSetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateChangeSetResponse CreateChangeSet(CreateChangeSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateChangeSetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateChangeSetResponseUnmarshaller.Instance;return Invoke<CreateChangeSetResponse>(request, options);}",
    "output": "public CreateChangeSetResult createChangeSet(CreateChangeSetRequest request) {request = beforeClientExecution(request);return executeCreateChangeSet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SubmoduleStatusCommand(Repository repo) {super(repo);paths = new ArrayList<>();}",
    "output": "protected internal SubmoduleStatusCommand(Repository repo) : base(repo){paths = new AList<string>();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "protected internal SubmoduleStatusCommand(Repository repo) : base(repo){paths = new AList<string>();}",
    "output": "public SubmoduleStatusCommand(Repository repo) {super(repo);paths = new ArrayList<>();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getResultStart() {return outRegion.resultStart;}",
    "output": "public virtual int GetResultStart(){return currentSource.regionList.resultStart;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetResultStart(){return currentSource.regionList.resultStart;}",
    "output": "public int getResultStart() {return outRegion.resultStart;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static BigInteger round(BigInteger bi, int nBits) {if (nBits < 1) {return bi;}return bi.add(HALF_BITS[nBits]);}",
    "output": "public static BigInteger Round(BigInteger bi, int nBits){if (nBits < 1){return bi;}return bi+(HALF_BITS[nBits]);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static BigInteger Round(BigInteger bi, int nBits){if (nBits < 1){return bi;}return bi+(HALF_BITS[nBits]);}",
    "output": "public static BigInteger round(BigInteger bi, int nBits) {if (nBits < 1) {return bi;}return bi.add(HALF_BITS[nBits]);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Date round(Date date, Resolution resolution) {return new Date(round(date.getTime(), resolution));}",
    "output": "public static DateTime Round(DateTime date, Resolution resolution){return new DateTime(Round(date.Ticks / TimeSpan.TicksPerMillisecond, resolution));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static DateTime Round(DateTime date, Resolution resolution){return new DateTime(Round(date.Ticks / TimeSpan.TicksPerMillisecond, resolution));}",
    "output": "public static Date round(Date date, Resolution resolution) {return new Date(round(date.getTime(), resolution));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int compareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex) {if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.length) ? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.length && li < longArray.length&& shortArray[si] == longArray[li]) {si++;li++;}if (si == shortArray.length) {return 0;} else {if (li == longArray.length)return 1;else return (shortArray[si] > longArray[li]) ? 1 : -1;}}",
    "output": "public static int CompareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex){if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.Length) ? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.Length && li < longArray.Length&& shortArray[si] == longArray[li]){si++;li++;}if (si == shortArray.Length){return 0;}else{if (li == longArray.Length)return 1;else return (shortArray[si] > longArray[li]) ? 1 : -1;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int CompareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex){if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.Length) ? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.Length && li < longArray.Length&& shortArray[si] == longArray[li]){si++;li++;}if (si == shortArray.Length){return 0;}else{if (li == longArray.Length)return 1;else return (shortArray[si] > longArray[li]) ? 1 : -1;}}",
    "output": "public static int compareArrayByPrefix(char[] shortArray, int shortIndex,char[] longArray, int longIndex) {if (shortArray == null)return 0;else if (longArray == null)return (shortIndex < shortArray.length) ? 1 : 0;int si = shortIndex, li = longIndex;while (si < shortArray.length && li < longArray.length&& shortArray[si] == longArray[li]) {si++;li++;}if (si == shortArray.length) {return 0;} else {if (li == longArray.length)return 1;else return (shortArray[si] > longArray[li]) ? 1 : -1;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AttachInternetGatewayResult attachInternetGateway(AttachInternetGatewayRequest request) {request = beforeClientExecution(request);return executeAttachInternetGateway(request);}",
    "output": "public virtual AttachInternetGatewayResponse AttachInternetGateway(AttachInternetGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachInternetGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachInternetGatewayResponseUnmarshaller.Instance;return Invoke<AttachInternetGatewayResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AttachInternetGatewayResponse AttachInternetGateway(AttachInternetGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachInternetGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachInternetGatewayResponseUnmarshaller.Instance;return Invoke<AttachInternetGatewayResponse>(request, options);}",
    "output": "public AttachInternetGatewayResult attachInternetGateway(AttachInternetGatewayRequest request) {request = beforeClientExecution(request);return executeAttachInternetGateway(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized boolean containsValue(Object value) {if (value == null) {throw new NullPointerException();}HashtableEntry[] tab = table;int len = tab.length;for (int i = 0; i < len; i++) {for (HashtableEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return false;}",
    "output": "public virtual bool containsValue(object value){lock (this){if (value == null){throw new System.ArgumentNullException();}java.util.Hashtable.HashtableEntry<K, V>[] tab = table;int len = tab.Length;{for (int i = 0; i < len; i++){{for (java.util.Hashtable.HashtableEntry<K, V> e = tab[i]; e != null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return false;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool containsValue(object value){lock (this){if (value == null){throw new System.ArgumentNullException();}java.util.Hashtable.HashtableEntry<K, V>[] tab = table;int len = tab.Length;{for (int i = 0; i < len; i++){{for (java.util.Hashtable.HashtableEntry<K, V> e = tab[i]; e != null; e = e.next){if (value.Equals(e.value)){return true;}}}}}return false;}}",
    "output": "public synchronized boolean containsValue(Object value) {if (value == null) {throw new NullPointerException();}HashtableEntry[] tab = table;int len = tab.length;for (int i = 0; i < len; i++) {for (HashtableEntry e = tab[i]; e != null; e = e.next) {if (value.equals(e.value)) {return true;}}}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append( operands[0] );buffer.append(\"<=\");buffer.append( operands[1] );return buffer.toString();}",
    "output": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\"<=\");buffer.Append(operands[1]);return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\"<=\");buffer.Append(operands[1]);return buffer.ToString();}",
    "output": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append( operands[0] );buffer.append(\"<=\");buffer.append( operands[1] );return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void write(String str) {write(str.toCharArray());}",
    "output": "public override void write(string str){write(str.ToCharArray());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void write(string str){write(str.ToCharArray());}",
    "output": "public void write(String str) {write(str.toCharArray());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Sort(SortField... fields) {setSort(fields);}",
    "output": "public Sort(SortField field){SetSort(field);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Sort(SortField field){SetSort(field);}",
    "output": "public Sort(SortField... fields) {setSort(fields);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeEventCategoriesResult describeEventCategories(DescribeEventCategoriesRequest request) {request = beforeClientExecution(request);return executeDescribeEventCategories(request);}",
    "output": "public virtual DescribeEventCategoriesResponse DescribeEventCategories(DescribeEventCategoriesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeEventCategoriesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeEventCategoriesResponseUnmarshaller.Instance;return Invoke<DescribeEventCategoriesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeEventCategoriesResponse DescribeEventCategories(DescribeEventCategoriesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeEventCategoriesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeEventCategoriesResponseUnmarshaller.Instance;return Invoke<DescribeEventCategoriesResponse>(request, options);}",
    "output": "public DescribeEventCategoriesResult describeEventCategories(DescribeEventCategoriesRequest request) {request = beforeClientExecution(request);return executeDescribeEventCategories(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateDeviceResult updateDevice(UpdateDeviceRequest request) {request = beforeClientExecution(request);return executeUpdateDevice(request);}",
    "output": "public virtual UpdateDeviceResponse UpdateDevice(UpdateDeviceRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDeviceRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDeviceResponseUnmarshaller.Instance;return Invoke<UpdateDeviceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateDeviceResponse UpdateDevice(UpdateDeviceRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDeviceRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDeviceResponseUnmarshaller.Instance;return Invoke<UpdateDeviceResponse>(request, options);}",
    "output": "public UpdateDeviceResult updateDevice(UpdateDeviceRequest request) {request = beforeClientExecution(request);return executeUpdateDevice(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateWorkerBlockResult createWorkerBlock(CreateWorkerBlockRequest request) {request = beforeClientExecution(request);return executeCreateWorkerBlock(request);}",
    "output": "public virtual CreateWorkerBlockResponse CreateWorkerBlock(CreateWorkerBlockRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateWorkerBlockRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateWorkerBlockResponseUnmarshaller.Instance;return Invoke<CreateWorkerBlockResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateWorkerBlockResponse CreateWorkerBlock(CreateWorkerBlockRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateWorkerBlockRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateWorkerBlockResponseUnmarshaller.Instance;return Invoke<CreateWorkerBlockResponse>(request, options);}",
    "output": "public CreateWorkerBlockResult createWorkerBlock(CreateWorkerBlockRequest request) {request = beforeClientExecution(request);return executeCreateWorkerBlock(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized void reset() throws IOException {throw new IOException();}",
    "output": "public virtual void reset(){lock (this){throw new System.IO.IOException();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void reset(){lock (this){throw new System.IO.IOException();}}",
    "output": "public synchronized void reset() throws IOException {throw new IOException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void setReader(Reader input) {if (input == null) {throw new NullPointerException(\"input must not be null\");} else if (this.input != ILLEGAL_STATE_READER) {throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");}this.inputPending = input;setReaderTestPoint();}",
    "output": "public void SetReader(TextReader input){if (input == null){throw new System.ArgumentNullException(\"value\", \"input must not be null\");}else if (this.m_input != ILLEGAL_STATE_READER){throw new InvalidOperationException(\"TokenStream contract violation: Close() call missing\");}this.inputPending = input;Debug.Assert(SetReaderTestPoint());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void SetReader(TextReader input){if (input == null){throw new System.ArgumentNullException(\"value\", \"input must not be null\");}else if (this.m_input != ILLEGAL_STATE_READER){throw new InvalidOperationException(\"TokenStream contract violation: Close() call missing\");}this.inputPending = input;Debug.Assert(SetReaderTestPoint());}",
    "output": "public final void setReader(Reader input) {if (input == null) {throw new NullPointerException(\"input must not be null\");} else if (this.input != ILLEGAL_STATE_READER) {throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");}this.inputPending = input;setReaderTestPoint();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetUsagePlanKeysResult getUsagePlanKeys(GetUsagePlanKeysRequest request) {request = beforeClientExecution(request);return executeGetUsagePlanKeys(request);}",
    "output": "public virtual GetUsagePlanKeysResponse GetUsagePlanKeys(GetUsagePlanKeysRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetUsagePlanKeysRequestMarshaller.Instance;options.ResponseUnmarshaller = GetUsagePlanKeysResponseUnmarshaller.Instance;return Invoke<GetUsagePlanKeysResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetUsagePlanKeysResponse GetUsagePlanKeys(GetUsagePlanKeysRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetUsagePlanKeysRequestMarshaller.Instance;options.ResponseUnmarshaller = GetUsagePlanKeysResponseUnmarshaller.Instance;return Invoke<GetUsagePlanKeysResponse>(request, options);}",
    "output": "public GetUsagePlanKeysResult getUsagePlanKeys(GetUsagePlanKeysRequest request) {request = beforeClientExecution(request);return executeGetUsagePlanKeys(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(){StringBuilder sb = new StringBuilder();sb.append( \"subInfos=(\" );for( SubInfo si : subInfos )sb.append( si.toString() );sb.append( \")/\" ).append( totalBoost ).append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );return sb.toString();}",
    "output": "public override string ToString(){StringBuilder sb = new StringBuilder();sb.Append(\"subInfos=(\");foreach (SubInfo si in subInfos)sb.Append(si.ToString());sb.Append(\")/\").Append(Number.ToString(totalBoost)).Append('(').Append(startOffset).Append(',').Append(endOffset).Append(')');return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){StringBuilder sb = new StringBuilder();sb.Append(\"subInfos=(\");foreach (SubInfo si in subInfos)sb.Append(si.ToString());sb.Append(\")/\").Append(Number.ToString(totalBoost)).Append('(').Append(startOffset).Append(',').Append(endOffset).Append(')');return sb.ToString();}",
    "output": "public String toString(){StringBuilder sb = new StringBuilder();sb.append( \"subInfos=(\" );for( SubInfo si : subInfos )sb.append( si.toString() );sb.append( \")/\" ).append( totalBoost ).append( '(' ).append( startOffset ).append( ',' ).append( endOffset ).append( ')' );return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}",
    "output": "public override TokenStream Create(TokenStream input){return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}",
    "output": "public TokenStream create(TokenStream input) {return new LimitTokenPositionFilter(input, maxTokenPosition, consumeAllTokens);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeFleetUtilizationResult describeFleetUtilization(DescribeFleetUtilizationRequest request) {request = beforeClientExecution(request);return executeDescribeFleetUtilization(request);}",
    "output": "public virtual DescribeFleetUtilizationResponse DescribeFleetUtilization(DescribeFleetUtilizationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetUtilizationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetUtilizationResponseUnmarshaller.Instance;return Invoke<DescribeFleetUtilizationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeFleetUtilizationResponse DescribeFleetUtilization(DescribeFleetUtilizationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeFleetUtilizationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeFleetUtilizationResponseUnmarshaller.Instance;return Invoke<DescribeFleetUtilizationResponse>(request, options);}",
    "output": "public DescribeFleetUtilizationResult describeFleetUtilization(DescribeFleetUtilizationRequest request) {request = beforeClientExecution(request);return executeDescribeFleetUtilization(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void inform(ResourceLoader loader) throws IOException {InputStream stream = null;try {if (dictFile != null) dictionary = getWordSet(loader, dictFile, false);stream = loader.openResource(hypFile);final InputSource is = new InputSource(stream);is.setEncoding(encoding); is.setSystemId(hypFile);hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);} finally {IOUtils.closeWhileHandlingException(stream);}}",
    "output": "public virtual void Inform(IResourceLoader loader){Stream stream = null;try{if (dictFile != null) {dictionary = GetWordSet(loader, dictFile, false);}stream = loader.OpenResource(hypFile);var xmlEncoding = string.IsNullOrEmpty(encoding) ? Encoding.UTF8 : Encoding.GetEncoding(encoding);hyphenator = HyphenationCompoundWordTokenFilter.GetHyphenationTree(stream, xmlEncoding);}finally{IOUtils.DisposeWhileHandlingException(stream);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Inform(IResourceLoader loader){Stream stream = null;try{if (dictFile != null) {dictionary = GetWordSet(loader, dictFile, false);}stream = loader.OpenResource(hypFile);var xmlEncoding = string.IsNullOrEmpty(encoding) ? Encoding.UTF8 : Encoding.GetEncoding(encoding);hyphenator = HyphenationCompoundWordTokenFilter.GetHyphenationTree(stream, xmlEncoding);}finally{IOUtils.DisposeWhileHandlingException(stream);}}",
    "output": "public void inform(ResourceLoader loader) throws IOException {InputStream stream = null;try {if (dictFile != null) dictionary = getWordSet(loader, dictFile, false);stream = loader.openResource(hypFile);final InputSource is = new InputSource(stream);is.setEncoding(encoding); is.setSystemId(hypFile);hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree(is);} finally {IOUtils.closeWhileHandlingException(stream);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeclineInvitationsResult declineInvitations(DeclineInvitationsRequest request) {request = beforeClientExecution(request);return executeDeclineInvitations(request);}",
    "output": "public virtual DeclineInvitationsResponse DeclineInvitations(DeclineInvitationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeclineInvitationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeclineInvitationsResponseUnmarshaller.Instance;return Invoke<DeclineInvitationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeclineInvitationsResponse DeclineInvitations(DeclineInvitationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeclineInvitationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeclineInvitationsResponseUnmarshaller.Instance;return Invoke<DeclineInvitationsResponse>(request, options);}",
    "output": "public DeclineInvitationsResult declineInvitations(DeclineInvitationsRequest request) {request = beforeClientExecution(request);return executeDeclineInvitations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeAutoScalingGroupsResult describeAutoScalingGroups() {return describeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}",
    "output": "public virtual DescribeAutoScalingGroupsResponse DescribeAutoScalingGroups(){return DescribeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeAutoScalingGroupsResponse DescribeAutoScalingGroups(){return DescribeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}",
    "output": "public DescribeAutoScalingGroupsResult describeAutoScalingGroups() {return describeAutoScalingGroups(new DescribeAutoScalingGroupsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return String.format(\"pushMode(%d)\", mode);}",
    "output": "public override string ToString(){return string.Format(\"pushMode({0})\", mode);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return string.Format(\"pushMode({0})\", mode);}",
    "output": "public String toString() {return String.format(\"pushMode(%d)\", mode);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateBranchCommand setStartPoint(String startPoint) {checkCallable();this.startPoint = startPoint;this.startCommit = null;return this;}",
    "output": "public virtual NGit.Api.CreateBranchCommand SetStartPoint(string startPoint){CheckCallable();this.startPoint = startPoint;this.startCommit = null;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.CreateBranchCommand SetStartPoint(string startPoint){CheckCallable();this.startPoint = startPoint;this.startCommit = null;return this;}",
    "output": "public CreateBranchCommand setStartPoint(String startPoint) {checkCallable();this.startPoint = startPoint;this.startCommit = null;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DBInstance stopDBInstance(StopDBInstanceRequest request) {request = beforeClientExecution(request);return executeStopDBInstance(request);}",
    "output": "public virtual StopDBInstanceResponse StopDBInstance(StopDBInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopDBInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = StopDBInstanceResponseUnmarshaller.Instance;return Invoke<StopDBInstanceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual StopDBInstanceResponse StopDBInstance(StopDBInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = StopDBInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = StopDBInstanceResponseUnmarshaller.Instance;return Invoke<StopDBInstanceResponse>(request, options);}",
    "output": "public DBInstance stopDBInstance(StopDBInstanceRequest request) {request = beforeClientExecution(request);return executeStopDBInstance(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SuggestWordQueue(int size, Comparator<SuggestWord> comparator){super(size);this.comparator = comparator;}",
    "output": "public SuggestWordQueue(int size, IComparer<SuggestWord> comparer): base(size){this.comparer = comparer;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SuggestWordQueue(int size, IComparer<SuggestWord> comparer): base(size){this.comparer = comparer;}",
    "output": "public SuggestWordQueue(int size, Comparator<SuggestWord> comparator){super(size);this.comparator = comparator;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LBCookieStickinessPolicy(String policyName, Long cookieExpirationPeriod) {setPolicyName(policyName);setCookieExpirationPeriod(cookieExpirationPeriod);}",
    "output": "public LBCookieStickinessPolicy(string policyName, long cookieExpirationPeriod){_policyName = policyName;_cookieExpirationPeriod = cookieExpirationPeriod;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LBCookieStickinessPolicy(string policyName, long cookieExpirationPeriod){_policyName = policyName;_cookieExpirationPeriod = cookieExpirationPeriod;}",
    "output": "public LBCookieStickinessPolicy(String policyName, Long cookieExpirationPeriod) {setPolicyName(policyName);setCookieExpirationPeriod(cookieExpirationPeriod);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators) {if (firstSheetIndex < 0) {throw new IllegalArgumentException(\"Invalid firstSheetIndex: \" + firstSheetIndex + \".\");}if (lastSheetIndex < firstSheetIndex) {throw new IllegalArgumentException(\"Invalid lastSheetIndex: \" + lastSheetIndex + \" for firstSheetIndex: \" + firstSheetIndex + \".\");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators.clone();}",
    "output": "public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators){if (firstSheetIndex < 0){throw new ArgumentException(\"Invalid firstSheetIndex: \" + firstSheetIndex + \".\");}if (lastSheetIndex < firstSheetIndex){throw new ArgumentException(\"Invalid lastSheetIndex: \" + lastSheetIndex + \" for firstSheetIndex: \" + firstSheetIndex + \".\");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators){if (firstSheetIndex < 0){throw new ArgumentException(\"Invalid firstSheetIndex: \" + firstSheetIndex + \".\");}if (lastSheetIndex < firstSheetIndex){throw new ArgumentException(\"Invalid lastSheetIndex: \" + lastSheetIndex + \" for firstSheetIndex: \" + firstSheetIndex + \".\");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators;}",
    "output": "public SheetRangeEvaluator(int firstSheetIndex, int lastSheetIndex, SheetRefEvaluator[] sheetEvaluators) {if (firstSheetIndex < 0) {throw new IllegalArgumentException(\"Invalid firstSheetIndex: \" + firstSheetIndex + \".\");}if (lastSheetIndex < firstSheetIndex) {throw new IllegalArgumentException(\"Invalid lastSheetIndex: \" + lastSheetIndex + \" for firstSheetIndex: \" + firstSheetIndex + \".\");}_firstSheetIndex = firstSheetIndex;_lastSheetIndex = lastSheetIndex;_sheetEvaluators = sheetEvaluators.clone();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevokeTokenRequest() {super(\"OnsMqtt\", \"2019-12-11\", \"RevokeToken\", \"onsmqtt\");setMethod(MethodType.POST);}",
    "output": "public RevokeTokenRequest(): base(\"OnsMqtt\", \"2019-12-11\", \"RevokeToken\", \"onsmqtt\", \"openAPI\"){Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RevokeTokenRequest(): base(\"OnsMqtt\", \"2019-12-11\", \"RevokeToken\", \"onsmqtt\", \"openAPI\"){Method = MethodType.POST;}",
    "output": "public RevokeTokenRequest() {super(\"OnsMqtt\", \"2019-12-11\", \"RevokeToken\", \"onsmqtt\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), true);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, true);} catch (EvaluationException e) {return e.getErrorEval();}}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1){AreaEval aeRange;double result;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);result = OperandResolver.CoerceValueToDouble(ve);if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}aeRange = ConvertRangeArg(arg1);}catch (EvaluationException e){return e.GetErrorEval();}return eval(srcRowIndex, srcColumnIndex, result, aeRange, true);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1){AreaEval aeRange;double result;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);result = OperandResolver.CoerceValueToDouble(ve);if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}aeRange = ConvertRangeArg(arg1);}catch (EvaluationException e){return e.GetErrorEval();}return eval(srcRowIndex, srcColumnIndex, result, aeRange, true);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), true);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, true);} catch (EvaluationException e) {return e.getErrorEval();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString() {return \"\";}",
    "output": "public override String ToFormulaString(){return \"\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){return \"\";}",
    "output": "public String toFormulaString() {return \"\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public byte readByte() throws IOException {if (bufferPos == bufferSize) {refill();}assert bufferPos == buffer.position() : \"bufferPos=\" + bufferPos + \" vs buffer.position()=\" + buffer.position();bufferPos++;return buffer.get();}",
    "output": "public sbyte readByte() throws IOException{if (bufferPos == bufferSize){refill();}Debug.Assert(bufferPos == buffer.position(), \"bufferPos=\" + bufferPos + \" vs buffer.position()=\" + buffer.position());bufferPos++;return buffer.get();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sbyte readByte() throws IOException{if (bufferPos == bufferSize){refill();}Debug.Assert(bufferPos == buffer.position(), \"bufferPos=\" + bufferPos + \" vs buffer.position()=\" + buffer.position());bufferPos++;return buffer.get();}",
    "output": "public byte readByte() throws IOException {if (bufferPos == bufferSize) {refill();}assert bufferPos == buffer.position() : \"bufferPos=\" + bufferPos + \" vs buffer.position()=\" + buffer.position();bufferPos++;return buffer.get();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTargetsByRuleResult listTargetsByRule(ListTargetsByRuleRequest request) {request = beforeClientExecution(request);return executeListTargetsByRule(request);}",
    "output": "public virtual ListTargetsByRuleResponse ListTargetsByRule(ListTargetsByRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTargetsByRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTargetsByRuleResponseUnmarshaller.Instance;return Invoke<ListTargetsByRuleResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTargetsByRuleResponse ListTargetsByRule(ListTargetsByRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTargetsByRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTargetsByRuleResponseUnmarshaller.Instance;return Invoke<ListTargetsByRuleResponse>(request, options);}",
    "output": "public ListTargetsByRuleResult listTargetsByRule(ListTargetsByRuleRequest request) {request = beforeClientExecution(request);return executeListTargetsByRule(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DisassociateQualificationFromWorkerResult disassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request) {request = beforeClientExecution(request);return executeDisassociateQualificationFromWorker(request);}",
    "output": "public virtual DisassociateQualificationFromWorkerResponse DisassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisassociateQualificationFromWorkerRequestMarshaller.Instance;options.ResponseUnmarshaller = DisassociateQualificationFromWorkerResponseUnmarshaller.Instance;return Invoke<DisassociateQualificationFromWorkerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DisassociateQualificationFromWorkerResponse DisassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DisassociateQualificationFromWorkerRequestMarshaller.Instance;options.ResponseUnmarshaller = DisassociateQualificationFromWorkerResponseUnmarshaller.Instance;return Invoke<DisassociateQualificationFromWorkerResponse>(request, options);}",
    "output": "public DisassociateQualificationFromWorkerResult disassociateQualificationFromWorker(DisassociateQualificationFromWorkerRequest request) {request = beforeClientExecution(request);return executeDisassociateQualificationFromWorker(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;CompiledAutomaton other = (CompiledAutomaton) obj;if (type != other.type) return false;if (type == AUTOMATON_TYPE.SINGLE) {if (!term.equals(other.term)) return false;} else if (type == AUTOMATON_TYPE.NORMAL) {if (!runAutomaton.equals(other.runAutomaton)) return false;}return true;}",
    "output": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}CompiledAutomaton other = (CompiledAutomaton)obj;if (Type != other.Type){return false;}if (Type == AUTOMATON_TYPE.SINGLE || Type == AUTOMATON_TYPE.PREFIX){if (!Term.Equals(other.Term)){return false;}}else if (Type == AUTOMATON_TYPE.NORMAL){if (!RunAutomaton.Equals(other.RunAutomaton)){return false;}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}CompiledAutomaton other = (CompiledAutomaton)obj;if (Type != other.Type){return false;}if (Type == AUTOMATON_TYPE.SINGLE || Type == AUTOMATON_TYPE.PREFIX){if (!Term.Equals(other.Term)){return false;}}else if (Type == AUTOMATON_TYPE.NORMAL){if (!RunAutomaton.Equals(other.RunAutomaton)){return false;}}return true;}",
    "output": "public boolean equals(Object obj) {if (this == obj) return true;if (obj == null) return false;if (getClass() != obj.getClass()) return false;CompiledAutomaton other = (CompiledAutomaton) obj;if (type != other.type) return false;if (type == AUTOMATON_TYPE.SINGLE) {if (!term.equals(other.term)) return false;} else if (type == AUTOMATON_TYPE.NORMAL) {if (!runAutomaton.equals(other.runAutomaton)) return false;}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static CharFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}",
    "output": "public static CharFilterFactory ForName(string name, IDictionary<string, string> args){return loader.NewInstance(name, args);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static CharFilterFactory ForName(string name, IDictionary<string, string> args){return loader.NewInstance(name, args);}",
    "output": "public static CharFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {String[] units = { \"bytes\", \"KiB\", \"MiB\", \"GiB\" };long sz = getIndexSize();int u = 0;while (1024 <= sz && u < units.length - 1) {int rem = (int) (sz % 1024);sz /= 1024;if (rem != 0)sz++;u++;}return \"DeltaIndex[\" + sz + \" \" + units[u] + \"]\";}",
    "output": "public override string ToString(){string[] units = new string[] { \"bytes\", \"KiB\", \"MiB\", \"GiB\" };long sz = GetIndexSize();int u = 0;while (1024 <= sz && u < units.Length - 1){int rem = (int)(sz % 1024);sz /= 1024;if (rem != 0){sz++;}u++;}return \"DeltaIndex[\" + sz + \" \" + units[u] + \"]\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){string[] units = new string[] { \"bytes\", \"KiB\", \"MiB\", \"GiB\" };long sz = GetIndexSize();int u = 0;while (1024 <= sz && u < units.Length - 1){int rem = (int)(sz % 1024);sz /= 1024;if (rem != 0){sz++;}u++;}return \"DeltaIndex[\" + sz + \" \" + units[u] + \"]\";}",
    "output": "public String toString() {String[] units = { \"bytes\", \"KiB\", \"MiB\", \"GiB\" };long sz = getIndexSize();int u = 0;while (1024 <= sz && u < units.length - 1) {int rem = (int) (sz % 1024);sz /= 1024;if (rem != 0)sz++;u++;}return \"DeltaIndex[\" + sz + \" \" + units[u] + \"]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SimilarityConfig build() {return new SimilarityConfig(this);}",
    "output": "public CompositeReaderContext Build(){return (CompositeReaderContext)Build(null, reader, 0, 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CompositeReaderContext Build(){return (CompositeReaderContext)Build(null, reader, 0, 0);}",
    "output": "public SimilarityConfig build() {return new SimilarityConfig(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void mark(int readLimit) throws IOException {throw new IOException();}",
    "output": "public virtual void mark(int readLimit){throw new System.IO.IOException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void mark(int readLimit){throw new System.IO.IOException();}",
    "output": "public void mark(int readLimit) throws IOException {throw new IOException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void collect(int doc) throws IOException {final long time = clock.get();if (time - timeout > 0L) {if (greedy) {in.collect(doc);}throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );}in.collect(doc);}",
    "output": "public virtual void Collect(int doc){long time = clock.Get();if (timeout < time){if (greedy){collector.Collect(doc);}throw new TimeExceededException(timeout - t0, time - t0, docBase + doc);}collector.Collect(doc);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Collect(int doc){long time = clock.Get();if (timeout < time){if (greedy){collector.Collect(doc);}throw new TimeExceededException(timeout - t0, time - t0, docBase + doc);}collector.Collect(doc);}",
    "output": "public void collect(int doc) throws IOException {final long time = clock.get();if (time - timeout > 0L) {if (greedy) {in.collect(doc);}throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );}in.collect(doc);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LocalFile(File directory, int inCoreLimit) {super(inCoreLimit);this.directory = directory;}",
    "output": "public LocalFile(FilePath directory, int inCoreLimit) : base(inCoreLimit){this.directory = directory;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LocalFile(FilePath directory, int inCoreLimit) : base(inCoreLimit){this.directory = directory;}",
    "output": "public LocalFile(File directory, int inCoreLimit) {super(inCoreLimit);this.directory = directory;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public E remove(int index) {Object[] a = array;int s = size;if (index >= s) {throwIndexOutOfBoundsException(index, s);}@SuppressWarnings(\"unchecked\") E result = (E) a[index];System.arraycopy(a, index + 1, a, index, --s - index);a[s] = null;  size = s;modCount++;return result;}",
    "output": "public override E remove(int index){object[] a = array;int s = _size;if (index >= s){throwIndexOutOfBoundsException(index, s);}E result = (E)a[index];System.Array.Copy(a, index + 1, a, index, --s - index);a[s] = null;_size = s;modCount++;return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override E remove(int index){object[] a = array;int s = _size;if (index >= s){throwIndexOutOfBoundsException(index, s);}E result = (E)a[index];System.Array.Copy(a, index + 1, a, index, --s - index);a[s] = null;_size = s;modCount++;return result;}",
    "output": "@Override public E remove(int index) {Object[] a = array;int s = size;if (index >= s) {throwIndexOutOfBoundsException(index, s);}@SuppressWarnings(\"unchecked\") E result = (E) a[index];System.arraycopy(a, index + 1, a, index, --s - index);a[s] = null;  size = s;modCount++;return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RequestUploadCredentialsResult requestUploadCredentials(RequestUploadCredentialsRequest request) {request = beforeClientExecution(request);return executeRequestUploadCredentials(request);}",
    "output": "public virtual RequestUploadCredentialsResponse RequestUploadCredentials(RequestUploadCredentialsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RequestUploadCredentialsRequestMarshaller.Instance;options.ResponseUnmarshaller = RequestUploadCredentialsResponseUnmarshaller.Instance;return Invoke<RequestUploadCredentialsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RequestUploadCredentialsResponse RequestUploadCredentials(RequestUploadCredentialsRequest request){var options = new InvokeOptions();options.RequestMarshaller = RequestUploadCredentialsRequestMarshaller.Instance;options.ResponseUnmarshaller = RequestUploadCredentialsResponseUnmarshaller.Instance;return Invoke<RequestUploadCredentialsResponse>(request, options);}",
    "output": "public RequestUploadCredentialsResult requestUploadCredentials(RequestUploadCredentialsRequest request) {request = beforeClientExecution(request);return executeRequestUploadCredentials(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void copyTo(OutputStream out) throws MissingObjectException,IOException {if (isLarge()) {try (ObjectStream in = openStream()) {final long sz = in.getSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz) {int n = in.read(tmp);if (n < 0)throw new EOFException();out.write(tmp, 0, n);copied += n;}if (0 <= in.read())throw new EOFException();}} else {out.write(getCachedBytes());}}",
    "output": "public virtual void CopyTo(OutputStream @out){if (IsLarge()){ObjectStream @in = OpenStream();try{long sz = @in.GetSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz){int n = @in.Read(tmp);if (n < 0){throw new EOFException();}@out.Write(tmp, 0, n);copied += n;}if (0 <= @in.Read()){throw new EOFException();}}finally{@in.Close();}}else{@out.Write(GetCachedBytes());}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void CopyTo(OutputStream @out){if (IsLarge()){ObjectStream @in = OpenStream();try{long sz = @in.GetSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz){int n = @in.Read(tmp);if (n < 0){throw new EOFException();}@out.Write(tmp, 0, n);copied += n;}if (0 <= @in.Read()){throw new EOFException();}}finally{@in.Close();}}else{@out.Write(GetCachedBytes());}}",
    "output": "public void copyTo(OutputStream out) throws MissingObjectException,IOException {if (isLarge()) {try (ObjectStream in = openStream()) {final long sz = in.getSize();byte[] tmp = new byte[8192];long copied = 0;while (copied < sz) {int n = in.read(tmp);if (n < 0)throw new EOFException();out.write(tmp, 0, n);copied += n;}if (0 <= in.read())throw new EOFException();}} else {out.write(getCachedBytes());}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public V remove(Object key) {if (key == null) {return removeNullKey();}int hash = secondaryHash(key.hashCode());HashMapEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);for (HashMapEntry<K, V> e = tab[index], prev = null;e != null; prev = e, e = e.next) {if (e.hash == hash && key.equals(e.key)) {if (prev == null) {tab[index] = e.next;} else {prev.next = e.next;}modCount++;size--;postRemove(e);return e.value;}}return null;}",
    "output": "public override V remove(object key){if (key == null){return removeNullKey();}int hash = secondaryHash(key.GetHashCode());java.util.HashMap.HashMapEntry<K, V>[] tab = table;int index = hash & (tab.Length - 1);{java.util.HashMap.HashMapEntry<K, V> e = tab[index];java.util.HashMap.HashMapEntry<K, V> prev = null;for (; e != null; prev = e, e = e.next){if (e.hash == hash && key.Equals(e.key)){if (prev == null){tab[index] = e.next;}else{prev.next = e.next;}modCount++;_size--;postRemove(e);return e.value;}}}return default(V);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override V remove(object key){if (key == null){return removeNullKey();}int hash = secondaryHash(key.GetHashCode());java.util.HashMap.HashMapEntry<K, V>[] tab = table;int index = hash & (tab.Length - 1);{java.util.HashMap.HashMapEntry<K, V> e = tab[index];java.util.HashMap.HashMapEntry<K, V> prev = null;for (; e != null; prev = e, e = e.next){if (e.hash == hash && key.Equals(e.key)){if (prev == null){tab[index] = e.next;}else{prev.next = e.next;}modCount++;_size--;postRemove(e);return e.value;}}}return default(V);}",
    "output": "@Override public V remove(Object key) {if (key == null) {return removeNullKey();}int hash = secondaryHash(key.hashCode());HashMapEntry<K, V>[] tab = table;int index = hash & (tab.length - 1);for (HashMapEntry<K, V> e = tab[index], prev = null;e != null; prev = e, e = e.next) {if (e.hash == hash && key.equals(e.key)) {if (prev == null) {tab[index] = e.next;} else {prev.next = e.next;}modCount++;size--;postRemove(e);return e.value;}}return null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevFilter negate() {return a;}",
    "output": "public override RevFilter Negate(){return a;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override RevFilter Negate(){return a;}",
    "output": "public RevFilter negate() {return a;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeVpcsResult describeVpcs(DescribeVpcsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcs(request);}",
    "output": "public virtual DescribeVpcsResponse DescribeVpcs(DescribeVpcsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcsResponseUnmarshaller.Instance;return Invoke<DescribeVpcsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeVpcsResponse DescribeVpcs(DescribeVpcsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeVpcsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeVpcsResponseUnmarshaller.Instance;return Invoke<DescribeVpcsResponse>(request, options);}",
    "output": "public DescribeVpcsResult describeVpcs(DescribeVpcsRequest request) {request = beforeClientExecution(request);return executeDescribeVpcs(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateGameSessionQueueResult updateGameSessionQueue(UpdateGameSessionQueueRequest request) {request = beforeClientExecution(request);return executeUpdateGameSessionQueue(request);}",
    "output": "public virtual UpdateGameSessionQueueResponse UpdateGameSessionQueue(UpdateGameSessionQueueRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateGameSessionQueueRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateGameSessionQueueResponseUnmarshaller.Instance;return Invoke<UpdateGameSessionQueueResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateGameSessionQueueResponse UpdateGameSessionQueue(UpdateGameSessionQueueRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateGameSessionQueueRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateGameSessionQueueResponseUnmarshaller.Instance;return Invoke<UpdateGameSessionQueueResponse>(request, options);}",
    "output": "public UpdateGameSessionQueueResult updateGameSessionQueue(UpdateGameSessionQueueRequest request) {request = beforeClientExecution(request);return executeUpdateGameSessionQueue(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getTitle() {return title;}",
    "output": "public String GetTitle(){return title;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public String GetTitle(){return title;}",
    "output": "public String getTitle() {return title;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void setNewHeads(List<Head> newHeads) {if (this.newHeads != null)throw new IllegalStateException(JGitText.get().propertyIsAlreadyNonNull);this.newHeads = newHeads;}",
    "output": "public void SetNewHeads(IList<Head> newHeads){if (this.newHeads != null){throw new InvalidOperationException(JGitText.Get().propertyIsAlreadyNonNull);}this.newHeads = newHeads;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void SetNewHeads(IList<Head> newHeads){if (this.newHeads != null){throw new InvalidOperationException(JGitText.Get().propertyIsAlreadyNonNull);}this.newHeads = newHeads;}",
    "output": "public final void setNewHeads(List<Head> newHeads) {if (this.newHeads != null)throw new IllegalStateException(JGitText.get().propertyIsAlreadyNonNull);this.newHeads = newHeads;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ObjectId getExpectedOldObjectId() {return expectedOldObjectId;}",
    "output": "public virtual ObjectId GetExpectedOldObjectId(){return expectedOldObjectId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ObjectId GetExpectedOldObjectId(){return expectedOldObjectId;}",
    "output": "public ObjectId getExpectedOldObjectId() {return expectedOldObjectId;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetRecordsResult getRecords(GetRecordsRequest request) {request = beforeClientExecution(request);return executeGetRecords(request);}",
    "output": "public virtual GetRecordsResponse GetRecords(GetRecordsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRecordsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRecordsResponseUnmarshaller.Instance;return Invoke<GetRecordsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetRecordsResponse GetRecords(GetRecordsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRecordsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRecordsResponseUnmarshaller.Instance;return Invoke<GetRecordsResponse>(request, options);}",
    "output": "public GetRecordsResult getRecords(GetRecordsRequest request) {request = beforeClientExecution(request);return executeGetRecords(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Deleted3DPxg(int externalWorkbookNumber, String sheetName) {this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}",
    "output": "public Deleted3DPxg(int externalWorkbookNumber, String sheetName){this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Deleted3DPxg(int externalWorkbookNumber, String sheetName){this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}",
    "output": "public Deleted3DPxg(int externalWorkbookNumber, String sheetName) {this.externalWorkbookNumber = externalWorkbookNumber;this.sheetName = sheetName;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void execute(Lexer lexer) {lexer.skip();}",
    "output": "public void Execute(Lexer lexer){lexer.Skip();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Execute(Lexer lexer){lexer.Skip();}",
    "output": "public void execute(Lexer lexer) {lexer.skip();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeScheduledInstancesResult describeScheduledInstances(DescribeScheduledInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeScheduledInstances(request);}",
    "output": "public virtual DescribeScheduledInstancesResponse DescribeScheduledInstances(DescribeScheduledInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScheduledInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScheduledInstancesResponseUnmarshaller.Instance;return Invoke<DescribeScheduledInstancesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeScheduledInstancesResponse DescribeScheduledInstances(DescribeScheduledInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeScheduledInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeScheduledInstancesResponseUnmarshaller.Instance;return Invoke<DescribeScheduledInstancesResponse>(request, options);}",
    "output": "public DescribeScheduledInstancesResult describeScheduledInstances(DescribeScheduledInstancesRequest request) {request = beforeClientExecution(request);return executeDescribeScheduledInstances(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MultiFields(Fields[] subs, ReaderSlice[] subSlices) {this.subs = subs;this.subSlices = subSlices;}",
    "output": "public MultiFields(Fields[] subs, ReaderSlice[] subSlices){this.subs = subs;this.subSlices = subSlices;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public MultiFields(Fields[] subs, ReaderSlice[] subSlices){this.subs = subs;this.subSlices = subSlices;}",
    "output": "public MultiFields(Fields[] subs, ReaderSlice[] subSlices) {this.subs = subs;this.subSlices = subSlices;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int peekNextSid() {if(!hasNext()) {return -1;}return _list.get(_nextIndex).getSid();}",
    "output": "public int PeekNextSid(){if (!HasNext()){return -1;}return ((Record)_list[_nextIndex]).Sid;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int PeekNextSid(){if (!HasNext()){return -1;}return ((Record)_list[_nextIndex]).Sid;}",
    "output": "public int peekNextSid() {if(!hasNext()) {return -1;}return _list.get(_nextIndex).getSid();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ConfigureAgentResult configureAgent(ConfigureAgentRequest request) {request = beforeClientExecution(request);return executeConfigureAgent(request);}",
    "output": "public virtual ConfigureAgentResponse ConfigureAgent(ConfigureAgentRequest request){var options = new InvokeOptions();options.RequestMarshaller = ConfigureAgentRequestMarshaller.Instance;options.ResponseUnmarshaller = ConfigureAgentResponseUnmarshaller.Instance;return Invoke<ConfigureAgentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ConfigureAgentResponse ConfigureAgent(ConfigureAgentRequest request){var options = new InvokeOptions();options.RequestMarshaller = ConfigureAgentRequestMarshaller.Instance;options.ResponseUnmarshaller = ConfigureAgentResponseUnmarshaller.Instance;return Invoke<ConfigureAgentResponse>(request, options);}",
    "output": "public ConfigureAgentResult configureAgent(ConfigureAgentRequest request) {request = beforeClientExecution(request);return executeConfigureAgent(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetStreamingDistributionResult getStreamingDistribution(GetStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistribution(request);}",
    "output": "public virtual GetStreamingDistributionResponse GetStreamingDistribution(GetStreamingDistributionRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetStreamingDistributionRequestMarshaller.Instance;options.ResponseUnmarshaller = GetStreamingDistributionResponseUnmarshaller.Instance;return Invoke<GetStreamingDistributionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetStreamingDistributionResponse GetStreamingDistribution(GetStreamingDistributionRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetStreamingDistributionRequestMarshaller.Instance;options.ResponseUnmarshaller = GetStreamingDistributionResponseUnmarshaller.Instance;return Invoke<GetStreamingDistributionResponse>(request, options);}",
    "output": "public GetStreamingDistributionResult getStreamingDistribution(GetStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistribution(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTrialComponentsResult listTrialComponents(ListTrialComponentsRequest request) {request = beforeClientExecution(request);return executeListTrialComponents(request);}",
    "output": "public virtual ListTrialComponentsResponse ListTrialComponents(ListTrialComponentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrialComponentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrialComponentsResponseUnmarshaller.Instance;return Invoke<ListTrialComponentsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTrialComponentsResponse ListTrialComponents(ListTrialComponentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrialComponentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrialComponentsResponseUnmarshaller.Instance;return Invoke<ListTrialComponentsResponse>(request, options);}",
    "output": "public ListTrialComponentsResult listTrialComponents(ListTrialComponentsRequest request) {request = beforeClientExecution(request);return executeListTrialComponents(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer putShort(int index, short value) {throw new ReadOnlyBufferException();}",
    "output": "public override java.nio.ByteBuffer putShort(int index, short value){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer putShort(int index, short value){throw new System.NotImplementedException();}",
    "output": "public ByteBuffer putShort(int index, short value) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int compareNormalised(NormalisedDecimal other) {int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp != 0) {return cmp;}if (_wholePart > other._wholePart) {return 1;}if (_wholePart < other._wholePart) {return -1;}return _fractionalPart - other._fractionalPart;}",
    "output": "public int CompareNormalised(NormalisedDecimal other){int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp != 0){return cmp;}if (_wholePart > other._wholePart){return 1;}if (_wholePart < other._wholePart){return -1;}return _fractionalPart - other._fractionalPart;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int CompareNormalised(NormalisedDecimal other){int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp != 0){return cmp;}if (_wholePart > other._wholePart){return 1;}if (_wholePart < other._wholePart){return -1;}return _fractionalPart - other._fractionalPart;}",
    "output": "public int compareNormalised(NormalisedDecimal other) {int cmp = _relativeDecimalExponent - other._relativeDecimalExponent;if (cmp != 0) {return cmp;}if (_wholePart > other._wholePart) {return 1;}if (_wholePart < other._wholePart) {return -1;}return _fractionalPart - other._fractionalPart;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new JapaneseKatakanaStemFilter(input, minimumLength);}",
    "output": "public override TokenStream Create(TokenStream input){return new JapaneseKatakanaStemFilter(input, minimumLength);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new JapaneseKatakanaStemFilter(input, minimumLength);}",
    "output": "public TokenStream create(TokenStream input) {return new JapaneseKatakanaStemFilter(input, minimumLength);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public EnableAvailabilityZonesForLoadBalancerResult enableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request) {request = beforeClientExecution(request);return executeEnableAvailabilityZonesForLoadBalancer(request);}",
    "output": "public virtual EnableAvailabilityZonesForLoadBalancerResponse EnableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableAvailabilityZonesForLoadBalancerRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller.Instance;return Invoke<EnableAvailabilityZonesForLoadBalancerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual EnableAvailabilityZonesForLoadBalancerResponse EnableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableAvailabilityZonesForLoadBalancerRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableAvailabilityZonesForLoadBalancerResponseUnmarshaller.Instance;return Invoke<EnableAvailabilityZonesForLoadBalancerResponse>(request, options);}",
    "output": "public EnableAvailabilityZonesForLoadBalancerResult enableAvailabilityZonesForLoadBalancer(EnableAvailabilityZonesForLoadBalancerRequest request) {request = beforeClientExecution(request);return executeEnableAvailabilityZonesForLoadBalancer(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateEnvironmentResult updateEnvironment(UpdateEnvironmentRequest request) {request = beforeClientExecution(request);return executeUpdateEnvironment(request);}",
    "output": "public virtual UpdateEnvironmentResponse UpdateEnvironment(UpdateEnvironmentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEnvironmentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEnvironmentResponseUnmarshaller.Instance;return Invoke<UpdateEnvironmentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateEnvironmentResponse UpdateEnvironment(UpdateEnvironmentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateEnvironmentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateEnvironmentResponseUnmarshaller.Instance;return Invoke<UpdateEnvironmentResponse>(request, options);}",
    "output": "public UpdateEnvironmentResult updateEnvironment(UpdateEnvironmentRequest request) {request = beforeClientExecution(request);return executeUpdateEnvironment(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTagsForDomainResult listTagsForDomain(ListTagsForDomainRequest request) {request = beforeClientExecution(request);return executeListTagsForDomain(request);}",
    "output": "public virtual ListTagsForDomainResponse ListTagsForDomain(ListTagsForDomainRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTagsForDomainRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTagsForDomainResponseUnmarshaller.Instance;return Invoke<ListTagsForDomainResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTagsForDomainResponse ListTagsForDomain(ListTagsForDomainRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTagsForDomainRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTagsForDomainResponseUnmarshaller.Instance;return Invoke<ListTagsForDomainResponse>(request, options);}",
    "output": "public ListTagsForDomainResult listTagsForDomain(ListTagsForDomainRequest request) {request = beforeClientExecution(request);return executeListTagsForDomain(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static double log(double base, double x) {return Math.log(x) / Math.log(base);}",
    "output": "public static double Log(double @base, double x){return Math.Log(x) / Math.Log(@base);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static double Log(double @base, double x){return Math.Log(x) / Math.Log(@base);}",
    "output": "public static double log(double base, double x) {return Math.log(x) / Math.log(base);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void writeBoolean(boolean val) throws IOException {out.write(val ? 1 : 0);written++;}",
    "output": "public virtual void writeBoolean(bool val){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void writeBoolean(bool val){throw new System.NotImplementedException();}",
    "output": "public final void writeBoolean(boolean val) throws IOException {out.write(val ? 1 : 0);written++;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object other) {if (!(other instanceof ByteBuffer)) {return false;}ByteBuffer otherBuffer = (ByteBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}",
    "output": "public override bool Equals(object other){if (!(other is java.nio.ByteBuffer)){return false;}java.nio.ByteBuffer otherBuffer = (java.nio.ByteBuffer)other;if (remaining() != otherBuffer.remaining()){return false;}int myPosition = _position;int otherPosition = otherBuffer._position;bool equalSoFar = true;while (equalSoFar && (myPosition < _limit)){equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object other){if (!(other is java.nio.ByteBuffer)){return false;}java.nio.ByteBuffer otherBuffer = (java.nio.ByteBuffer)other;if (remaining() != otherBuffer.remaining()){return false;}int myPosition = _position;int otherPosition = otherBuffer._position;bool equalSoFar = true;while (equalSoFar && (myPosition < _limit)){equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}",
    "output": "public boolean equals(Object other) {if (!(other instanceof ByteBuffer)) {return false;}ByteBuffer otherBuffer = (ByteBuffer) other;if (remaining() != otherBuffer.remaining()) {return false;}int myPosition = position;int otherPosition = otherBuffer.position;boolean equalSoFar = true;while (equalSoFar && (myPosition < limit)) {equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);}return equalSoFar;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeVirtualGatewaysResult describeVirtualGateways() {return describeVirtualGateways(new DescribeVirtualGatewaysRequest());}",
    "output": "public virtual DescribeVirtualGatewaysResponse DescribeVirtualGateways(){return DescribeVirtualGateways(new DescribeVirtualGatewaysRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeVirtualGatewaysResponse DescribeVirtualGateways(){return DescribeVirtualGateways(new DescribeVirtualGatewaysRequest());}",
    "output": "public DescribeVirtualGatewaysResult describeVirtualGateways() {return describeVirtualGateways(new DescribeVirtualGatewaysRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FieldConfig getFieldConfig(String fieldName) {FieldConfig fieldConfig = new FieldConfig(StringUtils.toString(fieldName));for (FieldConfigListener listener : this.listeners) {listener.buildFieldConfig(fieldConfig);}return fieldConfig;}",
    "output": "public virtual FieldConfig GetFieldConfig(string fieldName){FieldConfig fieldConfig = new FieldConfig(StringUtils.ToString(fieldName));foreach (IFieldConfigListener listener in this.listeners){listener.BuildFieldConfig(fieldConfig);}return fieldConfig;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual FieldConfig GetFieldConfig(string fieldName){FieldConfig fieldConfig = new FieldConfig(StringUtils.ToString(fieldName));foreach (IFieldConfigListener listener in this.listeners){listener.BuildFieldConfig(fieldConfig);}return fieldConfig;}",
    "output": "public FieldConfig getFieldConfig(String fieldName) {FieldConfig fieldConfig = new FieldConfig(StringUtils.toString(fieldName));for (FieldConfigListener listener : this.listeners) {listener.buildFieldConfig(fieldConfig);}return fieldConfig;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setProperty(Row row, int column) {Cell cell = CellUtil.getCell(row, column);CellUtil.setCellStyleProperty(cell, _propertyName, _propertyValue);}",
    "output": "public void SetProperty(IRow row, int column){ICell cell = CellUtil.GetCell(row, column);CellUtil.SetCellStyleProperty(cell, _workbook, _propertyName, _propertyValue);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void SetProperty(IRow row, int column){ICell cell = CellUtil.GetCell(row, column);CellUtil.SetCellStyleProperty(cell, _workbook, _propertyName, _propertyValue);}",
    "output": "public void setProperty(Row row, int column) {Cell cell = CellUtil.getCell(row, column);CellUtil.setCellStyleProperty(cell, _propertyName, _propertyValue);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RebootInstancesResult rebootInstances(RebootInstancesRequest request) {request = beforeClientExecution(request);return executeRebootInstances(request);}",
    "output": "public virtual RebootInstancesResponse RebootInstances(RebootInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = RebootInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = RebootInstancesResponseUnmarshaller.Instance;return Invoke<RebootInstancesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RebootInstancesResponse RebootInstances(RebootInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = RebootInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = RebootInstancesResponseUnmarshaller.Instance;return Invoke<RebootInstancesResponse>(request, options);}",
    "output": "public RebootInstancesResult rebootInstances(RebootInstancesRequest request) {request = beforeClientExecution(request);return executeRebootInstances(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Predicate(int ruleIndex, int predIndex, boolean isCtxDependent) {this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}",
    "output": "public Predicate(int ruleIndex, int predIndex, bool isCtxDependent){this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Predicate(int ruleIndex, int predIndex, bool isCtxDependent){this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}",
    "output": "public Predicate(int ruleIndex, int predIndex, boolean isCtxDependent) {this.ruleIndex = ruleIndex;this.predIndex = predIndex;this.isCtxDependent = isCtxDependent;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void fillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right  = findBiggest(xPoints);int bottom = findBiggest(yPoints);int left   = findSmallest(xPoints);int top    = findSmallest(yPoints);HSSFPolygon shape = escherGroup.createPolygon(new HSSFChildAnchor(left,top,right,bottom) );shape.setPolygonDrawArea(right - left, bottom - top);shape.setPoints(addToAll(xPoints, -left), addToAll(yPoints, -top));shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());}",
    "output": "public void FillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right = FindBiggest(xPoints);int bottom = FindBiggest(yPoints);int left = FindSmallest(xPoints);int top = FindSmallest(yPoints);HSSFPolygon shape = escherGroup.CreatePolygon(new HSSFChildAnchor(left, top, right, bottom));shape.SetPolygonDrawArea(right - left, bottom - top);shape.SetPoints(AddToAll(xPoints, -left), AddToAll(yPoints, -top));shape.SetLineStyleColor(foreground.R, foreground.G, foreground.B);shape.SetFillColor(foreground.R, foreground.G, foreground.B);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void FillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right = FindBiggest(xPoints);int bottom = FindBiggest(yPoints);int left = FindSmallest(xPoints);int top = FindSmallest(yPoints);HSSFPolygon shape = escherGroup.CreatePolygon(new HSSFChildAnchor(left, top, right, bottom));shape.SetPolygonDrawArea(right - left, bottom - top);shape.SetPoints(AddToAll(xPoints, -left), AddToAll(yPoints, -top));shape.SetLineStyleColor(foreground.R, foreground.G, foreground.B);shape.SetFillColor(foreground.R, foreground.G, foreground.B);}",
    "output": "public void fillPolygon(int[] xPoints, int[] yPoints,int nPoints){int right  = findBiggest(xPoints);int bottom = findBiggest(yPoints);int left   = findSmallest(xPoints);int top    = findSmallest(yPoints);HSSFPolygon shape = escherGroup.createPolygon(new HSSFChildAnchor(left,top,right,bottom) );shape.setPolygonDrawArea(right - left, bottom - top);shape.setPoints(addToAll(xPoints, -left), addToAll(yPoints, -top));shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListEventsRequest() {super(\"Status\", \"2020-01-17\", \"ListEvents\", \"StatusAPI\");setMethod(MethodType.POST);}",
    "output": "public ListEventsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListEvents\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ListEventsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListEvents\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public ListEventsRequest() {super(\"Status\", \"2020-01-17\", \"ListEvents\", \"StatusAPI\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListIAMPolicyAssignmentsResult listIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request) {request = beforeClientExecution(request);return executeListIAMPolicyAssignments(request);}",
    "output": "public virtual ListIAMPolicyAssignmentsResponse ListIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIAMPolicyAssignmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIAMPolicyAssignmentsResponseUnmarshaller.Instance;return Invoke<ListIAMPolicyAssignmentsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListIAMPolicyAssignmentsResponse ListIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIAMPolicyAssignmentsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIAMPolicyAssignmentsResponseUnmarshaller.Instance;return Invoke<ListIAMPolicyAssignmentsResponse>(request, options);}",
    "output": "public ListIAMPolicyAssignmentsResult listIAMPolicyAssignments(ListIAMPolicyAssignmentsRequest request) {request = beforeClientExecution(request);return executeListIAMPolicyAssignments(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CountingOutputStream(OutputStream out) {this.out = out;}",
    "output": "public CountingOutputStream(OutputStream @out){this.@out = @out;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CountingOutputStream(OutputStream @out){this.@out = @out;}",
    "output": "public CountingOutputStream(OutputStream out) {this.out = out;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = BytesRef.deepCopyOf(target);seekPending = true;}}",
    "output": "public override void SeekExact(BytesRef target, TermState otherState){if (!target.Equals(term)){state.CopyFrom(otherState);term = BytesRef.DeepCopyOf(target);seekPending = true;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SeekExact(BytesRef target, TermState otherState){if (!target.Equals(term)){state.CopyFrom(otherState);term = BytesRef.DeepCopyOf(target);seekPending = true;}}",
    "output": "public void seekExact(BytesRef target, TermState otherState) {if (!target.equals(term)) {state.copyFrom(otherState);term = BytesRef.deepCopyOf(target);seekPending = true;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void seek(long pos) throws IOException {if (pos != getFilePointer()) {final long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos-bufferSize;final int delta = (int) (pos - alignedPos);if (delta != 0) {refill();buffer.position(delta);bufferPos = delta;} else {bufferPos = bufferSize;}}}",
    "output": "public void seek(long pos) throws IOException{if (pos != FilePointer){long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos - bufferSize;int delta = (int)(pos - alignedPos);if (delta != 0){refill();buffer.position(delta);bufferPos = delta;}else{bufferPos = bufferSize;}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void seek(long pos) throws IOException{if (pos != FilePointer){long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos - bufferSize;int delta = (int)(pos - alignedPos);if (delta != 0){refill();buffer.position(delta);bufferPos = delta;}else{bufferPos = bufferSize;}}}",
    "output": "public void seek(long pos) throws IOException {if (pos != getFilePointer()) {final long alignedPos = pos & ALIGN_NOT_MASK;filePos = alignedPos-bufferSize;final int delta = (int) (pos - alignedPos);if (delta != 0) {refill();buffer.position(delta);bufferPos = delta;} else {bufferPos = bufferSize;}}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {removeAllElements();}",
    "output": "public override void clear(){removeAllElements();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void clear(){removeAllElements();}",
    "output": "public void clear() {removeAllElements();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public QueryCustomerByPhoneRequest() {super(\"xspace\", \"2017-07-20\", \"QueryCustomerByPhone\");setUriPattern(\"/customerbyphone\");setMethod(MethodType.POST);}",
    "output": "public QueryCustomerByPhoneRequest(): base(\"xspace\", \"2017-07-20\", \"QueryCustomerByPhone\"){UriPattern = \"/customerbyphone\";Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public QueryCustomerByPhoneRequest(): base(\"xspace\", \"2017-07-20\", \"QueryCustomerByPhone\"){UriPattern = \"/customerbyphone\";Method = MethodType.POST;}",
    "output": "public QueryCustomerByPhoneRequest() {super(\"xspace\", \"2017-07-20\", \"QueryCustomerByPhone\");setUriPattern(\"/customerbyphone\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return this.evaluate(srcRowIndex, srcColumnIndex, arg0, null);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return this.Evaluate(srcRowIndex, srcColumnIndex, arg0, null);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return this.Evaluate(srcRowIndex, srcColumnIndex, arg0, null);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return this.evaluate(srcRowIndex, srcColumnIndex, arg0, null);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListDashboardVersionsResult listDashboardVersions(ListDashboardVersionsRequest request) {request = beforeClientExecution(request);return executeListDashboardVersions(request);}",
    "output": "public virtual ListDashboardVersionsResponse ListDashboardVersions(ListDashboardVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListDashboardVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListDashboardVersionsResponseUnmarshaller.Instance;return Invoke<ListDashboardVersionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListDashboardVersionsResponse ListDashboardVersions(ListDashboardVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListDashboardVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListDashboardVersionsResponseUnmarshaller.Instance;return Invoke<ListDashboardVersionsResponse>(request, options);}",
    "output": "public ListDashboardVersionsResult listDashboardVersions(ListDashboardVersionsRequest request) {request = beforeClientExecution(request);return executeListDashboardVersions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}",
    "output": "public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}backingArray[offset + _position++] = c;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.IntBuffer put(int c){if (_position == _limit){throw new java.nio.BufferOverflowException();}backingArray[offset + _position++] = c;return this;}",
    "output": "public IntBuffer put(int c) {if (position == limit) {throw new BufferOverflowException();}backingArray[offset + position++] = c;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteHostedZoneResult deleteHostedZone(DeleteHostedZoneRequest request) {request = beforeClientExecution(request);return executeDeleteHostedZone(request);}",
    "output": "public virtual DeleteHostedZoneResponse DeleteHostedZone(DeleteHostedZoneRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteHostedZoneRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteHostedZoneResponseUnmarshaller.Instance;return Invoke<DeleteHostedZoneResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteHostedZoneResponse DeleteHostedZone(DeleteHostedZoneRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteHostedZoneRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteHostedZoneResponseUnmarshaller.Instance;return Invoke<DeleteHostedZoneResponse>(request, options);}",
    "output": "public DeleteHostedZoneResult deleteHostedZone(DeleteHostedZoneRequest request) {request = beforeClientExecution(request);return executeDeleteHostedZone(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateReceiptRuleResult createReceiptRule(CreateReceiptRuleRequest request) {request = beforeClientExecution(request);return executeCreateReceiptRule(request);}",
    "output": "public virtual CreateReceiptRuleResponse CreateReceiptRule(CreateReceiptRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateReceiptRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateReceiptRuleResponseUnmarshaller.Instance;return Invoke<CreateReceiptRuleResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateReceiptRuleResponse CreateReceiptRule(CreateReceiptRuleRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateReceiptRuleRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateReceiptRuleResponseUnmarshaller.Instance;return Invoke<CreateReceiptRuleResponse>(request, options);}",
    "output": "public CreateReceiptRuleResult createReceiptRule(CreateReceiptRuleRequest request) {request = beforeClientExecution(request);return executeCreateReceiptRule(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Result rename() throws IOException {try {result = doRename();return result;} catch (IOException err) {result = Result.IO_FAILURE;throw err;}}",
    "output": "public virtual RefUpdate.Result Rename(){try{result = DoRename();return result;}catch (IOException err){result = RefUpdate.Result.IO_FAILURE;throw;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RefUpdate.Result Rename(){try{result = DoRename();return result;}catch (IOException err){result = RefUpdate.Result.IO_FAILURE;throw;}}",
    "output": "public Result rename() throws IOException {try {result = doRename();return result;} catch (IOException err) {result = Result.IO_FAILURE;throw err;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeDBInstancesResult describeDBInstances() {return describeDBInstances(new DescribeDBInstancesRequest());}",
    "output": "public virtual DescribeDBInstancesResponse DescribeDBInstances(){return DescribeDBInstances(new DescribeDBInstancesRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeDBInstancesResponse DescribeDBInstances(){return DescribeDBInstances(new DescribeDBInstancesRequest());}",
    "output": "public DescribeDBInstancesResult describeDBInstances() {return describeDBInstances(new DescribeDBInstancesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {if (label != null) {return label + \":\" + tag;}return tag;}",
    "output": "public override string ToString(){return ruleName + \":\" + bypassTokenType;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return ruleName + \":\" + bypassTokenType;}",
    "output": "public String toString() {if (label != null) {return label + \":\" + tag;}return tag;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {return \"[DELETEDCHILD]\";}",
    "output": "public override string ToQueryString(IEscapeQuerySyntax escaper){return \"[DELETEDCHILD]\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToQueryString(IEscapeQuerySyntax escaper){return \"[DELETEDCHILD]\";}",
    "output": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {return \"[DELETEDCHILD]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateAccountResult createAccount(CreateAccountRequest request) {request = beforeClientExecution(request);return executeCreateAccount(request);}",
    "output": "public virtual CreateAccountResponse CreateAccount(CreateAccountRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateAccountRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateAccountResponseUnmarshaller.Instance;return Invoke<CreateAccountResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateAccountResponse CreateAccount(CreateAccountRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateAccountRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateAccountResponseUnmarshaller.Instance;return Invoke<CreateAccountResponse>(request, options);}",
    "output": "public CreateAccountResult createAccount(CreateAccountRequest request) {request = beforeClientExecution(request);return executeCreateAccount(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Map.Entry<K,V> next() {HashEntry<K,V> e = super.nextEntry();return new WriteThroughEntry(e.key, e.value);}",
    "output": "public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.util.MapClass.Entry<K, V> next(){return this.nextEntry();}",
    "output": "public Map.Entry<K,V> next() {HashEntry<K,V> e = super.nextEntry();return new WriteThroughEntry(e.key, e.value);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BaseRef(RefEval re) {_refEval = re;_areaEval = null;_firstRowIndex = re.getRow();_firstColumnIndex = re.getColumn();_height = 1;_width = 1;}",
    "output": "public BaseRef(RefEval re){_refEval = re;_areaEval = null;_firstRowIndex = re.Row;_firstColumnIndex = re.Column;_height = 1;_width = 1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BaseRef(RefEval re){_refEval = re;_areaEval = null;_firstRowIndex = re.Row;_firstColumnIndex = re.Column;_height = 1;_width = 1;}",
    "output": "public BaseRef(RefEval re) {_refEval = re;_areaEval = null;_firstRowIndex = re.getRow();_firstColumnIndex = re.getColumn();_height = 1;_width = 1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (block >>> shift) & 3;}}}",
    "output": "public override void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2){values[valuesOffset++] = ((long)((ulong)block >> shift)) & 3;}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2){values[valuesOffset++] = ((long)((ulong)block >> shift)) & 3;}}}",
    "output": "public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (block >>> shift) & 3;}}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void unrollRecursionContexts(ParserRuleContext _parentctx) {_precedenceStack.pop();_ctx.stop = _input.LT(-1);ParserRuleContext retctx = _ctx; if ( _parseListeners != null ) {while ( _ctx != _parentctx ) {triggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.parent;}}else {_ctx = _parentctx;}retctx.parent = _parentctx;if (_buildParseTrees && _parentctx != null) {_parentctx.addChild(retctx);}}",
    "output": "public virtual void UnrollRecursionContexts(ParserRuleContext _parentctx){_precedenceStack.RemoveAt(_precedenceStack.Count - 1);_ctx.Stop = _input.LT(-1);ParserRuleContext retctx = _ctx;if (_parseListeners != null){while (_ctx != _parentctx){TriggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.Parent;}}else{_ctx = _parentctx;}retctx.Parent = _parentctx;if (_buildParseTrees && _parentctx != null){_parentctx.AddChild(retctx);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void UnrollRecursionContexts(ParserRuleContext _parentctx){_precedenceStack.RemoveAt(_precedenceStack.Count - 1);_ctx.Stop = _input.LT(-1);ParserRuleContext retctx = _ctx;if (_parseListeners != null){while (_ctx != _parentctx){TriggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.Parent;}}else{_ctx = _parentctx;}retctx.Parent = _parentctx;if (_buildParseTrees && _parentctx != null){_parentctx.AddChild(retctx);}}",
    "output": "public void unrollRecursionContexts(ParserRuleContext _parentctx) {_precedenceStack.pop();_ctx.stop = _input.LT(-1);ParserRuleContext retctx = _ctx; if ( _parseListeners != null ) {while ( _ctx != _parentctx ) {triggerExitRuleEvent();_ctx = (ParserRuleContext)_ctx.parent;}}else {_ctx = _parentctx;}retctx.parent = _parentctx;if (_buildParseTrees && _parentctx != null) {_parentctx.addChild(retctx);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CancelBundleTaskRequest(String bundleId) {setBundleId(bundleId);}",
    "output": "public CancelBundleTaskRequest(string bundleId){_bundleId = bundleId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CancelBundleTaskRequest(string bundleId){_bundleId = bundleId;}",
    "output": "public CancelBundleTaskRequest(String bundleId) {setBundleId(bundleId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void add(CharsRef input, CharsRef output, boolean includeOrig) {add(input, countWords(input), output, countWords(output), includeOrig);}",
    "output": "public virtual void Add(CharsRef input, CharsRef output, bool includeOrig){Add(input, CountWords(input), output, CountWords(output), includeOrig);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Add(CharsRef input, CharsRef output, bool includeOrig){Add(input, CountWords(input), output, CountWords(output), includeOrig);}",
    "output": "public void add(CharsRef input, CharsRef output, boolean includeOrig) {add(input, countWords(input), output, countWords(output), includeOrig);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SetIdentityDkimEnabledResult setIdentityDkimEnabled(SetIdentityDkimEnabledRequest request) {request = beforeClientExecution(request);return executeSetIdentityDkimEnabled(request);}",
    "output": "public virtual SetIdentityDkimEnabledResponse SetIdentityDkimEnabled(SetIdentityDkimEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetIdentityDkimEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = SetIdentityDkimEnabledResponseUnmarshaller.Instance;return Invoke<SetIdentityDkimEnabledResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SetIdentityDkimEnabledResponse SetIdentityDkimEnabled(SetIdentityDkimEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetIdentityDkimEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = SetIdentityDkimEnabledResponseUnmarshaller.Instance;return Invoke<SetIdentityDkimEnabledResponse>(request, options);}",
    "output": "public SetIdentityDkimEnabledResult setIdentityDkimEnabled(SetIdentityDkimEnabledRequest request) {request = beforeClientExecution(request);return executeSetIdentityDkimEnabled(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetResolverEndpointResult getResolverEndpoint(GetResolverEndpointRequest request) {request = beforeClientExecution(request);return executeGetResolverEndpoint(request);}",
    "output": "public virtual GetResolverEndpointResponse GetResolverEndpoint(GetResolverEndpointRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetResolverEndpointRequestMarshaller.Instance;options.ResponseUnmarshaller = GetResolverEndpointResponseUnmarshaller.Instance;return Invoke<GetResolverEndpointResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetResolverEndpointResponse GetResolverEndpoint(GetResolverEndpointRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetResolverEndpointRequestMarshaller.Instance;options.ResponseUnmarshaller = GetResolverEndpointResponseUnmarshaller.Instance;return Invoke<GetResolverEndpointResponse>(request, options);}",
    "output": "public GetResolverEndpointResult getResolverEndpoint(GetResolverEndpointRequest request) {request = beforeClientExecution(request);return executeGetResolverEndpoint(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setText(String value) {string = value;start = offset = 0;end = value.length();}",
    "output": "public void setText(string value){@string = value;start = offset = 0;end = value.Length;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void setText(string value){@string = value;start = offset = 0;end = value.Length;}",
    "output": "public void setText(String value) {string = value;start = offset = 0;end = value.length();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return toString(0);}",
    "output": "public override string ToString(){return ToString(0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return ToString(0);}",
    "output": "public String toString() {return toString(0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void adjustIndex(int offset) {_firstSheetIndex += offset;_lastSheetIndex += offset;}",
    "output": "public void AdjustIndex(int offset){_firstSheetIndex += offset;_lastSheetIndex += offset;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void AdjustIndex(int offset){_firstSheetIndex += offset;_lastSheetIndex += offset;}",
    "output": "public void adjustIndex(int offset) {_firstSheetIndex += offset;_lastSheetIndex += offset;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GalicianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public GalicianStemFilterFactory(IDictionary<string, string> args): base(args){if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GalicianStemFilterFactory(IDictionary<string, string> args): base(args){if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public GalicianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListRepositoryAssociationsResult listRepositoryAssociations(ListRepositoryAssociationsRequest request) {request = beforeClientExecution(request);return executeListRepositoryAssociations(request);}",
    "output": "public virtual ListRepositoryAssociationsResponse ListRepositoryAssociations(ListRepositoryAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListRepositoryAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListRepositoryAssociationsResponseUnmarshaller.Instance;return Invoke<ListRepositoryAssociationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListRepositoryAssociationsResponse ListRepositoryAssociations(ListRepositoryAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListRepositoryAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListRepositoryAssociationsResponseUnmarshaller.Instance;return Invoke<ListRepositoryAssociationsResponse>(request, options);}",
    "output": "public ListRepositoryAssociationsResult listRepositoryAssociations(ListRepositoryAssociationsRequest request) {request = beforeClientExecution(request);return executeListRepositoryAssociations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setParams(String params) {super.setParams(params);maxNumSegments = (int)Double.parseDouble(params);}",
    "output": "public override void SetParams(string @params){base.SetParams(@params);maxNumSegments = (int)double.Parse(@params, CultureInfo.InvariantCulture);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SetParams(string @params){base.SetParams(@params);maxNumSegments = (int)double.Parse(@params, CultureInfo.InvariantCulture);}",
    "output": "public void setParams(String params) {super.setParams(params);maxNumSegments = (int)Double.parseDouble(params);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public char getChar() {return (char) getShort();}",
    "output": "public override char getChar(){return (char)getShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override char getChar(){return (char)getShort();}",
    "output": "public char getChar() {return (char) getShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void next(int delta) {if (delta == 1) {prevPtr = currPtr;currPtr = nextPtr;if (!eof())parseEntry();return;}final int end = raw.length;int ptr = nextPtr;while (--delta > 0 && ptr != end) {prevPtr = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (delta != 0)throw new ArrayIndexOutOfBoundsException(delta);currPtr = ptr;if (!eof())parseEntry();}",
    "output": "public override void Next(int delta){if (delta == 1){prevPtr = currPtr;currPtr = nextPtr;if (!Eof){ParseEntry();}return;}int end = raw.Length;int ptr = nextPtr;while (--delta > 0 && ptr != end){prevPtr = ptr;while (raw[ptr] != 0){ptr++;}ptr += Constants.OBJECT_ID_LENGTH + 1;}if (delta != 0){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}currPtr = ptr;if (!Eof){ParseEntry();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Next(int delta){if (delta == 1){prevPtr = currPtr;currPtr = nextPtr;if (!Eof){ParseEntry();}return;}int end = raw.Length;int ptr = nextPtr;while (--delta > 0 && ptr != end){prevPtr = ptr;while (raw[ptr] != 0){ptr++;}ptr += Constants.OBJECT_ID_LENGTH + 1;}if (delta != 0){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}currPtr = ptr;if (!Eof){ParseEntry();}}",
    "output": "public void next(int delta) {if (delta == 1) {prevPtr = currPtr;currPtr = nextPtr;if (!eof())parseEntry();return;}final int end = raw.length;int ptr = nextPtr;while (--delta > 0 && ptr != end) {prevPtr = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (delta != 0)throw new ArrayIndexOutOfBoundsException(delta);currPtr = ptr;if (!eof())parseEntry();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Type getType() {return type;}",
    "output": "public virtual ReceiveCommand.Type GetType(){return type;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ReceiveCommand.Type GetType(){return type;}",
    "output": "public Type getType() {return type;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharBuffer duplicate() {return copy(this, mark);}",
    "output": "public override java.nio.CharBuffer duplicate(){return copy(this, _mark);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.CharBuffer duplicate(){return copy(this, _mark);}",
    "output": "public CharBuffer duplicate() {return copy(this, mark);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NGramFilterFactory(Map<String, String> args) {super(args);minGramSize = requireInt(args, \"minGramSize\");maxGramSize = requireInt(args, \"maxGramSize\");preserveOriginal = getBoolean(args, \"preserveOriginal\", NGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public NGramFilterFactory(IDictionary<string, string> args): base(args){minGramSize = GetInt32(args, \"minGramSize\", NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = GetInt32(args, \"maxGramSize\", NGramTokenFilter.DEFAULT_MAX_NGRAM_SIZE);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NGramFilterFactory(IDictionary<string, string> args): base(args){minGramSize = GetInt32(args, \"minGramSize\", NGramTokenFilter.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = GetInt32(args, \"maxGramSize\", NGramTokenFilter.DEFAULT_MAX_NGRAM_SIZE);if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public NGramFilterFactory(Map<String, String> args) {super(args);minGramSize = requireInt(args, \"minGramSize\");maxGramSize = requireInt(args, \"maxGramSize\");preserveOriginal = getBoolean(args, \"preserveOriginal\", NGramTokenFilter.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AddRoleToDBClusterResult addRoleToDBCluster(AddRoleToDBClusterRequest request) {request = beforeClientExecution(request);return executeAddRoleToDBCluster(request);}",
    "output": "public virtual AddRoleToDBClusterResponse AddRoleToDBCluster(AddRoleToDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddRoleToDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = AddRoleToDBClusterResponseUnmarshaller.Instance;return Invoke<AddRoleToDBClusterResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AddRoleToDBClusterResponse AddRoleToDBCluster(AddRoleToDBClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddRoleToDBClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = AddRoleToDBClusterResponseUnmarshaller.Instance;return Invoke<AddRoleToDBClusterResponse>(request, options);}",
    "output": "public AddRoleToDBClusterResult addRoleToDBCluster(AddRoleToDBClusterRequest request) {request = beforeClientExecution(request);return executeAddRoleToDBCluster(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BlameGenerator setTextComparator(RawTextComparator comparator) {textComparator = comparator;return this;}",
    "output": "public virtual NGit.Blame.BlameGenerator SetTextComparator(RawTextComparator comparator){textComparator = comparator;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Blame.BlameGenerator SetTextComparator(RawTextComparator comparator){textComparator = comparator;return this;}",
    "output": "public BlameGenerator setTextComparator(RawTextComparator comparator) {textComparator = comparator;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public  PatternCaptureGroupFilterFactory(Map<String,String> args) {super(args);pattern = getPattern(args, \"pattern\");preserveOriginal = args.containsKey(\"preserve_original\") ? Boolean.parseBoolean(args.get(\"preserve_original\")) : true;}",
    "output": "public PatternCaptureGroupFilterFactory(IDictionary<string, string> args): base(args){pattern = GetPattern(args, \"pattern\");preserveOriginal = args.TryGetValue(\"preserve_original\", out string value) ? bool.Parse(value) : true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PatternCaptureGroupFilterFactory(IDictionary<string, string> args): base(args){pattern = GetPattern(args, \"pattern\");preserveOriginal = args.TryGetValue(\"preserve_original\", out string value) ? bool.Parse(value) : true;}",
    "output": "public  PatternCaptureGroupFilterFactory(Map<String,String> args) {super(args);pattern = getPattern(args, \"pattern\");preserveOriginal = args.containsKey(\"preserve_original\") ? Boolean.parseBoolean(args.get(\"preserve_original\")) : true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateObjectResult createObject(CreateObjectRequest request) {request = beforeClientExecution(request);return executeCreateObject(request);}",
    "output": "public virtual CreateObjectResponse CreateObject(CreateObjectRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateObjectRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateObjectResponseUnmarshaller.Instance;return Invoke<CreateObjectResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateObjectResponse CreateObject(CreateObjectRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateObjectRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateObjectResponseUnmarshaller.Instance;return Invoke<CreateObjectResponse>(request, options);}",
    "output": "public CreateObjectResult createObject(CreateObjectRequest request) {request = beforeClientExecution(request);return executeCreateObject(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public String getActions() { return null; }",
    "output": "public override string getActions(){return null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string getActions(){return null;}",
    "output": "@Override public String getActions() { return null; }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void onChanged() {if (mAdapter != null) {post(new Runnable());}}",
    "output": "public override void onChanged(){if (this._enclosing.isShowing()){this._enclosing.show();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void onChanged(){if (this._enclosing.isShowing()){this._enclosing.show();}}",
    "output": "public void onChanged() {if (mAdapter != null) {post(new Runnable());}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateResourceGroupResult createResourceGroup(CreateResourceGroupRequest request) {request = beforeClientExecution(request);return executeCreateResourceGroup(request);}",
    "output": "public virtual CreateResourceGroupResponse CreateResourceGroup(CreateResourceGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateResourceGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateResourceGroupResponseUnmarshaller.Instance;return Invoke<CreateResourceGroupResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateResourceGroupResponse CreateResourceGroup(CreateResourceGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateResourceGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateResourceGroupResponseUnmarshaller.Instance;return Invoke<CreateResourceGroupResponse>(request, options);}",
    "output": "public CreateResourceGroupResult createResourceGroup(CreateResourceGroupRequest request) {request = beforeClientExecution(request);return executeCreateResourceGroup(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static RevFilter has(RevFlag a) {final RevFlagSet s = new RevFlagSet();s.add(a);return new HasAll(s);}",
    "output": "public static RevFilter Has(RevFlag a){RevFlagSet s = new RevFlagSet();s.AddItem(a);return new RevFlagFilter.HasAll(s);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static RevFilter Has(RevFlag a){RevFlagSet s = new RevFlagSet();s.AddItem(a);return new RevFlagFilter.HasAll(s);}",
    "output": "public static RevFilter has(RevFlag a) {final RevFlagSet s = new RevFlagSet();s.add(a);return new HasAll(s);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public int size() {return totalSize;}",
    "output": "public override int size(){return this._enclosing._size;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int size(){return this._enclosing._size;}",
    "output": "@Override public int size() {return totalSize;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_index_extern_sheet);out.writeInt(unused1);}",
    "output": "public override void Write(ILittleEndianOutput out1){out1.WriteByte(sid + PtgClass);out1.WriteShort(field_1_index_extern_sheet);out1.WriteInt(unused1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Write(ILittleEndianOutput out1){out1.WriteByte(sid + PtgClass);out1.WriteShort(field_1_index_extern_sheet);out1.WriteInt(unused1);}",
    "output": "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_index_extern_sheet);out.writeInt(unused1);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return this.getClass().getSimpleName() + \"@\" + directory + \" lockFactory=\" + lockFactory;}",
    "output": "public override string ToString(){return this.GetType().Name + \"@\" + m_directory + \" lockFactory=\" + LockFactory;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return this.GetType().Name + \"@\" + m_directory + \" lockFactory=\" + LockFactory;}",
    "output": "public String toString() {return this.getClass().getSimpleName() + \"@\" + directory + \" lockFactory=\" + lockFactory;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}",
    "output": "public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){switch (args.Length){case 3:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex){switch (args.Length){case 3:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}",
    "output": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {switch (args.length) {case 3:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);case 4:return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2], args[3]);}return ErrorEval.VALUE_INVALID;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CancelDataRepositoryTaskResult cancelDataRepositoryTask(CancelDataRepositoryTaskRequest request) {request = beforeClientExecution(request);return executeCancelDataRepositoryTask(request);}",
    "output": "public virtual CancelDataRepositoryTaskResponse CancelDataRepositoryTask(CancelDataRepositoryTaskRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelDataRepositoryTaskRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelDataRepositoryTaskResponseUnmarshaller.Instance;return Invoke<CancelDataRepositoryTaskResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CancelDataRepositoryTaskResponse CancelDataRepositoryTask(CancelDataRepositoryTaskRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelDataRepositoryTaskRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelDataRepositoryTaskResponseUnmarshaller.Instance;return Invoke<CancelDataRepositoryTaskResponse>(request, options);}",
    "output": "public CancelDataRepositoryTaskResult cancelDataRepositoryTask(CancelDataRepositoryTaskRequest request) {request = beforeClientExecution(request);return executeCancelDataRepositoryTask(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DateFormatTokenizer(String format) {this.format = format;}",
    "output": "public DateFormatTokenizer(string format){this.format = format;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DateFormatTokenizer(string format){this.format = format;}",
    "output": "public DateFormatTokenizer(String format) {this.format = format;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int getBiasedExponent(long rawBits) {return Math.toIntExact((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}",
    "output": "public static int GetBiasedExponent(long rawBits){return (int)((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int GetBiasedExponent(long rawBits){return (int)((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}",
    "output": "public static int getBiasedExponent(long rawBits) {return Math.toIntExact((rawBits & EXPONENT_MASK) >> EXPONENT_SHIFT);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"IB \" + distribution.toString() + \"-\" + lambda.toString()+ normalization.toString();}",
    "output": "public override string ToString(){return \"IB \" + m_distribution.ToString() + \"-\" + m_lambda.ToString() + m_normalization.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"IB \" + m_distribution.ToString() + \"-\" + m_lambda.ToString() + m_normalization.ToString();}",
    "output": "public String toString() {return \"IB \" + distribution.toString() + \"-\" + lambda.toString()+ normalization.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getName() {return name;}",
    "output": "public string GetName(){return name;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string GetName(){return name;}",
    "output": "public String getName() {return name;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean inContext(String context) {return false;}",
    "output": "public virtual bool InContext(string context){return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool InContext(string context){return false;}",
    "output": "public boolean inContext(String context) {return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {String desc;File directory = getDirectory();if (directory != null)desc = directory.getPath();elsedesc = getClass().getSimpleName() + \"-\" + System.identityHashCode(this);return \"Repository[\" + desc + \"]\"; }",
    "output": "public override string ToString(){string desc;if (Directory != null){desc = Directory.GetPath();}else{desc = GetType().Name + \"-\" + Runtime.IdentityHashCode(this);}return \"Repository[\" + desc + \"]\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){string desc;if (Directory != null){desc = Directory.GetPath();}else{desc = GetType().Name + \"-\" + Runtime.IdentityHashCode(this);}return \"Repository[\" + desc + \"]\";}",
    "output": "public String toString() {String desc;File directory = getDirectory();if (directory != null)desc = directory.getPath();elsedesc = getClass().getSimpleName() + \"-\" + System.identityHashCode(this);return \"Repository[\" + desc + \"]\"; }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int serialize(int offset, byte [] data) {LittleEndian.putInt(data, offset+0, field_13_border_styles1);LittleEndian.putInt(data, offset+4, field_14_border_styles2);return 8;}",
    "output": "public int Serialize(int offset, byte[] data){LittleEndian.PutInt(data, offset, field_13_border_styles1);offset += 4;LittleEndian.PutInt(data, offset, field_14_border_styles2);offset += 4;return 8;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int Serialize(int offset, byte[] data){LittleEndian.PutInt(data, offset, field_13_border_styles1);offset += 4;LittleEndian.PutInt(data, offset, field_14_border_styles2);offset += 4;return 8;}",
    "output": "public int serialize(int offset, byte [] data) {LittleEndian.putInt(data, offset+0, field_13_border_styles1);LittleEndian.putInt(data, offset+4, field_14_border_styles2);return 8;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}",
    "output": "public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){var block = blocks[blocksOffset++];values[valuesOffset++] = ((int)((uint)block >> 7)) & 1;values[valuesOffset++] = ((int)((uint)block >> 6)) & 1;values[valuesOffset++] = ((int)((uint)block >> 5)) & 1;values[valuesOffset++] = ((int)((uint)block >> 4)) & 1;values[valuesOffset++] = ((int)((uint)block >> 3)) & 1;values[valuesOffset++] = ((int)((uint)block >> 2)) & 1;values[valuesOffset++] = ((int)((uint)block >> 1)) & 1;values[valuesOffset++] = block & 1;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){var block = blocks[blocksOffset++];values[valuesOffset++] = ((int)((uint)block >> 7)) & 1;values[valuesOffset++] = ((int)((uint)block >> 6)) & 1;values[valuesOffset++] = ((int)((uint)block >> 5)) & 1;values[valuesOffset++] = ((int)((uint)block >> 4)) & 1;values[valuesOffset++] = ((int)((uint)block >> 3)) & 1;values[valuesOffset++] = ((int)((uint)block >> 2)) & 1;values[valuesOffset++] = ((int)((uint)block >> 1)) & 1;values[valuesOffset++] = block & 1;}}",
    "output": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PipedWriter(PipedReader destination) throws IOException {super(destination);connect(destination);}",
    "output": "public PipedWriter(java.io.PipedReader destination) : base(destination){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PipedWriter(java.io.PipedReader destination) : base(destination){throw new System.NotImplementedException();}",
    "output": "public PipedWriter(PipedReader destination) throws IOException {super(destination);connect(destination);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String dequote(byte[] in, int ip, int ie) {boolean inquote = false;final byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie) {final byte b = in[ip++];switch (b) {case '\\'':inquote = !inquote;continue;case '\\\\':if (inquote || ip == ie)r[rPtr++] = b; elser[rPtr++] = in[ip++];continue;default:r[rPtr++] = b;continue;}}return RawParseUtils.decode(UTF_8, r, 0, rPtr);}",
    "output": "public override string Dequote(byte[] @in, int ip, int ie){bool inquote = false;byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie){byte b = @in[ip++];switch (b){case (byte)('\\''):{inquote = !inquote;continue;goto case (byte)('\\\\');}case (byte)('\\\\'):{if (inquote || ip == ie){r[rPtr++] = b;}else{r[rPtr++] = @in[ip++];}continue;goto default;}default:{r[rPtr++] = b;continue;break;}}}return RawParseUtils.Decode(Constants.CHARSET, r, 0, rPtr);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string Dequote(byte[] @in, int ip, int ie){bool inquote = false;byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie){byte b = @in[ip++];switch (b){case (byte)('\\''):{inquote = !inquote;continue;goto case (byte)('\\\\');}case (byte)('\\\\'):{if (inquote || ip == ie){r[rPtr++] = b;}else{r[rPtr++] = @in[ip++];}continue;goto default;}default:{r[rPtr++] = b;continue;break;}}}return RawParseUtils.Decode(Constants.CHARSET, r, 0, rPtr);}",
    "output": "public String dequote(byte[] in, int ip, int ie) {boolean inquote = false;final byte[] r = new byte[ie - ip];int rPtr = 0;while (ip < ie) {final byte b = in[ip++];switch (b) {case '\\'':inquote = !inquote;continue;case '\\\\':if (inquote || ip == ie)r[rPtr++] = b; elser[rPtr++] = in[ip++];continue;default:r[rPtr++] = b;continue;}}return RawParseUtils.decode(UTF_8, r, 0, rPtr);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Status getStatus() {return myStatus;}",
    "output": "public virtual CheckoutResult.Status GetStatus(){return myStatus;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CheckoutResult.Status GetStatus(){return myStatus;}",
    "output": "public Status getStatus() {return myStatus;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeltaRecord(RecordInputStream in) {field_1_max_change = in.readDouble();}",
    "output": "public DeltaRecord(RecordInputStream in1){field_1_max_change = in1.ReadDouble();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeltaRecord(RecordInputStream in1){field_1_max_change = in1.ReadDouble();}",
    "output": "public DeltaRecord(RecordInputStream in) {field_1_max_change = in.readDouble();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(getCount());}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Count);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(Count);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(getCount());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListPartsRequest(String vaultName, String uploadId) {setVaultName(vaultName);setUploadId(uploadId);}",
    "output": "public ListPartsRequest(string vaultName, string uploadId){_vaultName = vaultName;_uploadId = uploadId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ListPartsRequest(string vaultName, string uploadId){_vaultName = vaultName;_uploadId = uploadId;}",
    "output": "public ListPartsRequest(String vaultName, String uploadId) {setVaultName(vaultName);setUploadId(uploadId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void set(int index, long value) {final int o = index >>> 2;final int b = index & 3;final int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}",
    "output": "public override void Set(int index, long value){int o = (int)((uint)index >> 2);int b = index & 3;int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Set(int index, long value){int o = (int)((uint)index >> 2);int b = index & 3;int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}",
    "output": "public void set(int index, long value) {final int o = index >>> 2;final int b = index & 3;final int shift = b << 4;blocks[o] = (blocks[o] & ~(65535L << shift)) | (value << shift);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setRunInBackground(int deltaPri) {runInBackground = true;this.deltaPri = deltaPri;}",
    "output": "public virtual void SetRunInBackground(int deltaPri){runInBackground = true;this.deltaPri = deltaPri;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetRunInBackground(int deltaPri){runInBackground = true;this.deltaPri = deltaPri;}",
    "output": "public void setRunInBackground(int deltaPri) {runInBackground = true;this.deltaPri = deltaPri;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TeeInputStream(InputStream src, OutputStream dst) {this.src = src;this.dst = dst;}",
    "output": "public TeeInputStream(InputStream src, OutputStream dst){this.src = src;this.dst = dst;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public TeeInputStream(InputStream src, OutputStream dst){this.src = src;this.dst = dst;}",
    "output": "public TeeInputStream(InputStream src, OutputStream dst) {this.src = src;this.dst = dst;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void addChild(final Property property)throws IOException{String name = property.getName();if (_children_names.contains(name)){throw new IOException(\"Duplicate name \\\"\" + name + \"\\\"\");}_children_names.add(name);_children.add(property);}",
    "output": "public void AddChild(Property property){String name = property.Name;if (_children_names.Contains(name)){throw new IOException(\"Duplicate name \\\"\" + name + \"\\\"\");}_children_names.Add(name);_children.Add(property);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void AddChild(Property property){String name = property.Name;if (_children_names.Contains(name)){throw new IOException(\"Duplicate name \\\"\" + name + \"\\\"\");}_children_names.Add(name);_children.Add(property);}",
    "output": "public void addChild(final Property property)throws IOException{String name = property.getName();if (_children_names.contains(name)){throw new IOException(\"Duplicate name \\\"\" + name + \"\\\"\");}_children_names.add(name);_children.add(property);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {int result;if (arg0 instanceof TwoDEval) {result = ((TwoDEval) arg0).getWidth();} else if (arg0 instanceof RefEval) {result = 1;} else { return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){int result;if (arg0 is AreaEval){result = ((AreaEval)arg0).Width;}else if (arg0 is RefEval){result = 1;}else{ return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){int result;if (arg0 is AreaEval){result = ((AreaEval)arg0).Width;}else if (arg0 is RefEval){result = 1;}else{ return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {int result;if (arg0 instanceof TwoDEval) {result = ((TwoDEval) arg0).getWidth();} else if (arg0 instanceof RefEval) {result = 1;} else { return ErrorEval.VALUE_INVALID;}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListModelsResult listModels(ListModelsRequest request) {request = beforeClientExecution(request);return executeListModels(request);}",
    "output": "public virtual ListModelsResponse ListModels(ListModelsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListModelsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListModelsResponseUnmarshaller.Instance;return Invoke<ListModelsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListModelsResponse ListModels(ListModelsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListModelsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListModelsResponseUnmarshaller.Instance;return Invoke<ListModelsResponse>(request, options);}",
    "output": "public ListModelsResult listModels(ListModelsRequest request) {request = beforeClientExecution(request);return executeListModels(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ExtensionQuery(QueryParser topLevelParser, String field, String rawQueryString) {this.field = field;this.rawQueryString = rawQueryString;this.topLevelParser = topLevelParser;}",
    "output": "public ExtensionQuery(Classic.QueryParser topLevelParser, string field, string rawQueryString){this.Field = field;this.RawQueryString = rawQueryString;this.TopLevelParser = topLevelParser;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ExtensionQuery(Classic.QueryParser topLevelParser, string field, string rawQueryString){this.Field = field;this.RawQueryString = rawQueryString;this.TopLevelParser = topLevelParser;}",
    "output": "public ExtensionQuery(QueryParser topLevelParser, String field, String rawQueryString) {this.field = field;this.rawQueryString = rawQueryString;this.topLevelParser = topLevelParser;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return resourceDescription;}",
    "output": "public override string ToString(){return resourceDescription;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return resourceDescription;}",
    "output": "public String toString() {return resourceDescription;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDeploymentInstanceResult getDeploymentInstance(GetDeploymentInstanceRequest request) {request = beforeClientExecution(request);return executeGetDeploymentInstance(request);}",
    "output": "public virtual GetDeploymentInstanceResponse GetDeploymentInstance(GetDeploymentInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentInstanceResponseUnmarshaller.Instance;return Invoke<GetDeploymentInstanceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetDeploymentInstanceResponse GetDeploymentInstance(GetDeploymentInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDeploymentInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDeploymentInstanceResponseUnmarshaller.Instance;return Invoke<GetDeploymentInstanceResponse>(request, options);}",
    "output": "public GetDeploymentInstanceResult getDeploymentInstance(GetDeploymentInstanceRequest request) {request = beforeClientExecution(request);return executeGetDeploymentInstance(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MappingCharFilterFactory(Map<String,String> args) {super(args);mapping = get(args, \"mapping\");if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public MappingCharFilterFactory(IDictionary<string, string> args) : base(args){mapping = Get(args, \"mapping\");if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public MappingCharFilterFactory(IDictionary<string, string> args) : base(args){mapping = Get(args, \"mapping\");if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public MappingCharFilterFactory(Map<String,String> args) {super(args);mapping = get(args, \"mapping\");if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean promptPassphrase(String msg) {CredentialItem.StringType v = newPrompt(msg);if (provider.get(uri, v)) {passphrase = v.getValue();return true;}passphrase = null;return false;}",
    "output": "public virtual bool PromptPassphrase(string msg){CredentialItem.StringType v = NewPrompt(msg);if (provider.Get(uri, v)){passphrase = v.GetValue();return true;}else{passphrase = null;return false;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool PromptPassphrase(string msg){CredentialItem.StringType v = NewPrompt(msg);if (provider.Get(uri, v)){passphrase = v.GetValue();return true;}else{passphrase = null;return false;}}",
    "output": "public boolean promptPassphrase(String msg) {CredentialItem.StringType v = newPrompt(msg);if (provider.get(uri, v)) {passphrase = v.getValue();return true;}passphrase = null;return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeReservedDBInstancesResult describeReservedDBInstances() {return describeReservedDBInstances(new DescribeReservedDBInstancesRequest());}",
    "output": "public virtual DescribeReservedDBInstancesResponse DescribeReservedDBInstances(){return DescribeReservedDBInstances(new DescribeReservedDBInstancesRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeReservedDBInstancesResponse DescribeReservedDBInstances(){return DescribeReservedDBInstances(new DescribeReservedDBInstancesRequest());}",
    "output": "public DescribeReservedDBInstancesResult describeReservedDBInstances() {return describeReservedDBInstances(new DescribeReservedDBInstancesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UnsubscribeFromDatasetResult unsubscribeFromDataset(UnsubscribeFromDatasetRequest request) {request = beforeClientExecution(request);return executeUnsubscribeFromDataset(request);}",
    "output": "public virtual UnsubscribeFromDatasetResponse UnsubscribeFromDataset(UnsubscribeFromDatasetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UnsubscribeFromDatasetRequestMarshaller.Instance;options.ResponseUnmarshaller = UnsubscribeFromDatasetResponseUnmarshaller.Instance;return Invoke<UnsubscribeFromDatasetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UnsubscribeFromDatasetResponse UnsubscribeFromDataset(UnsubscribeFromDatasetRequest request){var options = new InvokeOptions();options.RequestMarshaller = UnsubscribeFromDatasetRequestMarshaller.Instance;options.ResponseUnmarshaller = UnsubscribeFromDatasetResponseUnmarshaller.Instance;return Invoke<UnsubscribeFromDatasetResponse>(request, options);}",
    "output": "public UnsubscribeFromDatasetResult unsubscribeFromDataset(UnsubscribeFromDatasetRequest request) {request = beforeClientExecution(request);return executeUnsubscribeFromDataset(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int available() throws IOException {if (buf == null) {throw new IOException();}return buf.length - pos + in.available();}",
    "output": "public override int available(){if (buf == null){throw new System.IO.IOException();}return buf.Length - pos + @in.available();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int available(){if (buf == null){throw new System.IO.IOException();}return buf.Length - pos + @in.available();}",
    "output": "public int available() throws IOException {if (buf == null) {throw new IOException();}return buf.length - pos + in.available();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public V remove(Object key) {return isInBounds(key) ? TreeMap.this.remove(key) : null;}",
    "output": "public override V remove(object key){return this.isInBounds(key) ? this._enclosing.remove(key) : default(V);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override V remove(object key){return this.isInBounds(key) ? this._enclosing.remove(key) : default(V);}",
    "output": "@Override public V remove(Object key) {return isInBounds(key) ? TreeMap.this.remove(key) : null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void insertSST() {LOG.log(DEBUG, \"creating new SST via insertSST!\");sst = new SSTRecord();records.add(records.size() - 1, createExtendedSST());records.add(records.size() - 2, sst);}",
    "output": "public void InsertSST(){sst = new SSTRecord();records.Add(records.Count- 1, CreateExtendedSST());records.Add(records.Count - 2, sst);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void InsertSST(){sst = new SSTRecord();records.Add(records.Count- 1, CreateExtendedSST());records.Add(records.Count - 2, sst);}",
    "output": "public void insertSST() {LOG.log(DEBUG, \"creating new SST via insertSST!\");sst = new SSTRecord();records.add(records.size() - 1, createExtendedSST());records.add(records.size() - 2, sst);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AddApplicationCloudWatchLoggingOptionResult addApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request) {request = beforeClientExecution(request);return executeAddApplicationCloudWatchLoggingOption(request);}",
    "output": "public virtual AddApplicationCloudWatchLoggingOptionResponse AddApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationCloudWatchLoggingOptionRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationCloudWatchLoggingOptionResponseUnmarshaller.Instance;return Invoke<AddApplicationCloudWatchLoggingOptionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AddApplicationCloudWatchLoggingOptionResponse AddApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = AddApplicationCloudWatchLoggingOptionRequestMarshaller.Instance;options.ResponseUnmarshaller = AddApplicationCloudWatchLoggingOptionResponseUnmarshaller.Instance;return Invoke<AddApplicationCloudWatchLoggingOptionResponse>(request, options);}",
    "output": "public AddApplicationCloudWatchLoggingOptionResult addApplicationCloudWatchLoggingOption(AddApplicationCloudWatchLoggingOptionRequest request) {request = beforeClientExecution(request);return executeAddApplicationCloudWatchLoggingOption(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListCampaignsResult listCampaigns(ListCampaignsRequest request) {request = beforeClientExecution(request);return executeListCampaigns(request);}",
    "output": "public virtual ListCampaignsResponse ListCampaigns(ListCampaignsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListCampaignsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListCampaignsResponseUnmarshaller.Instance;return Invoke<ListCampaignsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListCampaignsResponse ListCampaigns(ListCampaignsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListCampaignsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListCampaignsResponseUnmarshaller.Instance;return Invoke<ListCampaignsResponse>(request, options);}",
    "output": "public ListCampaignsResult listCampaigns(ListCampaignsRequest request) {request = beforeClientExecution(request);return executeListCampaigns(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void execute(Lexer lexer) {lexer.more();}",
    "output": "public void Execute(Lexer lexer){lexer.More();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Execute(Lexer lexer){lexer.More();}",
    "output": "public void execute(Lexer lexer) {lexer.more();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SetFaceCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"SetFaceCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public SetFaceCoverRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"SetFaceCover\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SetFaceCoverRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"SetFaceCover\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public SetFaceCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"SetFaceCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetInstanceAccessResult getInstanceAccess(GetInstanceAccessRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccess(request);}",
    "output": "public virtual GetInstanceAccessResponse GetInstanceAccess(GetInstanceAccessRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInstanceAccessRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInstanceAccessResponseUnmarshaller.Instance;return Invoke<GetInstanceAccessResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetInstanceAccessResponse GetInstanceAccess(GetInstanceAccessRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetInstanceAccessRequestMarshaller.Instance;options.ResponseUnmarshaller = GetInstanceAccessResponseUnmarshaller.Instance;return Invoke<GetInstanceAccessResponse>(request, options);}",
    "output": "public GetInstanceAccessResult getInstanceAccess(GetInstanceAccessRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccess(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {value = null;}",
    "output": "public override void Clear(){value = null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Clear(){value = null;}",
    "output": "public void clear() {value = null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetFederationTokenResult getFederationToken(GetFederationTokenRequest request) {request = beforeClientExecution(request);return executeGetFederationToken(request);}",
    "output": "public virtual GetFederationTokenResponse GetFederationToken(GetFederationTokenRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFederationTokenRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFederationTokenResponseUnmarshaller.Instance;return Invoke<GetFederationTokenResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetFederationTokenResponse GetFederationToken(GetFederationTokenRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFederationTokenRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFederationTokenResponseUnmarshaller.Instance;return Invoke<GetFederationTokenResponse>(request, options);}",
    "output": "public GetFederationTokenResult getFederationToken(GetFederationTokenRequest request) {request = beforeClientExecution(request);return executeGetFederationToken(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int first() {currentSentence = 0;text.setIndex(text.getBeginIndex());return current();}",
    "output": "public override int First(){currentSentence = 0;text.SetIndex(text.BeginIndex);return Current;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int First(){currentSentence = 0;text.SetIndex(text.BeginIndex);return Current;}",
    "output": "public int first() {currentSentence = 0;text.setIndex(text.getBeginIndex());return current();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public QueryPhraseMap getFieldTermMap( String fieldName, String term ){QueryPhraseMap rootMap = getRootMap( fieldName );return rootMap == null ? null : rootMap.subMap.get( term );}",
    "output": "public virtual QueryPhraseMap GetFieldTermMap(string fieldName, string term){QueryPhraseMap rootMap = GetRootMap(fieldName);if (rootMap == null) return null;rootMap.subMap.TryGetValue(term, out QueryPhraseMap result);return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual QueryPhraseMap GetFieldTermMap(string fieldName, string term){QueryPhraseMap rootMap = GetRootMap(fieldName);if (rootMap == null) return null;rootMap.subMap.TryGetValue(term, out QueryPhraseMap result);return result;}",
    "output": "public QueryPhraseMap getFieldTermMap( String fieldName, String term ){QueryPhraseMap rootMap = getRootMap( fieldName );return rootMap == null ? null : rootMap.subMap.get( term );}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean contains(Object object) {if (object instanceof Multiset.Entry) {Multiset.Entry<?> entry = (Multiset.Entry<?>) object;Object element = entry.getElement();int entryCount = entry.getCount();return entryCount > 0 && count(element) == entryCount;}return false;}",
    "output": "public override bool contains(object o){if (!(o is java.util.MapClass.Entry<K, V>)){return false;}java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;return this._enclosing.containsMapping(e.getKey(), e.getValue());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool contains(object o){if (!(o is java.util.MapClass.Entry<K, V>)){return false;}java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;return this._enclosing.containsMapping(e.getKey(), e.getValue());}",
    "output": "@Override public boolean contains(Object object) {if (object instanceof Multiset.Entry) {Multiset.Entry<?> entry = (Multiset.Entry<?>) object;Object element = entry.getElement();int entryCount = entry.getCount();return entryCount > 0 && count(element) == entryCount;}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteLexiconResult deleteLexicon(DeleteLexiconRequest request) {request = beforeClientExecution(request);return executeDeleteLexicon(request);}",
    "output": "public virtual DeleteLexiconResponse DeleteLexicon(DeleteLexiconRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLexiconRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLexiconResponseUnmarshaller.Instance;return Invoke<DeleteLexiconResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteLexiconResponse DeleteLexicon(DeleteLexiconRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLexiconRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLexiconResponseUnmarshaller.Instance;return Invoke<DeleteLexiconResponse>(request, options);}",
    "output": "public DeleteLexiconResult deleteLexicon(DeleteLexiconRequest request) {request = beforeClientExecution(request);return executeDeleteLexicon(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DomainMetadataResult domainMetadata(DomainMetadataRequest request) {request = beforeClientExecution(request);return executeDomainMetadata(request);}",
    "output": "public virtual DomainMetadataResponse DomainMetadata(DomainMetadataRequest request){var options = new InvokeOptions();options.RequestMarshaller = DomainMetadataRequestMarshaller.Instance;options.ResponseUnmarshaller = DomainMetadataResponseUnmarshaller.Instance;return Invoke<DomainMetadataResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DomainMetadataResponse DomainMetadata(DomainMetadataRequest request){var options = new InvokeOptions();options.RequestMarshaller = DomainMetadataRequestMarshaller.Instance;options.ResponseUnmarshaller = DomainMetadataResponseUnmarshaller.Instance;return Invoke<DomainMetadataResponse>(request, options);}",
    "output": "public DomainMetadataResult domainMetadata(DomainMetadataRequest request) {request = beforeClientExecution(request);return executeDomainMetadata(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevFlag getReinterestingFlag() {return REINTERESTING;}",
    "output": "public RevFlag GetReinterestingFlag(){return REINTERESTING;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RevFlag GetReinterestingFlag(){return REINTERESTING;}",
    "output": "public RevFlag getReinterestingFlag() {return REINTERESTING;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException {final int code = posix_fadvise(fd, offset, len, advise);if (code != 0) {throw new RuntimeException(\"posix_fadvise failed code=\" + code);}}",
    "output": "public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException{int code = posix_fadvise(fd, offset, len, advise);if (code != 0){throw new Exception(\"posix_fadvise failed code=\" + code);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException{int code = posix_fadvise(fd, offset, len, advise);if (code != 0){throw new Exception(\"posix_fadvise failed code=\" + code);}}",
    "output": "public static void advise(FileDescriptor fd, long offset, long len, int advise) throws IOException {final int code = posix_fadvise(fd, offset, len, advise);if (code != 0) {throw new RuntimeException(\"posix_fadvise failed code=\" + code);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteSchemaResult deleteSchema(DeleteSchemaRequest request) {request = beforeClientExecution(request);return executeDeleteSchema(request);}",
    "output": "public virtual DeleteSchemaResponse DeleteSchema(DeleteSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSchemaResponseUnmarshaller.Instance;return Invoke<DeleteSchemaResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteSchemaResponse DeleteSchema(DeleteSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSchemaResponseUnmarshaller.Instance;return Invoke<DeleteSchemaResponse>(request, options);}",
    "output": "public DeleteSchemaResult deleteSchema(DeleteSchemaRequest request) {request = beforeClientExecution(request);return executeDeleteSchema(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateBatchInferenceJobResult createBatchInferenceJob(CreateBatchInferenceJobRequest request) {request = beforeClientExecution(request);return executeCreateBatchInferenceJob(request);}",
    "output": "public virtual CreateBatchInferenceJobResponse CreateBatchInferenceJob(CreateBatchInferenceJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateBatchInferenceJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateBatchInferenceJobResponseUnmarshaller.Instance;return Invoke<CreateBatchInferenceJobResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateBatchInferenceJobResponse CreateBatchInferenceJob(CreateBatchInferenceJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateBatchInferenceJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateBatchInferenceJobResponseUnmarshaller.Instance;return Invoke<CreateBatchInferenceJobResponse>(request, options);}",
    "output": "public CreateBatchInferenceJobResult createBatchInferenceJob(CreateBatchInferenceJobRequest request) {request = beforeClientExecution(request);return executeCreateBatchInferenceJob(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BitField(final int mask){_mask = mask;int count       = 0;int bit_pattern = mask;if (bit_pattern != 0){while ((bit_pattern & 1) == 0){count++;bit_pattern >>= 1;}}_shift_count = count;}",
    "output": "public BitField(int mask){this._mask = mask;int num = 0;int num2 = mask;if (num2 != 0){while ((num2 & 1) == 0){num++;num2 = num2 >> 1;}}this._shift_count = num;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BitField(int mask){this._mask = mask;int num = 0;int num2 = mask;if (num2 != 0){while ((num2 & 1) == 0){num++;num2 = num2 >> 1;}}this._shift_count = num;}",
    "output": "public BitField(final int mask){_mask = mask;int count       = 0;int bit_pattern = mask;if (bit_pattern != 0){while ((bit_pattern & 1) == 0){count++;bit_pattern >>= 1;}}_shift_count = count;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean failed() {return !failingPaths.isEmpty();}",
    "output": "public virtual bool Failed(){return failingPaths.Count > 0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool Failed(){return failingPaths.Count > 0;}",
    "output": "public boolean failed() {return !failingPaths.isEmpty();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder b = new StringBuilder();for(int i=0;i<len;i++) {if (i > 0) {b.append(' ');}b.append(Integer.toBinaryString(bytes[i].value));}return b.toString();}",
    "output": "public override string ToString(){StringBuilder b = new StringBuilder();for (int i = 0; i < len; i++){if (i > 0){b.Append(' ');}b.Append(bytes[i].Value.ToBinaryString());}return b.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){StringBuilder b = new StringBuilder();for (int i = 0; i < len; i++){if (i > 0){b.Append(' ');}b.Append(bytes[i].Value.ToBinaryString());}return b.ToString();}",
    "output": "public String toString() {StringBuilder b = new StringBuilder();for(int i=0;i<len;i++) {if (i > 0) {b.append(' ');}b.append(Integer.toBinaryString(bytes[i].value));}return b.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void remove() {if (modCount != expectedModCount)throw new ConcurrentModificationException();if (lastReturned == null)throw new IllegalStateException();LinkedHashMap.this.remove(lastReturned.key);lastReturned = null;expectedModCount = modCount;}",
    "output": "public virtual void remove(){if (this._enclosing.modCount != this.expectedModCount){throw new java.util.ConcurrentModificationException();}if (this.lastReturned == null){throw new System.InvalidOperationException();}this._enclosing.remove(this.lastReturned.key);this.lastReturned = null;this.expectedModCount = this._enclosing.modCount;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void remove(){if (this._enclosing.modCount != this.expectedModCount){throw new java.util.ConcurrentModificationException();}if (this.lastReturned == null){throw new System.InvalidOperationException();}this._enclosing.remove(this.lastReturned.key);this.lastReturned = null;this.expectedModCount = this._enclosing.modCount;}",
    "output": "public final void remove() {if (modCount != expectedModCount)throw new ConcurrentModificationException();if (lastReturned == null)throw new IllegalStateException();LinkedHashMap.this.remove(lastReturned.key);lastReturned = null;expectedModCount = modCount;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean shouldBeRecursive() {return path.shouldBeRecursive() || ANY_DIFF.shouldBeRecursive();}",
    "output": "public override bool ShouldBeRecursive(){return path.ShouldBeRecursive() || ANY_DIFF.ShouldBeRecursive();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool ShouldBeRecursive(){return path.ShouldBeRecursive() || ANY_DIFF.ShouldBeRecursive();}",
    "output": "public boolean shouldBeRecursive() {return path.shouldBeRecursive() || ANY_DIFF.shouldBeRecursive();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteQueueRequest(String queueUrl) {setQueueUrl(queueUrl);}",
    "output": "public DeleteQueueRequest(string queueUrl){_queueUrl = queueUrl;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteQueueRequest(string queueUrl){_queueUrl = queueUrl;}",
    "output": "public DeleteQueueRequest(String queueUrl) {setQueueUrl(queueUrl);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ExternalName getExternalName(int externSheetIndex, int externNameIndex) {String nameName = linkTable.resolveNameXText(externSheetIndex, externNameIndex, this);if(nameName == null) {return null;}int ix = linkTable.resolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}",
    "output": "public ExternalName GetExternalName(int externSheetIndex, int externNameIndex){String nameName = linkTable.ResolveNameXText(externSheetIndex, externNameIndex, this);if (nameName == null){return null;}int ix = linkTable.ResolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ExternalName GetExternalName(int externSheetIndex, int externNameIndex){String nameName = linkTable.ResolveNameXText(externSheetIndex, externNameIndex, this);if (nameName == null){return null;}int ix = linkTable.ResolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}",
    "output": "public ExternalName getExternalName(int externSheetIndex, int externNameIndex) {String nameName = linkTable.resolveNameXText(externSheetIndex, externNameIndex, this);if(nameName == null) {return null;}int ix = linkTable.resolveNameXIx(externSheetIndex, externNameIndex);return new ExternalName(nameName, externNameIndex, ix);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RegisterUserResult registerUser(RegisterUserRequest request) {request = beforeClientExecution(request);return executeRegisterUser(request);}",
    "output": "public virtual RegisterUserResponse RegisterUser(RegisterUserRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterUserRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterUserResponseUnmarshaller.Instance;return Invoke<RegisterUserResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RegisterUserResponse RegisterUser(RegisterUserRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterUserRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterUserResponseUnmarshaller.Instance;return Invoke<RegisterUserResponse>(request, options);}",
    "output": "public RegisterUserResult registerUser(RegisterUserRequest request) {request = beforeClientExecution(request);return executeRegisterUser(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}",
    "output": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int j = 0; j < iterations; ++j){values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}",
    "output": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return fixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}",
    "output": "public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return doFixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return doFixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return fixed(arg0, new NumberEval(2), BoolEval.FALSE, srcRowIndex, srcColumnIndex);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final byte[] array() {return protectedArray();}",
    "output": "public sealed override object array(){return protectedArray();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override object array(){return protectedArray();}",
    "output": "public final byte[] array() {return protectedArray();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int readUByte() {byte[] buf = new byte[1];try {checkEOF(read(buf), 1);} catch (IOException e) {throw new RuntimeException(e);}return LittleEndian.getUByte(buf);}",
    "output": "public int ReadUByte(){int ch;try{ch = in1.ReadByte();}catch (IOException e){throw new RuntimeException(e);}CheckEOF(ch);return ch;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int ReadUByte(){int ch;try{ch = in1.ReadByte();}catch (IOException e){throw new RuntimeException(e);}CheckEOF(ch);return ch;}",
    "output": "public int readUByte() {byte[] buf = new byte[1];try {checkEOF(read(buf), 1);} catch (IOException e) {throw new RuntimeException(e);}return LittleEndian.getUByte(buf);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static AttrPtg createSkip(int dist) {return new AttrPtg(optiSkip.set(0), dist, null, -1);}",
    "output": "public static AttrPtg CreateSkip(int dist){return new AttrPtg(optiSkip.Set(0), dist, null, -1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static AttrPtg CreateSkip(int dist){return new AttrPtg(optiSkip.Set(0), dist, null, -1);}",
    "output": "public static AttrPtg createSkip(int dist) {return new AttrPtg(optiSkip.set(0), dist, null, -1);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeUserHierarchyGroupResult describeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request) {request = beforeClientExecution(request);return executeDescribeUserHierarchyGroup(request);}",
    "output": "public virtual DescribeUserHierarchyGroupResponse DescribeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeUserHierarchyGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeUserHierarchyGroupResponseUnmarshaller.Instance;return Invoke<DescribeUserHierarchyGroupResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeUserHierarchyGroupResponse DescribeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeUserHierarchyGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeUserHierarchyGroupResponseUnmarshaller.Instance;return Invoke<DescribeUserHierarchyGroupResponse>(request, options);}",
    "output": "public DescribeUserHierarchyGroupResult describeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request) {request = beforeClientExecution(request);return executeDescribeUserHierarchyGroup(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public User(String path, String userName, String userId, String arn, java.util.Date createDate) {setPath(path);setUserName(userName);setUserId(userId);setArn(arn);setCreateDate(createDate);}",
    "output": "public User(string path, string userName, string userId, string arn, DateTime createDate){_path = path;_userName = userName;_userId = userId;_arn = arn;_createDate = createDate;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public User(string path, string userName, string userId, string arn, DateTime createDate){_path = path;_userName = userName;_userId = userId;_arn = arn;_createDate = createDate;}",
    "output": "public User(String path, String userName, String userId, String arn, java.util.Date createDate) {setPath(path);setUserName(userName);setUserId(userId);setArn(arn);setCreateDate(createDate);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OpenNLPLemmatizerFilter create(TokenStream in) {try {NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.getLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(in, lemmatizerOp);} catch (IOException e) {throw new RuntimeException(e);}}",
    "output": "public override TokenStream Create(TokenStream input){try{NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.GetLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(input, lemmatizerOp);}catch (IOException e){throw new Exception(e.ToString(), e);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){try{NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.GetLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(input, lemmatizerOp);}catch (IOException e){throw new Exception(e.ToString(), e);}}",
    "output": "public OpenNLPLemmatizerFilter create(TokenStream in) {try {NLPLemmatizerOp lemmatizerOp = OpenNLPOpsFactory.getLemmatizer(dictionaryFile, lemmatizerModelFile);return new OpenNLPLemmatizerFilter(in, lemmatizerOp);} catch (IOException e) {throw new RuntimeException(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}",
    "output": "public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long byte0 = blocks[blocksOffset++] & 0xFF;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | ((long)((ulong)byte1 >> 4));long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long byte0 = blocks[blocksOffset++] & 0xFF;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | ((long)((ulong)byte1 >> 4));long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}",
    "output": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RebootInstanceRequest() {super(\"HPC\", \"2016-06-03\", \"RebootInstance\", \"hpc\");setMethod(MethodType.POST);}",
    "output": "public RebootInstanceRequest(): base(\"HPC\", \"2016-06-03\", \"RebootInstance\"){Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RebootInstanceRequest(): base(\"HPC\", \"2016-06-03\", \"RebootInstance\"){Method = MethodType.POST;}",
    "output": "public RebootInstanceRequest() {super(\"HPC\", \"2016-06-03\", \"RebootInstance\", \"hpc\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListContainerInstancesResult listContainerInstances(ListContainerInstancesRequest request) {request = beforeClientExecution(request);return executeListContainerInstances(request);}",
    "output": "public virtual ListContainerInstancesResponse ListContainerInstances(ListContainerInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListContainerInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListContainerInstancesResponseUnmarshaller.Instance;return Invoke<ListContainerInstancesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListContainerInstancesResponse ListContainerInstances(ListContainerInstancesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListContainerInstancesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListContainerInstancesResponseUnmarshaller.Instance;return Invoke<ListContainerInstancesResponse>(request, options);}",
    "output": "public ListContainerInstancesResult listContainerInstances(ListContainerInstancesRequest request) {request = beforeClientExecution(request);return executeListContainerInstances(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListClustersResult listClusters(ListClustersRequest request) {request = beforeClientExecution(request);return executeListClusters(request);}",
    "output": "public virtual ListClustersResponse ListClusters(ListClustersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListClustersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListClustersResponseUnmarshaller.Instance;return Invoke<ListClustersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListClustersResponse ListClusters(ListClustersRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListClustersRequestMarshaller.Instance;options.ResponseUnmarshaller = ListClustersResponseUnmarshaller.Instance;return Invoke<ListClustersResponse>(request, options);}",
    "output": "public ListClustersResult listClusters(ListClustersRequest request) {request = beforeClientExecution(request);return executeListClusters(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static boolean equals(boolean[] array1, boolean[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}",
    "output": "public static bool equals(bool[] array1, bool[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length != array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i] != array2[i]){return false;}}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static bool equals(bool[] array1, bool[] array2){if (array1 == array2){return true;}if (array1 == null || array2 == null || array1.Length != array2.Length){return false;}{for (int i = 0; i < array1.Length; i++){if (array1[i] != array2[i]){return false;}}}return true;}",
    "output": "public static boolean equals(boolean[] array1, boolean[] array2) {if (array1 == array2) {return true;}if (array1 == null || array2 == null || array1.length != array2.length) {return false;}for (int i = 0; i < array1.length; i++) {if (array1[i] != array2[i]) {return false;}}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 5;values[valuesOffset++] = (byte0 >>> 2) & 7;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);values[valuesOffset++] = (byte1 >>> 4) & 7;values[valuesOffset++] = (byte1 >>> 1) & 7;final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 >>> 3) & 7;values[valuesOffset++] = byte2 & 7;}}",
    "output": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (int)((uint)byte0 >> 5);values[valuesOffset++] = ((int)((uint)byte0 >> 2)) & 7;int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | ((int)((uint)byte1 >> 7));values[valuesOffset++] = ((int)((uint)byte1 >> 4)) & 7;values[valuesOffset++] = ((int)((uint)byte1 >> 1)) & 7;int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | ((int)((uint)byte2 >> 6));values[valuesOffset++] = ((int)((uint)byte2 >> 3)) & 7;values[valuesOffset++] = byte2 & 7;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (int)((uint)byte0 >> 5);values[valuesOffset++] = ((int)((uint)byte0 >> 2)) & 7;int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | ((int)((uint)byte1 >> 7));values[valuesOffset++] = ((int)((uint)byte1 >> 4)) & 7;values[valuesOffset++] = ((int)((uint)byte1 >> 1)) & 7;int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | ((int)((uint)byte2 >> 6));values[valuesOffset++] = ((int)((uint)byte2 >> 3)) & 7;values[valuesOffset++] = byte2 & 7;}}",
    "output": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 5;values[valuesOffset++] = (byte0 >>> 2) & 7;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);values[valuesOffset++] = (byte1 >>> 4) & 7;values[valuesOffset++] = (byte1 >>> 1) & 7;final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);values[valuesOffset++] = (byte2 >>> 3) & 7;values[valuesOffset++] = byte2 & 7;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetRelationalDatabaseSnapshotResult getRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseSnapshot(request);}",
    "output": "public virtual GetRelationalDatabaseSnapshotResponse GetRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRelationalDatabaseSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRelationalDatabaseSnapshotResponseUnmarshaller.Instance;return Invoke<GetRelationalDatabaseSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetRelationalDatabaseSnapshotResponse GetRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetRelationalDatabaseSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = GetRelationalDatabaseSnapshotResponseUnmarshaller.Instance;return Invoke<GetRelationalDatabaseSnapshotResponse>(request, options);}",
    "output": "public GetRelationalDatabaseSnapshotResult getRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeGetRelationalDatabaseSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos = offset + 8;field_1_blipTypeWin32 = data[pos];field_2_blipTypeMacOS = data[pos + 1];System.arraycopy( data, pos + 2, field_3_uid, 0, 16 );field_4_tag = LittleEndian.getShort( data, pos + 18 );field_5_size = LittleEndian.getInt( data, pos + 20 );field_6_ref = LittleEndian.getInt( data, pos + 24 );field_7_offset = LittleEndian.getInt( data, pos + 28 );field_8_usage = data[pos + 32];field_9_name = data[pos + 33];field_10_unused2 = data[pos + 34];field_11_unused3 = data[pos + 35];bytesRemaining -= 36;int bytesRead = 0;if (bytesRemaining > 0) {field_12_blipRecord = (EscherBlipRecord) recordFactory.createRecord( data, pos + 36 );bytesRead = field_12_blipRecord.fillFields( data, pos + 36, recordFactory );}pos += 36 + bytesRead;bytesRemaining -= bytesRead;_remainingData = IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, pos, _remainingData, 0, bytesRemaining );return bytesRemaining + 8 + 36 + (field_12_blipRecord == null ? 0 : field_12_blipRecord.getRecordSize()) ;}",
    "output": "public override int FillFields(byte[] data, int offset,IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;field_1_blipTypeWin32 = data[pos];field_2_blipTypeMacOS = data[pos + 1];field_3_uid = new byte[16];Array.Copy(data, pos + 2, field_3_uid, 0, 16);field_4_tag = LittleEndian.GetShort(data, pos + 18);field_5_size = LittleEndian.GetInt(data, pos + 20);field_6_ref = LittleEndian.GetInt(data, pos + 24);field_7_offset = LittleEndian.GetInt(data, pos + 28);field_8_usage = data[pos + 32];field_9_name = data[pos + 33];field_10_unused2 = data[pos + 34];field_11_unused3 = data[pos + 35];bytesRemaining -= 36;int bytesRead = 0;if (bytesRemaining > 0){field_12_blipRecord = (EscherBlipRecord)recordFactory.CreateRecord(data, pos + 36);bytesRead = field_12_blipRecord.FillFields(data, pos + 36, recordFactory);}pos += 36 + bytesRead;bytesRemaining -= bytesRead;_remainingData = new byte[bytesRemaining];Array.Copy(data, pos, _remainingData, 0, bytesRemaining);return bytesRemaining + 8 + 36 + (field_12_blipRecord == null ? 0 : field_12_blipRecord.RecordSize);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int FillFields(byte[] data, int offset,IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;field_1_blipTypeWin32 = data[pos];field_2_blipTypeMacOS = data[pos + 1];field_3_uid = new byte[16];Array.Copy(data, pos + 2, field_3_uid, 0, 16);field_4_tag = LittleEndian.GetShort(data, pos + 18);field_5_size = LittleEndian.GetInt(data, pos + 20);field_6_ref = LittleEndian.GetInt(data, pos + 24);field_7_offset = LittleEndian.GetInt(data, pos + 28);field_8_usage = data[pos + 32];field_9_name = data[pos + 33];field_10_unused2 = data[pos + 34];field_11_unused3 = data[pos + 35];bytesRemaining -= 36;int bytesRead = 0;if (bytesRemaining > 0){field_12_blipRecord = (EscherBlipRecord)recordFactory.CreateRecord(data, pos + 36);bytesRead = field_12_blipRecord.FillFields(data, pos + 36, recordFactory);}pos += 36 + bytesRead;bytesRemaining -= bytesRead;_remainingData = new byte[bytesRemaining];Array.Copy(data, pos, _remainingData, 0, bytesRemaining);return bytesRemaining + 8 + 36 + (field_12_blipRecord == null ? 0 : field_12_blipRecord.RecordSize);}",
    "output": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos = offset + 8;field_1_blipTypeWin32 = data[pos];field_2_blipTypeMacOS = data[pos + 1];System.arraycopy( data, pos + 2, field_3_uid, 0, 16 );field_4_tag = LittleEndian.getShort( data, pos + 18 );field_5_size = LittleEndian.getInt( data, pos + 20 );field_6_ref = LittleEndian.getInt( data, pos + 24 );field_7_offset = LittleEndian.getInt( data, pos + 28 );field_8_usage = data[pos + 32];field_9_name = data[pos + 33];field_10_unused2 = data[pos + 34];field_11_unused3 = data[pos + 35];bytesRemaining -= 36;int bytesRead = 0;if (bytesRemaining > 0) {field_12_blipRecord = (EscherBlipRecord) recordFactory.createRecord( data, pos + 36 );bytesRead = field_12_blipRecord.fillFields( data, pos + 36, recordFactory );}pos += 36 + bytesRead;bytesRemaining -= bytesRead;_remainingData = IOUtils.safelyAllocate(bytesRemaining, MAX_RECORD_LENGTH);System.arraycopy( data, pos, _remainingData, 0, bytesRemaining );return bytesRemaining + 8 + 36 + (field_12_blipRecord == null ? 0 : field_12_blipRecord.getRecordSize()) ;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public int size() {return size;}",
    "output": "public override int size(){return a.Length;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int size(){return a.Length;}",
    "output": "@Override public int size() {return size;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PhoneNumberValidateResult phoneNumberValidate(PhoneNumberValidateRequest request) {request = beforeClientExecution(request);return executePhoneNumberValidate(request);}",
    "output": "public virtual PhoneNumberValidateResponse PhoneNumberValidate(PhoneNumberValidateRequest request){var options = new InvokeOptions();options.RequestMarshaller = PhoneNumberValidateRequestMarshaller.Instance;options.ResponseUnmarshaller = PhoneNumberValidateResponseUnmarshaller.Instance;return Invoke<PhoneNumberValidateResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PhoneNumberValidateResponse PhoneNumberValidate(PhoneNumberValidateRequest request){var options = new InvokeOptions();options.RequestMarshaller = PhoneNumberValidateRequestMarshaller.Instance;options.ResponseUnmarshaller = PhoneNumberValidateResponseUnmarshaller.Instance;return Invoke<PhoneNumberValidateResponse>(request, options);}",
    "output": "public PhoneNumberValidateResult phoneNumberValidate(PhoneNumberValidateRequest request) {request = beforeClientExecution(request);return executePhoneNumberValidate(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateTransformJobResult createTransformJob(CreateTransformJobRequest request) {request = beforeClientExecution(request);return executeCreateTransformJob(request);}",
    "output": "public virtual CreateTransformJobResponse CreateTransformJob(CreateTransformJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateTransformJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateTransformJobResponseUnmarshaller.Instance;return Invoke<CreateTransformJobResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateTransformJobResponse CreateTransformJob(CreateTransformJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateTransformJobRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateTransformJobResponseUnmarshaller.Instance;return Invoke<CreateTransformJobResponse>(request, options);}",
    "output": "public CreateTransformJobResult createTransformJob(CreateTransformJobRequest request) {request = beforeClientExecution(request);return executeCreateTransformJob(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized int search(Object o) {final Object[] dumpArray = elementData;final int size = elementCount;if (o != null) {for (int i = size - 1; i >= 0; i--) {if (o.equals(dumpArray[i])) {return size - i;}}} else {for (int i = size - 1; i >= 0; i--) {if (dumpArray[i] == null) {return size - i;}}}return -1;}",
    "output": "public virtual int search(object o){lock (this){object[] dumpArray = elementData;int size_1 = elementCount;if (o != null){{for (int i = size_1 - 1; i >= 0; i--){if (o.Equals(dumpArray[i])){return size_1 - i;}}}}else{{for (int i = size_1 - 1; i >= 0; i--){if (dumpArray[i] == null){return size_1 - i;}}}}return -1;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int search(object o){lock (this){object[] dumpArray = elementData;int size_1 = elementCount;if (o != null){{for (int i = size_1 - 1; i >= 0; i--){if (o.Equals(dumpArray[i])){return size_1 - i;}}}}else{{for (int i = size_1 - 1; i >= 0; i--){if (dumpArray[i] == null){return size_1 - i;}}}}return -1;}}",
    "output": "public synchronized int search(Object o) {final Object[] dumpArray = elementData;final int size = elementCount;if (o != null) {for (int i = size - 1; i >= 0; i--) {if (o.equals(dumpArray[i])) {return size - i;}}} else {for (int i = size - 1; i >= 0; i--) {if (dumpArray[i] == null) {return size - i;}}}return -1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeCacheParametersRequest(String cacheParameterGroupName) {setCacheParameterGroupName(cacheParameterGroupName);}",
    "output": "public DescribeCacheParametersRequest(string cacheParameterGroupName){_cacheParameterGroupName = cacheParameterGroupName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DescribeCacheParametersRequest(string cacheParameterGroupName){_cacheParameterGroupName = cacheParameterGroupName;}",
    "output": "public DescribeCacheParametersRequest(String cacheParameterGroupName) {setCacheParameterGroupName(cacheParameterGroupName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {synchronized (mutex) {delegate().clear();}}",
    "output": "public virtual void clear(){lock (mutex){c.clear();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void clear(){lock (mutex){c.clear();}}",
    "output": "public void clear() {synchronized (mutex) {delegate().clear();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean hasRevSort(RevSort sort) {return sorting.contains(sort);}",
    "output": "public virtual bool HasRevSort(RevSort sort){return sorting.Contains(sort);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool HasRevSort(RevSort sort){return sorting.Contains(sort);}",
    "output": "public boolean hasRevSort(RevSort sort) {return sorting.contains(sort);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StashListCommand stashList() {return new StashListCommand(repo);}",
    "output": "public virtual StashListCommand StashList(){return new StashListCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual StashListCommand StashList(){return new StashListCommand(repo);}",
    "output": "public StashListCommand stashList() {return new StashListCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutGroupPolicyRequest(String groupName, String policyName, String policyDocument) {setGroupName(groupName);setPolicyName(policyName);setPolicyDocument(policyDocument);}",
    "output": "public PutGroupPolicyRequest(string groupName, string policyName, string policyDocument){_groupName = groupName;_policyName = policyName;_policyDocument = policyDocument;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PutGroupPolicyRequest(string groupName, string policyName, string policyDocument){_groupName = groupName;_policyName = policyName;_policyDocument = policyDocument;}",
    "output": "public PutGroupPolicyRequest(String groupName, String policyName, String policyDocument) {setGroupName(groupName);setPolicyName(policyName);setPolicyDocument(policyDocument);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return super.get() + \"=\" + value;}",
    "output": "public override string ToString(){return base.get() + \"=\" + value;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return base.get() + \"=\" + value;}",
    "output": "public String toString() {return super.get() + \"=\" + value;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void writeByte(int v) {checkPosition(1);_buf[_writeIndex++] = (byte)v;}",
    "output": "public void WriteByte(int v){CheckPosition(1);_buf[_writeIndex++] = (byte)v;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void WriteByte(int v){CheckPosition(1);_buf[_writeIndex++] = (byte)v;}",
    "output": "public void writeByte(int v) {checkPosition(1);_buf[_writeIndex++] = (byte)v;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CountryRecord(RecordInputStream in) {field_1_default_country = in.readShort();field_2_current_country = in.readShort();}",
    "output": "public CountryRecord(RecordInputStream in1){field_1_default_country = in1.ReadShort();field_2_current_country = in1.ReadShort();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CountryRecord(RecordInputStream in1){field_1_default_country = in1.ReadShort();field_2_current_country = in1.ReadShort();}",
    "output": "public CountryRecord(RecordInputStream in) {field_1_default_country = in.readShort();field_2_current_country = in.readShort();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateContainerAgentResult updateContainerAgent(UpdateContainerAgentRequest request) {request = beforeClientExecution(request);return executeUpdateContainerAgent(request);}",
    "output": "public virtual UpdateContainerAgentResponse UpdateContainerAgent(UpdateContainerAgentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateContainerAgentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateContainerAgentResponseUnmarshaller.Instance;return Invoke<UpdateContainerAgentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateContainerAgentResponse UpdateContainerAgent(UpdateContainerAgentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateContainerAgentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateContainerAgentResponseUnmarshaller.Instance;return Invoke<UpdateContainerAgentResponse>(request, options);}",
    "output": "public UpdateContainerAgentResult updateContainerAgent(UpdateContainerAgentRequest request) {request = beforeClientExecution(request);return executeUpdateContainerAgent(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeNodeConfigurationOptionsResult describeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeNodeConfigurationOptions(request);}",
    "output": "public virtual DescribeNodeConfigurationOptionsResponse DescribeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeNodeConfigurationOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeNodeConfigurationOptionsResponseUnmarshaller.Instance;return Invoke<DescribeNodeConfigurationOptionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeNodeConfigurationOptionsResponse DescribeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeNodeConfigurationOptionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeNodeConfigurationOptionsResponseUnmarshaller.Instance;return Invoke<DescribeNodeConfigurationOptionsResponse>(request, options);}",
    "output": "public DescribeNodeConfigurationOptionsResult describeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request) {request = beforeClientExecution(request);return executeDescribeNodeConfigurationOptions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AddImageRequest() {super(\"ImageSearch\", \"2019-03-25\", \"AddImage\", \"imagesearch\");setUriPattern(\"/v2/image/add\");setMethod(MethodType.POST);}",
    "output": "public AddImageRequest(): base(\"ImageSearch\", \"2019-03-25\", \"AddImage\", \"imagesearch\", \"openAPI\"){UriPattern = \"/v2/image/add\";Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public AddImageRequest(): base(\"ImageSearch\", \"2019-03-25\", \"AddImage\", \"imagesearch\", \"openAPI\"){UriPattern = \"/v2/image/add\";Method = MethodType.POST;}",
    "output": "public AddImageRequest() {super(\"ImageSearch\", \"2019-03-25\", \"AddImage\", \"imagesearch\");setUriPattern(\"/v2/image/add\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BorderFormatting() {field_13_border_styles1    = 0;field_14_border_styles2    = 0;}",
    "output": "public BorderFormatting(){field_13_border_styles1 = (short)0;field_14_border_styles2 = (short)0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BorderFormatting(){field_13_border_styles1 = (short)0;field_14_border_styles2 = (short)0;}",
    "output": "public BorderFormatting() {field_13_border_styles1    = 0;field_14_border_styles2    = 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[0]);buffer.append(\" \");buffer.append(operands[1]);return buffer.toString();}",
    "output": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\" \");buffer.Append(operands[1]);return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(\" \");buffer.Append(operands[1]);return buffer.ToString();}",
    "output": "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[0]);buffer.append(\" \");buffer.append(operands[1]);return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTagsForStreamResult listTagsForStream(ListTagsForStreamRequest request) {request = beforeClientExecution(request);return executeListTagsForStream(request);}",
    "output": "public virtual ListTagsForStreamResponse ListTagsForStream(ListTagsForStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTagsForStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTagsForStreamResponseUnmarshaller.Instance;return Invoke<ListTagsForStreamResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTagsForStreamResponse ListTagsForStream(ListTagsForStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTagsForStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTagsForStreamResponseUnmarshaller.Instance;return Invoke<ListTagsForStreamResponse>(request, options);}",
    "output": "public ListTagsForStreamResult listTagsForStream(ListTagsForStreamRequest request) {request = beforeClientExecution(request);return executeListTagsForStream(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public HSSFName createName(){NameRecord nameRecord = workbook.createName();HSSFName newName = new HSSFName(this, nameRecord);names.add(newName);return newName;}",
    "output": "public NPOI.SS.UserModel.IName CreateName(){NameRecord nameRecord = workbook.CreateName();HSSFName newName = new HSSFName(this, nameRecord);names.Add(newName);return newName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NPOI.SS.UserModel.IName CreateName(){NameRecord nameRecord = workbook.CreateName();HSSFName newName = new HSSFName(this, nameRecord);names.Add(newName);return newName;}",
    "output": "public HSSFName createName(){NameRecord nameRecord = workbook.createName();HSSFName newName = new HSSFName(this, nameRecord);names.add(newName);return newName;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateLogPatternResult createLogPattern(CreateLogPatternRequest request) {request = beforeClientExecution(request);return executeCreateLogPattern(request);}",
    "output": "public virtual CreateLogPatternResponse CreateLogPattern(CreateLogPatternRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateLogPatternRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateLogPatternResponseUnmarshaller.Instance;return Invoke<CreateLogPatternResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateLogPatternResponse CreateLogPattern(CreateLogPatternRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateLogPatternRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateLogPatternResponseUnmarshaller.Instance;return Invoke<CreateLogPatternResponse>(request, options);}",
    "output": "public CreateLogPatternResult createLogPattern(CreateLogPatternRequest request) {request = beforeClientExecution(request);return executeCreateLogPattern(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetTransitGatewayRouteTablePropagationsResult getTransitGatewayRouteTablePropagations(GetTransitGatewayRouteTablePropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayRouteTablePropagations(request);}",
    "output": "public virtual GetTransitGatewayRouteTablePropagationsResponse GetTransitGatewayRouteTablePropagations(GetTransitGatewayRouteTablePropagationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTransitGatewayRouteTablePropagationsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTransitGatewayRouteTablePropagationsResponseUnmarshaller.Instance;return Invoke<GetTransitGatewayRouteTablePropagationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetTransitGatewayRouteTablePropagationsResponse GetTransitGatewayRouteTablePropagations(GetTransitGatewayRouteTablePropagationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTransitGatewayRouteTablePropagationsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTransitGatewayRouteTablePropagationsResponseUnmarshaller.Instance;return Invoke<GetTransitGatewayRouteTablePropagationsResponse>(request, options);}",
    "output": "public GetTransitGatewayRouteTablePropagationsResult getTransitGatewayRouteTablePropagations(GetTransitGatewayRouteTablePropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayRouteTablePropagations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setup() throws Exception {super.setup();String inputDirProp = getRunData().getConfig().get(ADDINDEXES_INPUT_DIR, null);if (inputDirProp == null) {throw new IllegalArgumentException(\"config parameter \" + ADDINDEXES_INPUT_DIR + \" not specified in configuration\");}inputDir = FSDirectory.open(Paths.get(inputDirProp));}",
    "output": "public override void Setup(){base.Setup();string inputDirProp = RunData.Config.Get(ADDINDEXES_INPUT_DIR, null);if (inputDirProp == null){throw new ArgumentException(\"config parameter \" + ADDINDEXES_INPUT_DIR + \" not specified in configuration\");}inputDir = FSDirectory.Open(new DirectoryInfo(inputDirProp));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Setup(){base.Setup();string inputDirProp = RunData.Config.Get(ADDINDEXES_INPUT_DIR, null);if (inputDirProp == null){throw new ArgumentException(\"config parameter \" + ADDINDEXES_INPUT_DIR + \" not specified in configuration\");}inputDir = FSDirectory.Open(new DirectoryInfo(inputDirProp));}",
    "output": "public void setup() throws Exception {super.setup();String inputDirProp = getRunData().getConfig().get(ADDINDEXES_INPUT_DIR, null);if (inputDirProp == null) {throw new IllegalArgumentException(\"config parameter \" + ADDINDEXES_INPUT_DIR + \" not specified in configuration\");}inputDir = FSDirectory.open(Paths.get(inputDirProp));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StashDropCommand setAll(boolean all) {this.all = all;return this;}",
    "output": "public virtual NGit.Api.StashDropCommand SetAll(bool all){this.all = all;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.StashDropCommand SetAll(bool all){this.all = all;return this;}",
    "output": "public StashDropCommand setAll(boolean all) {this.all = all;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTrainingJobsForHyperParameterTuningJobResult listTrainingJobsForHyperParameterTuningJob(ListTrainingJobsForHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeListTrainingJobsForHyperParameterTuningJob(request);}",
    "output": "public virtual ListTrainingJobsForHyperParameterTuningJobResponse ListTrainingJobsForHyperParameterTuningJob(ListTrainingJobsForHyperParameterTuningJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrainingJobsForHyperParameterTuningJobRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrainingJobsForHyperParameterTuningJobResponseUnmarshaller.Instance;return Invoke<ListTrainingJobsForHyperParameterTuningJobResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTrainingJobsForHyperParameterTuningJobResponse ListTrainingJobsForHyperParameterTuningJob(ListTrainingJobsForHyperParameterTuningJobRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrainingJobsForHyperParameterTuningJobRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrainingJobsForHyperParameterTuningJobResponseUnmarshaller.Instance;return Invoke<ListTrainingJobsForHyperParameterTuningJobResponse>(request, options);}",
    "output": "public ListTrainingJobsForHyperParameterTuningJobResult listTrainingJobsForHyperParameterTuningJob(ListTrainingJobsForHyperParameterTuningJobRequest request) {request = beforeClientExecution(request);return executeListTrainingJobsForHyperParameterTuningJob(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return String.format(\"Match %s; found %d labels\",succeeded() ? \"succeeded\" : \"failed\",getLabels().size());}",
    "output": "public override string ToString(){return string.Format(\"Match {0}; found {1} labels\", Succeeded ? \"succeeded\" : \"failed\", Labels.Count);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return string.Format(\"Match {0}; found {1} labels\", Succeeded ? \"succeeded\" : \"failed\", Labels.Count);}",
    "output": "public String toString() {return String.format(\"Match %s; found %d labels\",succeeded() ? \"succeeded\" : \"failed\",getLabels().size());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double result;try {double d = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = evaluate(d);checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){double result;try{double d = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = Evaluate(d);NumericFunction.CheckValue(result);}catch (EvaluationException e){return e.GetErrorEval();}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){double result;try{double d = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = Evaluate(d);NumericFunction.CheckValue(result);}catch (EvaluationException e){return e.GetErrorEval();}return new NumberEval(result);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double result;try {double d = singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);result = evaluate(d);checkValue(result);} catch (EvaluationException e) {return e.getErrorEval();}return new NumberEval(result);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CacheSecurityGroup authorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeCacheSecurityGroupIngress(request);}",
    "output": "public virtual AuthorizeCacheSecurityGroupIngressResponse AuthorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request){var options = new InvokeOptions();options.RequestMarshaller = AuthorizeCacheSecurityGroupIngressRequestMarshaller.Instance;options.ResponseUnmarshaller = AuthorizeCacheSecurityGroupIngressResponseUnmarshaller.Instance;return Invoke<AuthorizeCacheSecurityGroupIngressResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AuthorizeCacheSecurityGroupIngressResponse AuthorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request){var options = new InvokeOptions();options.RequestMarshaller = AuthorizeCacheSecurityGroupIngressRequestMarshaller.Instance;options.ResponseUnmarshaller = AuthorizeCacheSecurityGroupIngressResponseUnmarshaller.Instance;return Invoke<AuthorizeCacheSecurityGroupIngressResponse>(request, options);}",
    "output": "public CacheSecurityGroup authorizeCacheSecurityGroupIngress(AuthorizeCacheSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeCacheSecurityGroupIngress(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getInflectionType() {return dictionary.getInflectionType(wordId);}",
    "output": "public virtual string GetInflectionType(){return dictionary.GetInflectionType(wordId);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetInflectionType(){return dictionary.GetInflectionType(wordId);}",
    "output": "public String getInflectionType() {return dictionary.getInflectionType(wordId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean remove(Object o) {return contains(o) &&(removeValuesForKey(((Multiset.Entry<?>) o).getElement()) > 0);}",
    "output": "public override bool remove(object o){if (!(o is java.util.MapClass.Entry<K, V>)){return false;}java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;return this._enclosing.removeMapping(e.getKey(), e.getValue());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool remove(object o){if (!(o is java.util.MapClass.Entry<K, V>)){return false;}java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;return this._enclosing.removeMapping(e.getKey(), e.getValue());}",
    "output": "@Override public boolean remove(Object o) {return contains(o) &&(removeValuesForKey(((Multiset.Entry<?>) o).getElement()) > 0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevCommit next() {RevCommit r = next;next = nextForIterator();return r;}",
    "output": "public virtual RevCommit Next(){return pending.Next();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RevCommit Next(){return pending.Next();}",
    "output": "public RevCommit next() {RevCommit r = next;next = nextForIterator();return r;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BatchAssociateUserStackResult batchAssociateUserStack(BatchAssociateUserStackRequest request) {request = beforeClientExecution(request);return executeBatchAssociateUserStack(request);}",
    "output": "public virtual BatchAssociateUserStackResponse BatchAssociateUserStack(BatchAssociateUserStackRequest request){var options = new InvokeOptions();options.RequestMarshaller = BatchAssociateUserStackRequestMarshaller.Instance;options.ResponseUnmarshaller = BatchAssociateUserStackResponseUnmarshaller.Instance;return Invoke<BatchAssociateUserStackResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual BatchAssociateUserStackResponse BatchAssociateUserStack(BatchAssociateUserStackRequest request){var options = new InvokeOptions();options.RequestMarshaller = BatchAssociateUserStackRequestMarshaller.Instance;options.ResponseUnmarshaller = BatchAssociateUserStackResponseUnmarshaller.Instance;return Invoke<BatchAssociateUserStackResponse>(request, options);}",
    "output": "public BatchAssociateUserStackResult batchAssociateUserStack(BatchAssociateUserStackRequest request) {request = beforeClientExecution(request);return executeBatchAssociateUserStack(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ScenarioProtectRecord clone() {return copy();}",
    "output": "public override Object Clone(){ScenarioProtectRecord rec = new ScenarioProtectRecord();rec.field_1_protect = field_1_protect;return rec;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override Object Clone(){ScenarioProtectRecord rec = new ScenarioProtectRecord();rec.field_1_protect = field_1_protect;return rec;}",
    "output": "public ScenarioProtectRecord clone() {return copy();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final Class getBundleClass() {return bundleClass;}",
    "output": "public Type GetBundleClass(){return bundleClass;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Type GetBundleClass(){return bundleClass;}",
    "output": "public final Class getBundleClass() {return bundleClass;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void nextBuffer() {if (1+bufferUpto == buffers.length) {int[][] newBuffers = new int[(int) (buffers.length*1.5)][];System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);buffers = newBuffers;}buffer = buffers[1+bufferUpto] = allocator.getIntBlock();bufferUpto++;intUpto = 0;intOffset += INT_BLOCK_SIZE;}",
    "output": "public void NextBuffer(){if (1 + bufferUpto == buffers.Length){int[][] newBuffers = new int[(int)(buffers.Length * 1.5)][];Array.Copy(buffers, 0, newBuffers, 0, buffers.Length);buffers = newBuffers;}buffer = buffers[1 + bufferUpto] = allocator.GetInt32Block();bufferUpto++;Int32Upto = 0;Int32Offset += INT32_BLOCK_SIZE;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void NextBuffer(){if (1 + bufferUpto == buffers.Length){int[][] newBuffers = new int[(int)(buffers.Length * 1.5)][];Array.Copy(buffers, 0, newBuffers, 0, buffers.Length);buffers = newBuffers;}buffer = buffers[1 + bufferUpto] = allocator.GetInt32Block();bufferUpto++;Int32Upto = 0;Int32Offset += INT32_BLOCK_SIZE;}",
    "output": "public void nextBuffer() {if (1+bufferUpto == buffers.length) {int[][] newBuffers = new int[(int) (buffers.length*1.5)][];System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);buffers = newBuffers;}buffer = buffers[1+bufferUpto] = allocator.getIntBlock();bufferUpto++;intUpto = 0;intOffset += INT_BLOCK_SIZE;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteVpnGatewayRequest(String vpnGatewayId) {setVpnGatewayId(vpnGatewayId);}",
    "output": "public DeleteVpnGatewayRequest(string vpnGatewayId){_vpnGatewayId = vpnGatewayId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteVpnGatewayRequest(string vpnGatewayId){_vpnGatewayId = vpnGatewayId;}",
    "output": "public DeleteVpnGatewayRequest(String vpnGatewayId) {setVpnGatewayId(vpnGatewayId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Encoder getEncoder(Format format, int version, int bitsPerValue) {checkVersion(version);return BulkOperation.of(format, bitsPerValue);}",
    "output": "public static IEncoder GetEncoder(Format format, int version, int bitsPerValue){CheckVersion(version);return BulkOperation.Of(format, bitsPerValue);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static IEncoder GetEncoder(Format format, int version, int bitsPerValue){CheckVersion(version);return BulkOperation.Of(format, bitsPerValue);}",
    "output": "public static Encoder getEncoder(Format format, int version, int bitsPerValue) {checkVersion(version);return BulkOperation.of(format, bitsPerValue);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ClassificationResult(T assignedClass, double score) {this.assignedClass = assignedClass;this.score = score;}",
    "output": "public ClassificationResult(T assignedClass, double score){_assignedClass = assignedClass;_score = score;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ClassificationResult(T assignedClass, double score){_assignedClass = assignedClass;_score = score;}",
    "output": "public ClassificationResult(T assignedClass, double score) {this.assignedClass = assignedClass;this.score = score;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateRelationalDatabaseSnapshotResult createRelationalDatabaseSnapshot(CreateRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseSnapshot(request);}",
    "output": "public virtual CreateRelationalDatabaseSnapshotResponse CreateRelationalDatabaseSnapshot(CreateRelationalDatabaseSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateRelationalDatabaseSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateRelationalDatabaseSnapshotResponseUnmarshaller.Instance;return Invoke<CreateRelationalDatabaseSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateRelationalDatabaseSnapshotResponse CreateRelationalDatabaseSnapshot(CreateRelationalDatabaseSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateRelationalDatabaseSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateRelationalDatabaseSnapshotResponseUnmarshaller.Instance;return Invoke<CreateRelationalDatabaseSnapshotResponse>(request, options);}",
    "output": "public CreateRelationalDatabaseSnapshotResult createRelationalDatabaseSnapshot(CreateRelationalDatabaseSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NameRecord addName(NameRecord name) {getOrCreateLinkTable().addName(name);return name;}",
    "output": "public NameRecord AddName(NameRecord name){OrCreateLinkTable.AddName(name);return name;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NameRecord AddName(NameRecord name){OrCreateLinkTable.AddName(name);return name;}",
    "output": "public NameRecord addName(NameRecord name) {getOrCreateLinkTable().addName(name);return name;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeByte(getFirstColumn());out.writeByte(getLastColumn());}",
    "output": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(FirstRow);out1.WriteShort(LastRow);out1.WriteByte(FirstColumn);out1.WriteByte(LastColumn);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(FirstRow);out1.WriteShort(LastRow);out1.WriteByte(FirstColumn);out1.WriteByte(LastColumn);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(getFirstRow());out.writeShort(getLastRow());out.writeByte(getFirstColumn());out.writeByte(getLastColumn());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getKey() {return key;}",
    "output": "public virtual string GetKey(){return key;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetKey(){return key;}",
    "output": "public String getKey() {return key;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetBlockPublicAccessConfigurationResult getBlockPublicAccessConfiguration(GetBlockPublicAccessConfigurationRequest request) {request = beforeClientExecution(request);return executeGetBlockPublicAccessConfiguration(request);}",
    "output": "public virtual GetBlockPublicAccessConfigurationResponse GetBlockPublicAccessConfiguration(GetBlockPublicAccessConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetBlockPublicAccessConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetBlockPublicAccessConfigurationResponseUnmarshaller.Instance;return Invoke<GetBlockPublicAccessConfigurationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetBlockPublicAccessConfigurationResponse GetBlockPublicAccessConfiguration(GetBlockPublicAccessConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetBlockPublicAccessConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = GetBlockPublicAccessConfigurationResponseUnmarshaller.Instance;return Invoke<GetBlockPublicAccessConfigurationResponse>(request, options);}",
    "output": "public GetBlockPublicAccessConfigurationResult getBlockPublicAccessConfiguration(GetBlockPublicAccessConfigurationRequest request) {request = beforeClientExecution(request);return executeGetBlockPublicAccessConfiguration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static long getResultSize(byte[] delta) {int p = 0;int c;do {c = delta[p++] & 0xff;} while ((c & 0x80) != 0);long resLen = 0;int shift = 0;do {c = delta[p++] & 0xff;resLen |= ((long) (c & 0x7f)) << shift;shift += 7;} while ((c & 0x80) != 0);return resLen;}",
    "output": "public static long GetResultSize(byte[] delta){int p = 0;int c;do{c = delta[p++] & unchecked((int)(0xff));}while ((c & unchecked((int)(0x80))) != 0);long resLen = 0;int shift = 0;do{c = delta[p++] & unchecked((int)(0xff));resLen |= ((long)(c & unchecked((int)(0x7f)))) << shift;shift += 7;}while ((c & unchecked((int)(0x80))) != 0);return resLen;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static long GetResultSize(byte[] delta){int p = 0;int c;do{c = delta[p++] & unchecked((int)(0xff));}while ((c & unchecked((int)(0x80))) != 0);long resLen = 0;int shift = 0;do{c = delta[p++] & unchecked((int)(0xff));resLen |= ((long)(c & unchecked((int)(0x7f)))) << shift;shift += 7;}while ((c & unchecked((int)(0x80))) != 0);return resLen;}",
    "output": "public static long getResultSize(byte[] delta) {int p = 0;int c;do {c = delta[p++] & 0xff;} while ((c & 0x80) != 0);long resLen = 0;int shift = 0;do {c = delta[p++] & 0xff;resLen |= ((long) (c & 0x7f)) << shift;shift += 7;} while ((c & 0x80) != 0);return resLen;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + Integer.BYTES);}",
    "output": "public override long RamBytesUsed(){return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT32);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long RamBytesUsed(){return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT32);}",
    "output": "public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + Integer.BYTES);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NoteRecord() {field_6_author = \"\";field_3_flags = 0;field_7_padding = DEFAULT_PADDING; }",
    "output": "public NoteRecord(){field_6_author = \"\";field_3_flags = 0;field_7_padding = DEFAULT_PADDING; }"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NoteRecord(){field_6_author = \"\";field_3_flags = 0;field_7_padding = DEFAULT_PADDING; }",
    "output": "public NoteRecord() {field_6_author = \"\";field_3_flags = 0;field_7_padding = DEFAULT_PADDING; }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CellReference[] getAllReferencedCells() {if(_isSingleCell) {return  new CellReference[] { _firstCell, };}int minRow = Math.min(_firstCell.getRow(), _lastCell.getRow());int maxRow = Math.max(_firstCell.getRow(), _lastCell.getRow());int minCol = Math.min(_firstCell.getCol(), _lastCell.getCol());int maxCol = Math.max(_firstCell.getCol(), _lastCell.getCol());String sheetName = _firstCell.getSheetName();List<CellReference> refs = new ArrayList<>();for(int row=minRow; row<=maxRow; row++) {for(int col=minCol; col<=maxCol; col++) {CellReference ref = new CellReference(sheetName, row, col, _firstCell.isRowAbsolute(), _firstCell.isColAbsolute());refs.add(ref);}}return refs.toArray(new CellReference[0]);}",
    "output": "public CellReference[] GetAllReferencedCells(){if (_isSingleCell){return new CellReference[] { _firstCell, };}int minRow = Math.Min(_firstCell.Row, _lastCell.Row);int maxRow = Math.Max(_firstCell.Row, _lastCell.Row);int minCol = Math.Min(_firstCell.Col, _lastCell.Col);int maxCol = Math.Max(_firstCell.Col, _lastCell.Col);String sheetName = _firstCell.SheetName;ArrayList refs = new ArrayList();for (int row = minRow; row <= maxRow; row++){for (int col = minCol; col <= maxCol; col++){CellReference ref1 = new CellReference(sheetName, row, col, _firstCell.IsRowAbsolute, _firstCell.IsColAbsolute);refs.Add(ref1);}}return (CellReference[])refs.ToArray(typeof(CellReference));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CellReference[] GetAllReferencedCells(){if (_isSingleCell){return new CellReference[] { _firstCell, };}int minRow = Math.Min(_firstCell.Row, _lastCell.Row);int maxRow = Math.Max(_firstCell.Row, _lastCell.Row);int minCol = Math.Min(_firstCell.Col, _lastCell.Col);int maxCol = Math.Max(_firstCell.Col, _lastCell.Col);String sheetName = _firstCell.SheetName;ArrayList refs = new ArrayList();for (int row = minRow; row <= maxRow; row++){for (int col = minCol; col <= maxCol; col++){CellReference ref1 = new CellReference(sheetName, row, col, _firstCell.IsRowAbsolute, _firstCell.IsColAbsolute);refs.Add(ref1);}}return (CellReference[])refs.ToArray(typeof(CellReference));}",
    "output": "public CellReference[] getAllReferencedCells() {if(_isSingleCell) {return  new CellReference[] { _firstCell, };}int minRow = Math.min(_firstCell.getRow(), _lastCell.getRow());int maxRow = Math.max(_firstCell.getRow(), _lastCell.getRow());int minCol = Math.min(_firstCell.getCol(), _lastCell.getCol());int maxCol = Math.max(_firstCell.getCol(), _lastCell.getCol());String sheetName = _firstCell.getSheetName();List<CellReference> refs = new ArrayList<>();for(int row=minRow; row<=maxRow; row++) {for(int col=minCol; col<=maxCol; col++) {CellReference ref = new CellReference(sheetName, row, col, _firstCell.isRowAbsolute(), _firstCell.isColAbsolute());refs.add(ref);}}return refs.toArray(new CellReference[0]);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String[] listAll() {ensureOpen();String[] res = entries.keySet().toArray(new String[entries.size()]);for (int i = 0; i < res.length; i++) {res[i] = segmentName + res[i];}return res;}",
    "output": "public override string[] ListAll(){EnsureOpen();string[] res;if (writer != null){res = writer.ListAll();}else{res = entries.Keys.ToArray();string seg = IndexFileNames.ParseSegmentName(fileName);for (int i = 0; i < res.Length; i++){res[i] = seg + res[i];}}return res;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string[] ListAll(){EnsureOpen();string[] res;if (writer != null){res = writer.ListAll();}else{res = entries.Keys.ToArray();string seg = IndexFileNames.ParseSegmentName(fileName);for (int i = 0; i < res.Length; i++){res[i] = seg + res[i];}}return res;}",
    "output": "public String[] listAll() {ensureOpen();String[] res = entries.keySet().toArray(new String[entries.size()]);for (int i = 0; i < res.length; i++) {res[i] = segmentName + res[i];}return res;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateDataRetentionResult updateDataRetention(UpdateDataRetentionRequest request) {request = beforeClientExecution(request);return executeUpdateDataRetention(request);}",
    "output": "public virtual UpdateDataRetentionResponse UpdateDataRetention(UpdateDataRetentionRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDataRetentionRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDataRetentionResponseUnmarshaller.Instance;return Invoke<UpdateDataRetentionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateDataRetentionResponse UpdateDataRetention(UpdateDataRetentionRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDataRetentionRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDataRetentionResponseUnmarshaller.Instance;return Invoke<UpdateDataRetentionResponse>(request, options);}",
    "output": "public UpdateDataRetentionResult updateDataRetention(UpdateDataRetentionRequest request) {request = beforeClientExecution(request);return executeUpdateDataRetention(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateDistributionRequest(DistributionConfig distributionConfig) {setDistributionConfig(distributionConfig);}",
    "output": "public CreateDistributionRequest(DistributionConfig distributionConfig){_distributionConfig = distributionConfig;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CreateDistributionRequest(DistributionConfig distributionConfig){_distributionConfig = distributionConfig;}",
    "output": "public CreateDistributionRequest(DistributionConfig distributionConfig) {setDistributionConfig(distributionConfig);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeBatchPredictionsResult describeBatchPredictions(DescribeBatchPredictionsRequest request) {request = beforeClientExecution(request);return executeDescribeBatchPredictions(request);}",
    "output": "public virtual DescribeBatchPredictionsResponse DescribeBatchPredictions(DescribeBatchPredictionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeBatchPredictionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeBatchPredictionsResponseUnmarshaller.Instance;return Invoke<DescribeBatchPredictionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeBatchPredictionsResponse DescribeBatchPredictions(DescribeBatchPredictionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeBatchPredictionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeBatchPredictionsResponseUnmarshaller.Instance;return Invoke<DescribeBatchPredictionsResponse>(request, options);}",
    "output": "public DescribeBatchPredictionsResult describeBatchPredictions(DescribeBatchPredictionsRequest request) {request = beforeClientExecution(request);return executeDescribeBatchPredictions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public float getScore(int index) {return scores[index];}",
    "output": "public virtual float GetScore(int index){return scores[index];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual float GetScore(int index){return scores[index];}",
    "output": "public float getScore(int index) {return scores[index];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BatchUpdatePhoneNumberResult batchUpdatePhoneNumber(BatchUpdatePhoneNumberRequest request) {request = beforeClientExecution(request);return executeBatchUpdatePhoneNumber(request);}",
    "output": "public virtual BatchUpdatePhoneNumberResponse BatchUpdatePhoneNumber(BatchUpdatePhoneNumberRequest request){var options = new InvokeOptions();options.RequestMarshaller = BatchUpdatePhoneNumberRequestMarshaller.Instance;options.ResponseUnmarshaller = BatchUpdatePhoneNumberResponseUnmarshaller.Instance;return Invoke<BatchUpdatePhoneNumberResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual BatchUpdatePhoneNumberResponse BatchUpdatePhoneNumber(BatchUpdatePhoneNumberRequest request){var options = new InvokeOptions();options.RequestMarshaller = BatchUpdatePhoneNumberRequestMarshaller.Instance;options.ResponseUnmarshaller = BatchUpdatePhoneNumberResponseUnmarshaller.Instance;return Invoke<BatchUpdatePhoneNumberResponse>(request, options);}",
    "output": "public BatchUpdatePhoneNumberResult batchUpdatePhoneNumber(BatchUpdatePhoneNumberRequest request) {request = beforeClientExecution(request);return executeBatchUpdatePhoneNumber(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LMSimilarity(CollectionModel collectionModel) {this.collectionModel = collectionModel;}",
    "output": "public LMSimilarity(ICollectionModel collectionModel){this.m_collectionModel = collectionModel;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LMSimilarity(ICollectionModel collectionModel){this.m_collectionModel = collectionModel;}",
    "output": "public LMSimilarity(CollectionModel collectionModel) {this.collectionModel = collectionModel;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetGlobalSettingsResult getGlobalSettings(GetGlobalSettingsRequest request) {request = beforeClientExecution(request);return executeGetGlobalSettings(request);}",
    "output": "public virtual GetGlobalSettingsResponse GetGlobalSettings(GetGlobalSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGlobalSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGlobalSettingsResponseUnmarshaller.Instance;return Invoke<GetGlobalSettingsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetGlobalSettingsResponse GetGlobalSettings(GetGlobalSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetGlobalSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetGlobalSettingsResponseUnmarshaller.Instance;return Invoke<GetGlobalSettingsResponse>(request, options);}",
    "output": "public GetGlobalSettingsResult getGlobalSettings(GetGlobalSettingsRequest request) {request = beforeClientExecution(request);return executeGetGlobalSettings(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateHITTypeResult createHITType(CreateHITTypeRequest request) {request = beforeClientExecution(request);return executeCreateHITType(request);}",
    "output": "public virtual CreateHITTypeResponse CreateHITType(CreateHITTypeRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateHITTypeRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateHITTypeResponseUnmarshaller.Instance;return Invoke<CreateHITTypeResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateHITTypeResponse CreateHITType(CreateHITTypeRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateHITTypeRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateHITTypeResponseUnmarshaller.Instance;return Invoke<CreateHITTypeResponse>(request, options);}",
    "output": "public CreateHITTypeResult createHITType(CreateHITTypeRequest request) {request = beforeClientExecution(request);return executeCreateHITType(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MLTConfig build() {return new MLTConfig(this);}",
    "output": "public CompositeReaderContext Build(){return (CompositeReaderContext)Build(null, reader, 0, 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CompositeReaderContext Build(){return (CompositeReaderContext)Build(null, reader, 0, 0);}",
    "output": "public MLTConfig build() {return new MLTConfig(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharsRef(String string) {this.chars = string.toCharArray();this.offset = 0;this.length = chars.length;}",
    "output": "public CharsRef(string @string){this.chars = @string.ToCharArray();this.Offset = 0;this.Length = chars.Length;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CharsRef(string @string){this.chars = @string.ToCharArray();this.Offset = 0;this.Length = chars.Length;}",
    "output": "public CharsRef(String string) {this.chars = string.toCharArray();this.offset = 0;this.length = chars.length;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListFargateProfilesResult listFargateProfiles(ListFargateProfilesRequest request) {request = beforeClientExecution(request);return executeListFargateProfiles(request);}",
    "output": "public virtual ListFargateProfilesResponse ListFargateProfiles(ListFargateProfilesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListFargateProfilesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListFargateProfilesResponseUnmarshaller.Instance;return Invoke<ListFargateProfilesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListFargateProfilesResponse ListFargateProfiles(ListFargateProfilesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListFargateProfilesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListFargateProfilesResponseUnmarshaller.Instance;return Invoke<ListFargateProfilesResponse>(request, options);}",
    "output": "public ListFargateProfilesResult listFargateProfiles(ListFargateProfilesRequest request) {request = beforeClientExecution(request);return executeListFargateProfiles(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Entry<K, V> floorEntry(K key) {return immutableCopy(findBounded(key, FLOOR));}",
    "output": "public java.util.MapClass.Entry<K, V> floorEntry(K key){return this._enclosing.immutableCopy(this.findBounded(key, java.util.TreeMap.Relation.FLOOR));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.util.MapClass.Entry<K, V> floorEntry(K key){return this._enclosing.immutableCopy(this.findBounded(key, java.util.TreeMap.Relation.FLOOR));}",
    "output": "public Entry<K, V> floorEntry(K key) {return immutableCopy(findBounded(key, FLOOR));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals( Object o ) {return o instanceof NorwegianStemmer;}",
    "output": "public override bool Equals(object o){return o is NorwegianStemmer;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){return o is NorwegianStemmer;}",
    "output": "public boolean equals( Object o ) {return o instanceof NorwegianStemmer;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteVaultNotificationsResult deleteVaultNotifications(DeleteVaultNotificationsRequest request) {request = beforeClientExecution(request);return executeDeleteVaultNotifications(request);}",
    "output": "public virtual DeleteVaultNotificationsResponse DeleteVaultNotifications(DeleteVaultNotificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteVaultNotificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteVaultNotificationsResponseUnmarshaller.Instance;return Invoke<DeleteVaultNotificationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteVaultNotificationsResponse DeleteVaultNotifications(DeleteVaultNotificationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteVaultNotificationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteVaultNotificationsResponseUnmarshaller.Instance;return Invoke<DeleteVaultNotificationsResponse>(request, options);}",
    "output": "public DeleteVaultNotificationsResult deleteVaultNotifications(DeleteVaultNotificationsRequest request) {request = beforeClientExecution(request);return executeDeleteVaultNotifications(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static boolean endsWith(char s[], int len, String suffix) {final int suffixLen = suffix.length();if (suffixLen > len)return false;for (int i = suffixLen - 1; i >= 0; i--)if (s[len -(suffixLen - i)] != suffix.charAt(i))return false;return true;}",
    "output": "public static bool EndsWith(char[] s, int len, string suffix){int suffixLen = suffix.Length;if (suffixLen > len){return false;}for (int i = suffixLen - 1; i >= 0; i--){if (s[len - (suffixLen - i)] != suffix[i]){return false;}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static bool EndsWith(char[] s, int len, string suffix){int suffixLen = suffix.Length;if (suffixLen > len){return false;}for (int i = suffixLen - 1; i >= 0; i--){if (s[len - (suffixLen - i)] != suffix[i]){return false;}}return true;}",
    "output": "public static boolean endsWith(char s[], int len, String suffix) {final int suffixLen = suffix.length();if (suffixLen > len)return false;for (int i = suffixLen - 1; i >= 0; i--)if (s[len -(suffixLen - i)] != suffix.charAt(i))return false;return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized void setRequireDimCount(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.requireDimCount = v;}",
    "output": "public virtual void SetRequireDimCount(string dimName, bool v){lock (this){if (!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)){fieldTypes[dimName] = new DimConfig { RequireDimCount = v };}else{fieldType.RequireDimCount = v;}}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetRequireDimCount(string dimName, bool v){lock (this){if (!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)){fieldTypes[dimName] = new DimConfig { RequireDimCount = v };}else{fieldType.RequireDimCount = v;}}}",
    "output": "public synchronized void setRequireDimCount(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.requireDimCount = v;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public HSSFName getName(String name) {int nameIndex = getNameIndex(name);if (nameIndex < 0) {return null;}return names.get(nameIndex);}",
    "output": "public NPOI.SS.UserModel.IName GetName(String name){int nameIndex = GetNameIndex(name);if (nameIndex < 0){return null;}return (HSSFName)names[nameIndex];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NPOI.SS.UserModel.IName GetName(String name){int nameIndex = GetNameIndex(name);if (nameIndex < 0){return null;}return (HSSFName)names[nameIndex];}",
    "output": "public HSSFName getName(String name) {int nameIndex = getNameIndex(name);if (nameIndex < 0) {return null;}return names.get(nameIndex);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ScriptBootstrapActionConfig(String path, java.util.List<String> args) {setPath(path);setArgs(args);}",
    "output": "public ScriptBootstrapActionConfig(string path, List<string> args){_path = path;_args = args;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ScriptBootstrapActionConfig(string path, List<string> args){_path = path;_args = args;}",
    "output": "public ScriptBootstrapActionConfig(String path, java.util.List<String> args) {setPath(path);setArgs(args);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RegisterApplicationRevisionResult registerApplicationRevision(RegisterApplicationRevisionRequest request) {request = beforeClientExecution(request);return executeRegisterApplicationRevision(request);}",
    "output": "public virtual RegisterApplicationRevisionResponse RegisterApplicationRevision(RegisterApplicationRevisionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterApplicationRevisionRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterApplicationRevisionResponseUnmarshaller.Instance;return Invoke<RegisterApplicationRevisionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RegisterApplicationRevisionResponse RegisterApplicationRevision(RegisterApplicationRevisionRequest request){var options = new InvokeOptions();options.RequestMarshaller = RegisterApplicationRevisionRequestMarshaller.Instance;options.ResponseUnmarshaller = RegisterApplicationRevisionResponseUnmarshaller.Instance;return Invoke<RegisterApplicationRevisionResponse>(request, options);}",
    "output": "public RegisterApplicationRevisionResult registerApplicationRevision(RegisterApplicationRevisionRequest request) {request = beforeClientExecution(request);return executeRegisterApplicationRevision(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SendTestEventNotificationResult sendTestEventNotification(SendTestEventNotificationRequest request) {request = beforeClientExecution(request);return executeSendTestEventNotification(request);}",
    "output": "public virtual SendTestEventNotificationResponse SendTestEventNotification(SendTestEventNotificationRequest request){var options = new InvokeOptions();options.RequestMarshaller = SendTestEventNotificationRequestMarshaller.Instance;options.ResponseUnmarshaller = SendTestEventNotificationResponseUnmarshaller.Instance;return Invoke<SendTestEventNotificationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SendTestEventNotificationResponse SendTestEventNotification(SendTestEventNotificationRequest request){var options = new InvokeOptions();options.RequestMarshaller = SendTestEventNotificationRequestMarshaller.Instance;options.ResponseUnmarshaller = SendTestEventNotificationResponseUnmarshaller.Instance;return Invoke<SendTestEventNotificationResponse>(request, options);}",
    "output": "public SendTestEventNotificationResult sendTestEventNotification(SendTestEventNotificationRequest request) {request = beforeClientExecution(request);return executeSendTestEventNotification(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setRefLogIdent(PersonIdent pi) {refLogIdent = pi;}",
    "output": "public virtual void SetRefLogIdent(PersonIdent pi){refLogIdent = pi;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetRefLogIdent(PersonIdent pi){refLogIdent = pi;}",
    "output": "public void setRefLogIdent(PersonIdent pi) {refLogIdent = pi;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDomainDeliverabilityCampaignResult getDomainDeliverabilityCampaign(GetDomainDeliverabilityCampaignRequest request) {request = beforeClientExecution(request);return executeGetDomainDeliverabilityCampaign(request);}",
    "output": "public virtual GetDomainDeliverabilityCampaignResponse GetDomainDeliverabilityCampaign(GetDomainDeliverabilityCampaignRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDomainDeliverabilityCampaignRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDomainDeliverabilityCampaignResponseUnmarshaller.Instance;return Invoke<GetDomainDeliverabilityCampaignResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetDomainDeliverabilityCampaignResponse GetDomainDeliverabilityCampaign(GetDomainDeliverabilityCampaignRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDomainDeliverabilityCampaignRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDomainDeliverabilityCampaignResponseUnmarshaller.Instance;return Invoke<GetDomainDeliverabilityCampaignResponse>(request, options);}",
    "output": "public GetDomainDeliverabilityCampaignResult getDomainDeliverabilityCampaign(GetDomainDeliverabilityCampaignRequest request) {request = beforeClientExecution(request);return executeGetDomainDeliverabilityCampaign(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString() {StringBuilder b = new StringBuilder();b.append(\"{\");for (int y = 0; y < _nRows; y++) {if (y > 0) {b.append(\";\");}for (int x = 0; x < _nColumns; x++) {if (x > 0) {b.append(\",\");}Object o = _arrayValues[getValueIndex(x, y)];b.append(getConstantText(o));}}b.append(\"}\");return b.toString();}",
    "output": "public override String ToFormulaString(){StringBuilder b = new StringBuilder();b.Append(\"{\");for (int y = 0; y < RowCount; y++){if (y > 0){b.Append(\";\");}for (int x = 0; x < ColumnCount; x++){if (x > 0){b.Append(\",\");}Object o = _arrayValues.GetValue(GetValueIndex(x, y));b.Append(GetConstantText(o));}}b.Append(\"}\");return b.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){StringBuilder b = new StringBuilder();b.Append(\"{\");for (int y = 0; y < RowCount; y++){if (y > 0){b.Append(\";\");}for (int x = 0; x < ColumnCount; x++){if (x > 0){b.Append(\",\");}Object o = _arrayValues.GetValue(GetValueIndex(x, y));b.Append(GetConstantText(o));}}b.Append(\"}\");return b.ToString();}",
    "output": "public String toFormulaString() {StringBuilder b = new StringBuilder();b.append(\"{\");for (int y = 0; y < _nRows; y++) {if (y > 0) {b.append(\";\");}for (int x = 0; x < _nColumns; x++) {if (x > 0) {b.append(\",\");}Object o = _arrayValues[getValueIndex(x, y)];b.append(getConstantText(o));}}b.append(\"}\");return b.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ShingleFilterFactory(Map<String, String> args) {super(args);maxShingleSize = getInt(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);if (maxShingleSize < 2) {throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");}minShingleSize = getInt(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);if (minShingleSize < 2) {throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");}if (minShingleSize > maxShingleSize) {throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");}outputUnigrams = getBoolean(args, \"outputUnigrams\", true);outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);tokenSeparator = get(args, \"tokenSeparator\", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);fillerToken = get(args, \"fillerToken\", ShingleFilter.DEFAULT_FILLER_TOKEN);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public ShingleFilterFactory(IDictionary<string, string> args): base(args){maxShingleSize = GetInt32(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);if (maxShingleSize < 2){throw new ArgumentOutOfRangeException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");}minShingleSize = GetInt32(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);if (minShingleSize < 2){throw new ArgumentOutOfRangeException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");}if (minShingleSize > maxShingleSize){throw new ArgumentOutOfRangeException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");}outputUnigrams = GetBoolean(args, \"outputUnigrams\", true);outputUnigramsIfNoShingles = GetBoolean(args, \"outputUnigramsIfNoShingles\", false);tokenSeparator = Get(args, \"tokenSeparator\", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);fillerToken = Get(args, \"fillerToken\", ShingleFilter.DEFAULT_FILLER_TOKEN);if (args.Count > 0){throw new ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ShingleFilterFactory(IDictionary<string, string> args): base(args){maxShingleSize = GetInt32(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);if (maxShingleSize < 2){throw new ArgumentOutOfRangeException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");}minShingleSize = GetInt32(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);if (minShingleSize < 2){throw new ArgumentOutOfRangeException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");}if (minShingleSize > maxShingleSize){throw new ArgumentOutOfRangeException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");}outputUnigrams = GetBoolean(args, \"outputUnigrams\", true);outputUnigramsIfNoShingles = GetBoolean(args, \"outputUnigramsIfNoShingles\", false);tokenSeparator = Get(args, \"tokenSeparator\", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);fillerToken = Get(args, \"fillerToken\", ShingleFilter.DEFAULT_FILLER_TOKEN);if (args.Count > 0){throw new ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public ShingleFilterFactory(Map<String, String> args) {super(args);maxShingleSize = getInt(args, \"maxShingleSize\", ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE);if (maxShingleSize < 2) {throw new IllegalArgumentException(\"Invalid maxShingleSize (\" + maxShingleSize + \") - must be at least 2\");}minShingleSize = getInt(args, \"minShingleSize\", ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE);if (minShingleSize < 2) {throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be at least 2\");}if (minShingleSize > maxShingleSize) {throw new IllegalArgumentException(\"Invalid minShingleSize (\" + minShingleSize + \") - must be no greater than maxShingleSize (\" + maxShingleSize + \")\");}outputUnigrams = getBoolean(args, \"outputUnigrams\", true);outputUnigramsIfNoShingles = getBoolean(args, \"outputUnigramsIfNoShingles\", false);tokenSeparator = get(args, \"tokenSeparator\", ShingleFilter.DEFAULT_TOKEN_SEPARATOR);fillerToken = get(args, \"fillerToken\", ShingleFilter.DEFAULT_FILLER_TOKEN);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateRelationalDatabaseParametersResult updateRelationalDatabaseParameters(UpdateRelationalDatabaseParametersRequest request) {request = beforeClientExecution(request);return executeUpdateRelationalDatabaseParameters(request);}",
    "output": "public virtual UpdateRelationalDatabaseParametersResponse UpdateRelationalDatabaseParameters(UpdateRelationalDatabaseParametersRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateRelationalDatabaseParametersRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateRelationalDatabaseParametersResponseUnmarshaller.Instance;return Invoke<UpdateRelationalDatabaseParametersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateRelationalDatabaseParametersResponse UpdateRelationalDatabaseParameters(UpdateRelationalDatabaseParametersRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateRelationalDatabaseParametersRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateRelationalDatabaseParametersResponseUnmarshaller.Instance;return Invoke<UpdateRelationalDatabaseParametersResponse>(request, options);}",
    "output": "public UpdateRelationalDatabaseParametersResult updateRelationalDatabaseParameters(UpdateRelationalDatabaseParametersRequest request) {request = beforeClientExecution(request);return executeUpdateRelationalDatabaseParameters(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Collection<ParseTree> findAllRuleNodes(ParseTree t, int ruleIndex) {return findAllNodes(t, ruleIndex, false);}",
    "output": "public static ICollection<IParseTree> FindAllRuleNodes(IParseTree t, int ruleIndex){return FindAllNodes(t, ruleIndex, false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static ICollection<IParseTree> FindAllRuleNodes(IParseTree t, int ruleIndex){return FindAllNodes(t, ruleIndex, false);}",
    "output": "public static Collection<ParseTree> findAllRuleNodes(ParseTree t, int ruleIndex) {return findAllNodes(t, ruleIndex, false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getObjectCount() {return entryCount;}",
    "output": "public virtual int GetObjectCount(){return entryCount;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetObjectCount(){return entryCount;}",
    "output": "public int getObjectCount() {return entryCount;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ActionTransition(ATNState target, int ruleIndex, int actionIndex, boolean isCtxDependent) {super(target);this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;this.isCtxDependent = isCtxDependent;}",
    "output": "public ActionTransition(ATNState target, int ruleIndex, int actionIndex, bool isCtxDependent): base(target){this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;this.isCtxDependent = isCtxDependent;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ActionTransition(ATNState target, int ruleIndex, int actionIndex, bool isCtxDependent): base(target){this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;this.isCtxDependent = isCtxDependent;}",
    "output": "public ActionTransition(ATNState target, int ruleIndex, int actionIndex, boolean isCtxDependent) {super(target);this.ruleIndex = ruleIndex;this.actionIndex = actionIndex;this.isCtxDependent = isCtxDependent;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long get(int index) {final int blockOffset = index / valuesPerBlock;final long skip = ((long) blockOffset) << 3;try {in.seek(startPointer + skip);long block = in.readLong();final int offsetInBlock = index % valuesPerBlock;return (block >>> (offsetInBlock * bitsPerValue)) & mask;} catch (IOException e) {throw new IllegalStateException(\"failed\", e);}}",
    "output": "public override long Get(int index){int blockOffset = index / valuesPerBlock;long skip = ((long)blockOffset) << 3;try{@in.Seek(startPointer + skip);long block = @in.ReadInt64();int offsetInBlock = index % valuesPerBlock;return ((long)((ulong)block >> (offsetInBlock * m_bitsPerValue))) & mask;}catch (System.IO.IOException e){throw new InvalidOperationException(\"failed\", e);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long Get(int index){int blockOffset = index / valuesPerBlock;long skip = ((long)blockOffset) << 3;try{@in.Seek(startPointer + skip);long block = @in.ReadInt64();int offsetInBlock = index % valuesPerBlock;return ((long)((ulong)block >> (offsetInBlock * m_bitsPerValue))) & mask;}catch (System.IO.IOException e){throw new InvalidOperationException(\"failed\", e);}}",
    "output": "public long get(int index) {final int blockOffset = index / valuesPerBlock;final long skip = ((long) blockOffset) << 3;try {in.seek(startPointer + skip);long block = in.readLong();final int offsetInBlock = index % valuesPerBlock;return (block >>> (offsetInBlock * bitsPerValue)) & mask;} catch (IOException e) {throw new IllegalStateException(\"failed\", e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getSignerType() {return \"BEARERTOKEN\";}",
    "output": "public override string GetSignerType(){return \"BEARERTOKEN\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string GetSignerType(){return \"BEARERTOKEN\";}",
    "output": "public String getSignerType() {return \"BEARERTOKEN\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PipedOutputStream(PipedInputStream target) throws IOException {connect(target);}",
    "output": "public PipedOutputStream(java.io.PipedInputStream target){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PipedOutputStream(java.io.PipedInputStream target){throw new System.NotImplementedException();}",
    "output": "public PipedOutputStream(PipedInputStream target) throws IOException {connect(target);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteLedgerResult deleteLedger(DeleteLedgerRequest request) {request = beforeClientExecution(request);return executeDeleteLedger(request);}",
    "output": "public virtual DeleteLedgerResponse DeleteLedger(DeleteLedgerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLedgerRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLedgerResponseUnmarshaller.Instance;return Invoke<DeleteLedgerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteLedgerResponse DeleteLedger(DeleteLedgerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteLedgerRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteLedgerResponseUnmarshaller.Instance;return Invoke<DeleteLedgerResponse>(request, options);}",
    "output": "public DeleteLedgerResult deleteLedger(DeleteLedgerRequest request) {request = beforeClientExecution(request);return executeDeleteLedger(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetCognitoEventsResult getCognitoEvents(GetCognitoEventsRequest request) {request = beforeClientExecution(request);return executeGetCognitoEvents(request);}",
    "output": "public virtual GetCognitoEventsResponse GetCognitoEvents(GetCognitoEventsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCognitoEventsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCognitoEventsResponseUnmarshaller.Instance;return Invoke<GetCognitoEventsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetCognitoEventsResponse GetCognitoEvents(GetCognitoEventsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCognitoEventsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCognitoEventsResponseUnmarshaller.Instance;return Invoke<GetCognitoEventsResponse>(request, options);}",
    "output": "public GetCognitoEventsResult getCognitoEvents(GetCognitoEventsRequest request) {request = beforeClientExecution(request);return executeGetCognitoEvents(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NameXPtg getNameXPtg(String name, SheetIdentifier sheet) {int sheetRefIndex = getSheetExtIx(sheet);return _iBook.getNameXPtg(name, sheetRefIndex, _uBook.getUDFFinder());}",
    "output": "public Ptg GetNameXPtg(String name, SheetIdentifier sheet){int sheetRefIndex = GetSheetExtIx(sheet);return _iBook.GetNameXPtg(name, sheetRefIndex, _uBook.GetUDFFinder());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Ptg GetNameXPtg(String name, SheetIdentifier sheet){int sheetRefIndex = GetSheetExtIx(sheet);return _iBook.GetNameXPtg(name, sheetRefIndex, _uBook.GetUDFFinder());}",
    "output": "public NameXPtg getNameXPtg(String name, SheetIdentifier sheet) {int sheetRefIndex = getSheetExtIx(sheet);return _iBook.getNameXPtg(name, sheetRefIndex, _uBook.getUDFFinder());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListResolverEndpointsResult listResolverEndpoints(ListResolverEndpointsRequest request) {request = beforeClientExecution(request);return executeListResolverEndpoints(request);}",
    "output": "public virtual ListResolverEndpointsResponse ListResolverEndpoints(ListResolverEndpointsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListResolverEndpointsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListResolverEndpointsResponseUnmarshaller.Instance;return Invoke<ListResolverEndpointsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListResolverEndpointsResponse ListResolverEndpoints(ListResolverEndpointsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListResolverEndpointsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListResolverEndpointsResponseUnmarshaller.Instance;return Invoke<ListResolverEndpointsResponse>(request, options);}",
    "output": "public ListResolverEndpointsResult listResolverEndpoints(ListResolverEndpointsRequest request) {request = beforeClientExecution(request);return executeListResolverEndpoints(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String readLine() {try {return reader.readLine();} catch (IOException e) {throw new IOError(e);}}",
    "output": "public string readLine(){try{return _reader.readLine();}catch (System.IO.IOException e){throw new java.io.IOError(e);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string readLine(){try{return _reader.readLine();}catch (System.IO.IOException e){throw new java.io.IOError(e);}}",
    "output": "public String readLine() {try {return reader.readLine();} catch (IOException e) {throw new IOError(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int hash2(char carray[]) {int hash = 5381;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}",
    "output": "public virtual int Hash2(char[] carray){int hash = 5381;for (int i = 0; i < carray.Length; i++){char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int Hash2(char[] carray){int hash = 5381;for (int i = 0; i < carray.Length; i++){char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}",
    "output": "public int hash2(char carray[]) {int hash = 5381;for (int i = 0; i < carray.length; i++) {char d = carray[i];hash = ((hash << 5) + hash) + d & 0x00FF;hash = ((hash << 5) + hash) + d >> 8;}return hash;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static long toBookSheetColumn(int bookIndex, int sheetIndex, int columnIndex) {return ((bookIndex   & 0xFFFFL) << 48)  +((sheetIndex  & 0xFFFFL) << 32) +((columnIndex & 0xFFFFL) << 0);}",
    "output": "public static long ToBookSheetColumn(int bookIndex, int sheetIndex, int columnIndex){return ((bookIndex & 0xFFFFL) << 48) + ((sheetIndex & 0xFFFFL) << 32) + ((columnIndex & 0xFFFFL) << 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static long ToBookSheetColumn(int bookIndex, int sheetIndex, int columnIndex){return ((bookIndex & 0xFFFFL) << 48) + ((sheetIndex & 0xFFFFL) << 32) + ((columnIndex & 0xFFFFL) << 0);}",
    "output": "public static long toBookSheetColumn(int bookIndex, int sheetIndex, int columnIndex) {return ((bookIndex   & 0xFFFFL) << 48)  +((sheetIndex  & 0xFFFFL) << 32) +((columnIndex & 0xFFFFL) << 0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateConfigurationProfileResult createConfigurationProfile(CreateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationProfile(request);}",
    "output": "public virtual CreateConfigurationProfileResponse CreateConfigurationProfile(CreateConfigurationProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateConfigurationProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateConfigurationProfileResponseUnmarshaller.Instance;return Invoke<CreateConfigurationProfileResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateConfigurationProfileResponse CreateConfigurationProfile(CreateConfigurationProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateConfigurationProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateConfigurationProfileResponseUnmarshaller.Instance;return Invoke<CreateConfigurationProfileResponse>(request, options);}",
    "output": "public CreateConfigurationProfileResult createConfigurationProfile(CreateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationProfile(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ReplicationGroup startMigration(StartMigrationRequest request) {request = beforeClientExecution(request);return executeStartMigration(request);}",
    "output": "public virtual StartMigrationResponse StartMigration(StartMigrationRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartMigrationRequestMarshaller.Instance;options.ResponseUnmarshaller = StartMigrationResponseUnmarshaller.Instance;return Invoke<StartMigrationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual StartMigrationResponse StartMigration(StartMigrationRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartMigrationRequestMarshaller.Instance;options.ResponseUnmarshaller = StartMigrationResponseUnmarshaller.Instance;return Invoke<StartMigrationResponse>(request, options);}",
    "output": "public ReplicationGroup startMigration(StartMigrationRequest request) {request = beforeClientExecution(request);return executeStartMigration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OffsetLimitTokenFilter(TokenStream input, int offsetLimit) {super(input);this.offsetLimit = offsetLimit;}",
    "output": "public OffsetLimitTokenFilter(TokenStream input, int offsetLimit) : base(input){this.offsetLimit = offsetLimit;offsetAttrib = GetAttribute<IOffsetAttribute>();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public OffsetLimitTokenFilter(TokenStream input, int offsetLimit) : base(input){this.offsetLimit = offsetLimit;offsetAttrib = GetAttribute<IOffsetAttribute>();}",
    "output": "public OffsetLimitTokenFilter(TokenStream input, int offsetLimit) {super(input);this.offsetLimit = offsetLimit;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void write(byte[] b, int off, int len)throws IOException {while (0 < len) {final int n = Math.min(len, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK);count += n;if (checkCancelAt <= count) {if (writeMonitor.isCancelled()) {throw new IOException(JGitText.get().packingCancelledDuringObjectsWriting);}checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK;}out.write(b, off, n);md.update(b, off, n);off += n;len -= n;}}",
    "output": "public override void Write(byte[] b, int off, int len){while (0 < len){int n = Math.Min(len, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK);count += n;if (checkCancelAt <= count){if (writeMonitor.IsCancelled()){throw new IOException(JGitText.Get().packingCancelledDuringObjectsWriting);}checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK;}@out.Write(b, off, n);crc.Update(b, off, n);md.Update(b, off, n);off += n;len -= n;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Write(byte[] b, int off, int len){while (0 < len){int n = Math.Min(len, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK);count += n;if (checkCancelAt <= count){if (writeMonitor.IsCancelled()){throw new IOException(JGitText.Get().packingCancelledDuringObjectsWriting);}checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK;}@out.Write(b, off, n);crc.Update(b, off, n);md.Update(b, off, n);off += n;len -= n;}}",
    "output": "public final void write(byte[] b, int off, int len)throws IOException {while (0 < len) {final int n = Math.min(len, BYTES_TO_WRITE_BEFORE_CANCEL_CHECK);count += n;if (checkCancelAt <= count) {if (writeMonitor.isCancelled()) {throw new IOException(JGitText.get().packingCancelledDuringObjectsWriting);}checkCancelAt = count + BYTES_TO_WRITE_BEFORE_CANCEL_CHECK;}out.write(b, off, n);md.update(b, off, n);off += n;len -= n;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Cell merge(Cell m, Cell e) {Cell n = new Cell();if (m.skip != e.skip) {return null;}if (m.cmd >= 0) {if (e.cmd >= 0) {if (m.cmd == e.cmd) {n.cmd = m.cmd;} else {return null;}} else {n.cmd = m.cmd;}} else {n.cmd = e.cmd;}if (m.ref >= 0) {if (e.ref >= 0) {if (m.ref == e.ref) {if (m.skip == e.skip) {n.ref = m.ref;} else {return null;}} else {return null;}} else {n.ref = m.ref;}} else {n.ref = e.ref;}n.cnt = m.cnt + e.cnt;n.skip = m.skip;return n;}",
    "output": "public virtual Cell Merge(Cell m, Cell e){Cell n = new Cell();if (m.skip != e.skip){return null;}if (m.cmd >= 0){if (e.cmd >= 0){if (m.cmd == e.cmd){n.cmd = m.cmd;}else{return null;}}else{n.cmd = m.cmd;}}else{n.cmd = e.cmd;}if (m.@ref >= 0){if (e.@ref >= 0){if (m.@ref == e.@ref){if (m.skip == e.skip){n.@ref = m.@ref;}else{return null;}}else{return null;}}else{n.@ref = m.@ref;}}else{n.@ref = e.@ref;}n.cnt = m.cnt + e.cnt;n.skip = m.skip;return n;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual Cell Merge(Cell m, Cell e){Cell n = new Cell();if (m.skip != e.skip){return null;}if (m.cmd >= 0){if (e.cmd >= 0){if (m.cmd == e.cmd){n.cmd = m.cmd;}else{return null;}}else{n.cmd = m.cmd;}}else{n.cmd = e.cmd;}if (m.@ref >= 0){if (e.@ref >= 0){if (m.@ref == e.@ref){if (m.skip == e.skip){n.@ref = m.@ref;}else{return null;}}else{return null;}}else{n.@ref = m.@ref;}}else{n.@ref = e.@ref;}n.cnt = m.cnt + e.cnt;n.skip = m.skip;return n;}",
    "output": "public Cell merge(Cell m, Cell e) {Cell n = new Cell();if (m.skip != e.skip) {return null;}if (m.cmd >= 0) {if (e.cmd >= 0) {if (m.cmd == e.cmd) {n.cmd = m.cmd;} else {return null;}} else {n.cmd = m.cmd;}} else {n.cmd = e.cmd;}if (m.ref >= 0) {if (e.ref >= 0) {if (m.ref == e.ref) {if (m.skip == e.skip) {n.ref = m.ref;} else {return null;}} else {return null;}} else {n.ref = m.ref;}} else {n.ref = e.ref;}n.cnt = m.cnt + e.cnt;n.skip = m.skip;return n;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetCampaignActivitiesResult getCampaignActivities(GetCampaignActivitiesRequest request) {request = beforeClientExecution(request);return executeGetCampaignActivities(request);}",
    "output": "public virtual GetCampaignActivitiesResponse GetCampaignActivities(GetCampaignActivitiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCampaignActivitiesRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCampaignActivitiesResponseUnmarshaller.Instance;return Invoke<GetCampaignActivitiesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetCampaignActivitiesResponse GetCampaignActivities(GetCampaignActivitiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCampaignActivitiesRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCampaignActivitiesResponseUnmarshaller.Instance;return Invoke<GetCampaignActivitiesResponse>(request, options);}",
    "output": "public GetCampaignActivitiesResult getCampaignActivities(GetCampaignActivitiesRequest request) {request = beforeClientExecution(request);return executeGetCampaignActivities(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long estimateBytesUsed() {return bytesUsed;}",
    "output": "public virtual long EstimateBytesUsed(){return this.bytesUsed;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual long EstimateBytesUsed(){return this.bytesUsed;}",
    "output": "public long estimateBytesUsed() {return bytesUsed;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FunctionNameEval(String functionName) {_functionName = functionName;}",
    "output": "public FunctionNameEval(String functionName) {_functionName = functionName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FunctionNameEval(String functionName) {_functionName = functionName;}",
    "output": "public FunctionNameEval(String functionName) {_functionName = functionName;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final float averageBytesPerChar() {return averageBytesPerChar;}",
    "output": "public float averageBytesPerChar(){return _averageBytesPerChar;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public float averageBytesPerChar(){return _averageBytesPerChar;}",
    "output": "public final float averageBytesPerChar() {return averageBytesPerChar;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateCacheSecurityGroupRequest(String cacheSecurityGroupName, String description) {setCacheSecurityGroupName(cacheSecurityGroupName);setDescription(description);}",
    "output": "public CreateCacheSecurityGroupRequest(string cacheSecurityGroupName, string description){_cacheSecurityGroupName = cacheSecurityGroupName;_description = description;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CreateCacheSecurityGroupRequest(string cacheSecurityGroupName, string description){_cacheSecurityGroupName = cacheSecurityGroupName;_description = description;}",
    "output": "public CreateCacheSecurityGroupRequest(String cacheSecurityGroupName, String description) {setCacheSecurityGroupName(cacheSecurityGroupName);setDescription(description);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void removeAt(int index) {System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));mSize--;}",
    "output": "public virtual void removeAt(int index){System.Array.Copy(mKeys, index + 1, mKeys, index, mSize - (index + 1));System.Array.Copy(mValues, index + 1, mValues, index, mSize - (index + 1));mSize--;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void removeAt(int index){System.Array.Copy(mKeys, index + 1, mKeys, index, mSize - (index + 1));System.Array.Copy(mValues, index + 1, mValues, index, mSize - (index + 1));mSize--;}",
    "output": "public void removeAt(int index) {System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));mSize--;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeIndexFieldsResult describeIndexFields(DescribeIndexFieldsRequest request) {request = beforeClientExecution(request);return executeDescribeIndexFields(request);}",
    "output": "public virtual DescribeIndexFieldsResponse DescribeIndexFields(DescribeIndexFieldsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeIndexFieldsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeIndexFieldsResponseUnmarshaller.Instance;return Invoke<DescribeIndexFieldsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeIndexFieldsResponse DescribeIndexFields(DescribeIndexFieldsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeIndexFieldsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeIndexFieldsResponseUnmarshaller.Instance;return Invoke<DescribeIndexFieldsResponse>(request, options);}",
    "output": "public DescribeIndexFieldsResult describeIndexFields(DescribeIndexFieldsRequest request) {request = beforeClientExecution(request);return executeDescribeIndexFields(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void remove(int key) {delete(key);}",
    "output": "public virtual void remove(int key){delete(key);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void remove(int key){delete(key);}",
    "output": "public void remove(int key) {delete(key);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ShortBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());ShortToByteBufferAdapter buf = new ShortToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}",
    "output": "public override java.nio.ShortBuffer duplicate(){java.nio.ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());java.nio.ShortToByteBufferAdapter buf = new java.nio.ShortToByteBufferAdapter(bb);buf._limit = _limit;buf._position = _position;buf._mark = _mark;return buf;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ShortBuffer duplicate(){java.nio.ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());java.nio.ShortToByteBufferAdapter buf = new java.nio.ShortToByteBufferAdapter(bb);buf._limit = _limit;buf._position = _position;buf._mark = _mark;return buf;}",
    "output": "public ShortBuffer duplicate() {ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());ShortToByteBufferAdapter buf = new ShortToByteBufferAdapter(bb);buf.limit = limit;buf.position = position;buf.mark = mark;return buf;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void addDbcell(int cell){if (field_5_dbcells == null){field_5_dbcells = new IntList();}field_5_dbcells.add(cell);}",
    "output": "public void AddDbcell(int cell){if (field_5_dbcells == null){field_5_dbcells = new IntList();}field_5_dbcells.Add(cell);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void AddDbcell(int cell){if (field_5_dbcells == null){field_5_dbcells = new IntList();}field_5_dbcells.Add(cell);}",
    "output": "public void addDbcell(int cell){if (field_5_dbcells == null){field_5_dbcells = new IntList();}field_5_dbcells.add(cell);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteSubnetResult deleteSubnet(DeleteSubnetRequest request) {request = beforeClientExecution(request);return executeDeleteSubnet(request);}",
    "output": "public virtual DeleteSubnetResponse DeleteSubnet(DeleteSubnetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSubnetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSubnetResponseUnmarshaller.Instance;return Invoke<DeleteSubnetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteSubnetResponse DeleteSubnet(DeleteSubnetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteSubnetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteSubnetResponseUnmarshaller.Instance;return Invoke<DeleteSubnetResponse>(request, options);}",
    "output": "public DeleteSubnetResult deleteSubnet(DeleteSubnetRequest request) {request = beforeClientExecution(request);return executeDeleteSubnet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<HSSFPictureData> getAllPictures(){List<HSSFPictureData> pictures = new ArrayList<>();for (org.apache.poi.hssf.record.Record r : workbook.getRecords()) {if (r instanceof AbstractEscherHolderRecord) {((AbstractEscherHolderRecord) r).decode();List<EscherRecord> escherRecords = ((AbstractEscherHolderRecord) r).getEscherRecords();searchForPictures(escherRecords, pictures);}}return Collections.unmodifiableList(pictures);}",
    "output": "public IList GetAllPictures(){List<HSSFPictureData> pictures = new List<HSSFPictureData>();IEnumerator recordIter = workbook.Records.GetEnumerator();while (recordIter.MoveNext()){Object obj = recordIter.Current;if (obj is AbstractEscherHolderRecord){((AbstractEscherHolderRecord)obj).Decode();IList escherRecords = ((AbstractEscherHolderRecord)obj).EscherRecords;SearchForPictures(escherRecords, pictures);}}return pictures;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IList GetAllPictures(){List<HSSFPictureData> pictures = new List<HSSFPictureData>();IEnumerator recordIter = workbook.Records.GetEnumerator();while (recordIter.MoveNext()){Object obj = recordIter.Current;if (obj is AbstractEscherHolderRecord){((AbstractEscherHolderRecord)obj).Decode();IList escherRecords = ((AbstractEscherHolderRecord)obj).EscherRecords;SearchForPictures(escherRecords, pictures);}}return pictures;}",
    "output": "public List<HSSFPictureData> getAllPictures(){List<HSSFPictureData> pictures = new ArrayList<>();for (org.apache.poi.hssf.record.Record r : workbook.getRecords()) {if (r instanceof AbstractEscherHolderRecord) {((AbstractEscherHolderRecord) r).decode();List<EscherRecord> escherRecords = ((AbstractEscherHolderRecord) r).getEscherRecords();searchForPictures(escherRecords, pictures);}}return Collections.unmodifiableList(pictures);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeWorkspacesConnectionStatusResult describeWorkspacesConnectionStatus(DescribeWorkspacesConnectionStatusRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspacesConnectionStatus(request);}",
    "output": "public virtual DescribeWorkspacesConnectionStatusResponse DescribeWorkspacesConnectionStatus(DescribeWorkspacesConnectionStatusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeWorkspacesConnectionStatusRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeWorkspacesConnectionStatusResponseUnmarshaller.Instance;return Invoke<DescribeWorkspacesConnectionStatusResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeWorkspacesConnectionStatusResponse DescribeWorkspacesConnectionStatus(DescribeWorkspacesConnectionStatusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeWorkspacesConnectionStatusRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeWorkspacesConnectionStatusResponseUnmarshaller.Instance;return Invoke<DescribeWorkspacesConnectionStatusResponse>(request, options);}",
    "output": "public DescribeWorkspacesConnectionStatusResult describeWorkspacesConnectionStatus(DescribeWorkspacesConnectionStatusRequest request) {request = beforeClientExecution(request);return executeDescribeWorkspacesConnectionStatus(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"MultiDocsAndPositionsEnum(\" + Arrays.toString(getSubs()) + \")\";}",
    "output": "public override string ToString(){return Slice.ToString() + \":\" + DocsEnum;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return Slice.ToString() + \":\" + DocsEnum;}",
    "output": "public String toString() {return \"MultiDocsAndPositionsEnum(\" + Arrays.toString(getSubs()) + \")\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public InvokeServiceAsyncRequest() {super(\"industry-brain\", \"2018-07-12\", \"InvokeServiceAsync\");setMethod(MethodType.POST);}",
    "output": "public InvokeServiceAsyncRequest(): base(\"industry-brain\", \"2018-07-12\", \"InvokeServiceAsync\"){Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public InvokeServiceAsyncRequest(): base(\"industry-brain\", \"2018-07-12\", \"InvokeServiceAsync\"){Method = MethodType.POST;}",
    "output": "public InvokeServiceAsyncRequest() {super(\"industry-brain\", \"2018-07-12\", \"InvokeServiceAsync\");setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AuthorizeSecurityGroupIngressRequest(String groupName, java.util.List<IpPermission> ipPermissions) {setGroupName(groupName);setIpPermissions(ipPermissions);}",
    "output": "public AuthorizeSecurityGroupIngressRequest(string groupName, List<IpPermission> ipPermissions){_groupName = groupName;_ipPermissions = ipPermissions;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public AuthorizeSecurityGroupIngressRequest(string groupName, List<IpPermission> ipPermissions){_groupName = groupName;_ipPermissions = ipPermissions;}",
    "output": "public AuthorizeSecurityGroupIngressRequest(String groupName, java.util.List<IpPermission> ipPermissions) {setGroupName(groupName);setIpPermissions(ipPermissions);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static byte[] readData(InputStream stream, String section ) throws IOException {try {StringBuilder sectionText = new StringBuilder();boolean inSection = false;int c = stream.read();while ( c != -1 ) {switch ( c ) {case '[':inSection = true;break;case '\\n':case '\\r':inSection = false;sectionText = new StringBuilder();break;case ']':inSection = false;if ( sectionText.toString().equals( section ) ) return readData( stream, '[' );sectionText = new StringBuilder();break;default:if ( inSection ) sectionText.append( (char) c );}c = stream.read();}} finally {stream.close();}throw new IOException( \"Section '\" + section + \"' not found\" );}",
    "output": "public static byte[] ReadData(Stream stream, String section ){try{StringBuilder sectionText = new StringBuilder();bool inSection = false;int c = stream.ReadByte();while ( c != -1 ){switch ( c ){case '[':inSection = true;break;case '\\n':case '\\r':inSection = false;sectionText = new StringBuilder();break;case ']':inSection = false;if (sectionText.ToString().Equals(section)){return ReadData(stream, '[');}sectionText = new StringBuilder();break;default:if ( inSection ) sectionText.Append( (char) c );break;}c = stream.ReadByte();}}finally{stream.Close();}throw new IOException( \"Section '\" + section + \"' not found\" );}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static byte[] ReadData(Stream stream, String section ){try{StringBuilder sectionText = new StringBuilder();bool inSection = false;int c = stream.ReadByte();while ( c != -1 ){switch ( c ){case '[':inSection = true;break;case '\\n':case '\\r':inSection = false;sectionText = new StringBuilder();break;case ']':inSection = false;if (sectionText.ToString().Equals(section)){return ReadData(stream, '[');}sectionText = new StringBuilder();break;default:if ( inSection ) sectionText.Append( (char) c );break;}c = stream.ReadByte();}}finally{stream.Close();}throw new IOException( \"Section '\" + section + \"' not found\" );}",
    "output": "public static byte[] readData(InputStream stream, String section ) throws IOException {try {StringBuilder sectionText = new StringBuilder();boolean inSection = false;int c = stream.read();while ( c != -1 ) {switch ( c ) {case '[':inSection = true;break;case '\\n':case '\\r':inSection = false;sectionText = new StringBuilder();break;case ']':inSection = false;if ( sectionText.toString().equals( section ) ) return readData( stream, '[' );sectionText = new StringBuilder();break;default:if ( inSection ) sectionText.append( (char) c );}c = stream.read();}} finally {stream.close();}throw new IOException( \"Section '\" + section + \"' not found\" );}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {int number;try {number = OperandResolver.coerceValueToInt(numberVE);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}if (number < 0) {return ErrorEval.NUM_ERROR;}return new NumberEval(factorial(number).longValue());}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE){int number;try{number = OperandResolver.CoerceValueToInt(numberVE);}catch (EvaluationException){return ErrorEval.VALUE_INVALID;}if (number < 0){return ErrorEval.NUM_ERROR;}return new NumberEval(factorial(number).LongValue());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE){int number;try{number = OperandResolver.CoerceValueToInt(numberVE);}catch (EvaluationException){return ErrorEval.VALUE_INVALID;}if (number < 0){return ErrorEval.NUM_ERROR;}return new NumberEval(factorial(number).LongValue());}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {int number;try {number = OperandResolver.coerceValueToInt(numberVE);} catch (EvaluationException e) {return ErrorEval.VALUE_INVALID;}if (number < 0) {return ErrorEval.NUM_ERROR;}return new NumberEval(factorial(number).longValue());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final LexerActionExecutor getLexerActionExecutor() {return lexerActionExecutor;}",
    "output": "public LexerActionExecutor getLexerActionExecutor(){return lexerActionExecutor;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LexerActionExecutor getLexerActionExecutor(){return lexerActionExecutor;}",
    "output": "public final LexerActionExecutor getLexerActionExecutor() {return lexerActionExecutor;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public EnableUserResult enableUser(EnableUserRequest request) {request = beforeClientExecution(request);return executeEnableUser(request);}",
    "output": "public virtual EnableUserResponse EnableUser(EnableUserRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableUserRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableUserResponseUnmarshaller.Instance;return Invoke<EnableUserResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual EnableUserResponse EnableUser(EnableUserRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableUserRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableUserResponseUnmarshaller.Instance;return Invoke<EnableUserResponse>(request, options);}",
    "output": "public EnableUserResult enableUser(EnableUserRequest request) {request = beforeClientExecution(request);return executeEnableUser(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void fillSlice(BytesRef b, long start, int length) {assert length >= 0: \"length=\" + length;assert length <= blockSize+1: \"length=\" + length;b.length = length;if (length == 0) {return;}final int index = (int) (start >> blockBits);final int offset = (int) (start & blockMask);if (blockSize - offset >= length) {b.bytes = blocks[index];b.offset = offset;} else {b.bytes = new byte[length];b.offset = 0;System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));}}",
    "output": "public void FillSlice(BytesRef b, long start, int length){Debug.Assert(length >= 0, \"length=\" + length);Debug.Assert(length <= blockSize + 1, \"length=\" + length);b.Length = length;if (length == 0){return;}var index = (int)(start >> blockBits);var offset = (int)(start & blockMask);if (blockSize - offset >= length){b.Bytes = blocks[index];b.Offset = offset;}else{b.Bytes = new byte[length];b.Offset = 0;Array.Copy(blocks[index], offset, b.Bytes, 0, blockSize - offset);Array.Copy(blocks[1 + index], 0, b.Bytes, blockSize - offset, length - (blockSize - offset));}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void FillSlice(BytesRef b, long start, int length){Debug.Assert(length >= 0, \"length=\" + length);Debug.Assert(length <= blockSize + 1, \"length=\" + length);b.Length = length;if (length == 0){return;}var index = (int)(start >> blockBits);var offset = (int)(start & blockMask);if (blockSize - offset >= length){b.Bytes = blocks[index];b.Offset = offset;}else{b.Bytes = new byte[length];b.Offset = 0;Array.Copy(blocks[index], offset, b.Bytes, 0, blockSize - offset);Array.Copy(blocks[1 + index], 0, b.Bytes, blockSize - offset, length - (blockSize - offset));}}",
    "output": "public void fillSlice(BytesRef b, long start, int length) {assert length >= 0: \"length=\" + length;assert length <= blockSize+1: \"length=\" + length;b.length = length;if (length == 0) {return;}final int index = (int) (start >> blockBits);final int offset = (int) (start & blockMask);if (blockSize - offset >= length) {b.bytes = blocks[index];b.offset = offset;} else {b.bytes = new byte[length];b.offset = 0;System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeJournalS3ExportResult describeJournalS3Export(DescribeJournalS3ExportRequest request) {request = beforeClientExecution(request);return executeDescribeJournalS3Export(request);}",
    "output": "public virtual DescribeJournalS3ExportResponse DescribeJournalS3Export(DescribeJournalS3ExportRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeJournalS3ExportRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeJournalS3ExportResponseUnmarshaller.Instance;return Invoke<DescribeJournalS3ExportResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeJournalS3ExportResponse DescribeJournalS3Export(DescribeJournalS3ExportRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeJournalS3ExportRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeJournalS3ExportResponseUnmarshaller.Instance;return Invoke<DescribeJournalS3ExportResponse>(request, options);}",
    "output": "public DescribeJournalS3ExportResult describeJournalS3Export(DescribeJournalS3ExportRequest request) {request = beforeClientExecution(request);return executeDescribeJournalS3Export(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setCoordinates(int x1, int y1, int x2, int y2) {_spgrRecord.setRectY1(y1);_spgrRecord.setRectY2(y2);_spgrRecord.setRectX1(x1);_spgrRecord.setRectX2(x2);}",
    "output": "public void SetCoordinates(int x1, int y1, int x2, int y2){_spgrRecord.RectY1 = (y1);_spgrRecord.RectY2 = (y2);_spgrRecord.RectX1 = (x1);_spgrRecord.RectX2 = (x2);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void SetCoordinates(int x1, int y1, int x2, int y2){_spgrRecord.RectY1 = (y1);_spgrRecord.RectY2 = (y2);_spgrRecord.RectX1 = (x1);_spgrRecord.RectX2 = (x2);}",
    "output": "public void setCoordinates(int x1, int y1, int x2, int y2) {_spgrRecord.setRectY1(y1);_spgrRecord.setRectY2(y2);_spgrRecord.setRectX1(x1);_spgrRecord.setRectX2(x2);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeTagsResult describeTags(DescribeTagsRequest request) {request = beforeClientExecution(request);return executeDescribeTags(request);}",
    "output": "public virtual DescribeTagsResponse DescribeTags(DescribeTagsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTagsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTagsResponseUnmarshaller.Instance;return Invoke<DescribeTagsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeTagsResponse DescribeTags(DescribeTagsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeTagsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeTagsResponseUnmarshaller.Instance;return Invoke<DescribeTagsResponse>(request, options);}",
    "output": "public DescribeTagsResult describeTags(DescribeTagsRequest request) {request = beforeClientExecution(request);return executeDescribeTags(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int doLogic() {return 1;}",
    "output": "public override int DoLogic(){return 1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int DoLogic(){return 1;}",
    "output": "public int doLogic() {return 1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteCustomerGatewayResult deleteCustomerGateway(DeleteCustomerGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteCustomerGateway(request);}",
    "output": "public virtual DeleteCustomerGatewayResponse DeleteCustomerGateway(DeleteCustomerGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteCustomerGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteCustomerGatewayResponseUnmarshaller.Instance;return Invoke<DeleteCustomerGatewayResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteCustomerGatewayResponse DeleteCustomerGateway(DeleteCustomerGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteCustomerGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteCustomerGatewayResponseUnmarshaller.Instance;return Invoke<DeleteCustomerGatewayResponse>(request, options);}",
    "output": "public DeleteCustomerGatewayResult deleteCustomerGateway(DeleteCustomerGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteCustomerGateway(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Map newContext(IndexSearcher searcher) {Map context = new IdentityHashMap();context.put(\"searcher\", searcher);return context;}",
    "output": "public static IDictionary NewContext(IndexSearcher searcher){return new Hashtable(IdentityEqualityComparer<object>.Default){[\"searcher\"] = searcher};}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static IDictionary NewContext(IndexSearcher searcher){return new Hashtable(IdentityEqualityComparer<object>.Default){[\"searcher\"] = searcher};}",
    "output": "public static Map newContext(IndexSearcher searcher) {Map context = new IdentityHashMap();context.put(\"searcher\", searcher);return context;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NameRecord getSpecificBuiltinRecord(byte builtInCode, int sheetNumber) {Iterator<NameRecord> iterator = _definedNames.iterator();while (iterator.hasNext()) {NameRecord record = iterator.next();if (record.getBuiltInName() == builtInCode && record.getSheetNumber() == sheetNumber) {return record;}}return null;}",
    "output": "public NameRecord GetSpecificBuiltinRecord(byte builtInCode, int sheetNumber){IEnumerator<NameRecord> iterator = _definedNames.GetEnumerator();while (iterator.MoveNext()){NameRecord record = iterator.Current;if (record.BuiltInName == builtInCode && record.SheetNumber == sheetNumber){return record;}}return null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NameRecord GetSpecificBuiltinRecord(byte builtInCode, int sheetNumber){IEnumerator<NameRecord> iterator = _definedNames.GetEnumerator();while (iterator.MoveNext()){NameRecord record = iterator.Current;if (record.BuiltInName == builtInCode && record.SheetNumber == sheetNumber){return record;}}return null;}",
    "output": "public NameRecord getSpecificBuiltinRecord(byte builtInCode, int sheetNumber) {Iterator<NameRecord> iterator = _definedNames.iterator();while (iterator.hasNext()) {NameRecord record = iterator.next();if (record.getBuiltInName() == builtInCode && record.getSheetNumber() == sheetNumber) {return record;}}return null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final double readDouble() throws IOException {return Double.longBitsToDouble(readLong());}",
    "output": "public virtual double readDouble(){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual double readDouble(){throw new System.NotImplementedException();}",
    "output": "public final double readDouble() throws IOException {return Double.longBitsToDouble(readLong());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void write(byte[] buffer, int offset, int count) throws IOException {super.write(buffer, offset, count);}",
    "output": "public override void write(byte[] buffer, int offset, int count){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void write(byte[] buffer, int offset, int count){throw new System.NotImplementedException();}",
    "output": "public void write(byte[] buffer, int offset, int count) throws IOException {super.write(buffer, offset, count);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new PersianNormalizationFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new PersianNormalizationFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new PersianNormalizationFilter(input);}",
    "output": "public TokenStream create(TokenStream input) {return new PersianNormalizationFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SpanishLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public SpanishLightStemFilterFactory(IDictionary<string, string> args) : base(args){if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SpanishLightStemFilterFactory(IDictionary<string, string> args) : base(args){if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public SpanishLightStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SmallDocSet(int size) {intSet = new SentinelIntSet(size, -1);}",
    "output": "public SmallDocSet(int size){intSet = new SentinelInt32Set(size, -1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SmallDocSet(int size){intSet = new SentinelInt32Set(size, -1);}",
    "output": "public SmallDocSet(int size) {intSet = new SentinelIntSet(size, -1);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RawCharSequence(byte[] buf, int start, int end) {buffer = buf;startPtr = start;endPtr = end;}",
    "output": "public RawCharSequence(byte[] buf, int start, int end){buffer = buf;startPtr = start;endPtr = end;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RawCharSequence(byte[] buf, int start, int end){buffer = buf;startPtr = start;endPtr = end;}",
    "output": "public RawCharSequence(byte[] buf, int start, int end) {buffer = buf;startPtr = start;endPtr = end;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetCustomVerificationEmailTemplateResult getCustomVerificationEmailTemplate(GetCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeGetCustomVerificationEmailTemplate(request);}",
    "output": "public virtual GetCustomVerificationEmailTemplateResponse GetCustomVerificationEmailTemplate(GetCustomVerificationEmailTemplateRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCustomVerificationEmailTemplateRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCustomVerificationEmailTemplateResponseUnmarshaller.Instance;return Invoke<GetCustomVerificationEmailTemplateResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetCustomVerificationEmailTemplateResponse GetCustomVerificationEmailTemplate(GetCustomVerificationEmailTemplateRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetCustomVerificationEmailTemplateRequestMarshaller.Instance;options.ResponseUnmarshaller = GetCustomVerificationEmailTemplateResponseUnmarshaller.Instance;return Invoke<GetCustomVerificationEmailTemplateResponse>(request, options);}",
    "output": "public GetCustomVerificationEmailTemplateResult getCustomVerificationEmailTemplate(GetCustomVerificationEmailTemplateRequest request) {request = beforeClientExecution(request);return executeGetCustomVerificationEmailTemplate(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SendMessageBatchRequest(String queueUrl, java.util.List<SendMessageBatchRequestEntry> entries) {setQueueUrl(queueUrl);setEntries(entries);}",
    "output": "public SendMessageBatchRequest(string queueUrl, List<SendMessageBatchRequestEntry> entries){_queueUrl = queueUrl;_entries = entries;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SendMessageBatchRequest(string queueUrl, List<SendMessageBatchRequestEntry> entries){_queueUrl = queueUrl;_entries = entries;}",
    "output": "public SendMessageBatchRequest(String queueUrl, java.util.List<SendMessageBatchRequestEntry> entries) {setQueueUrl(queueUrl);setEntries(entries);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void writeInt(int v) {writeContinueIfRequired(4);_ulrOutput.writeInt(v);}",
    "output": "public void WriteInt(int v){WriteContinueIfRequired(4);_ulrOutput.WriteInt(v);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void WriteInt(int v){WriteContinueIfRequired(4);_ulrOutput.WriteInt(v);}",
    "output": "public void writeInt(int v) {writeContinueIfRequired(4);_ulrOutput.writeInt(v);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeDataSourcesResult describeDataSources(DescribeDataSourcesRequest request) {request = beforeClientExecution(request);return executeDescribeDataSources(request);}",
    "output": "public virtual DescribeDataSourcesResponse DescribeDataSources(DescribeDataSourcesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDataSourcesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDataSourcesResponseUnmarshaller.Instance;return Invoke<DescribeDataSourcesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeDataSourcesResponse DescribeDataSources(DescribeDataSourcesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeDataSourcesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeDataSourcesResponseUnmarshaller.Instance;return Invoke<DescribeDataSourcesResponse>(request, options);}",
    "output": "public DescribeDataSourcesResult describeDataSources(DescribeDataSourcesRequest request) {request = beforeClientExecution(request);return executeDescribeDataSources(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListRoomsResult listRooms(ListRoomsRequest request) {request = beforeClientExecution(request);return executeListRooms(request);}",
    "output": "public virtual ListRoomsResponse ListRooms(ListRoomsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListRoomsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListRoomsResponseUnmarshaller.Instance;return Invoke<ListRoomsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListRoomsResponse ListRooms(ListRoomsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListRoomsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListRoomsResponseUnmarshaller.Instance;return Invoke<ListRoomsResponse>(request, options);}",
    "output": "public ListRoomsResult listRooms(ListRoomsRequest request) {request = beforeClientExecution(request);return executeListRooms(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public char getConversion() {return c;}",
    "output": "public virtual char getConversion(){return c;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual char getConversion(){return c;}",
    "output": "public char getConversion() {return c;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object _other) {FieldAndTerm other = (FieldAndTerm) _other;return other.field.equals(field) && term.bytesEquals(other.term);}",
    "output": "public override bool Equals(object other){var o = (FieldAndTerm)other;return o.Field.Equals(Field, StringComparison.Ordinal) && Term.BytesEquals(o.Term);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object other){var o = (FieldAndTerm)other;return o.Field.Equals(Field, StringComparison.Ordinal) && Term.BytesEquals(o.Term);}",
    "output": "public boolean equals(Object _other) {FieldAndTerm other = (FieldAndTerm) _other;return other.field.equals(field) && term.bytesEquals(other.term);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateConfigurationSetEventDestinationResult createConfigurationSetEventDestination(CreateConfigurationSetEventDestinationRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSetEventDestination(request);}",
    "output": "public virtual CreateConfigurationSetEventDestinationResponse CreateConfigurationSetEventDestination(CreateConfigurationSetEventDestinationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateConfigurationSetEventDestinationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateConfigurationSetEventDestinationResponseUnmarshaller.Instance;return Invoke<CreateConfigurationSetEventDestinationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateConfigurationSetEventDestinationResponse CreateConfigurationSetEventDestination(CreateConfigurationSetEventDestinationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateConfigurationSetEventDestinationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateConfigurationSetEventDestinationResponseUnmarshaller.Instance;return Invoke<CreateConfigurationSetEventDestinationResponse>(request, options);}",
    "output": "public CreateConfigurationSetEventDestinationResult createConfigurationSetEventDestination(CreateConfigurationSetEventDestinationRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSetEventDestination(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Ole10Native(String label, String filename, String command, byte[] data) {setLabel(label);setFileName(filename);setCommand(command);setDataBuffer(data);mode = EncodingMode.parsed;}",
    "output": "public Ole10Native(String label, String filename, String command, byte[] data){Label=(label);FileName=(filename);Command=(command);DataBuffer=(data);mode = EncodingMode.parsed;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Ole10Native(String label, String filename, String command, byte[] data){Label=(label);FileName=(filename);Command=(command);DataBuffer=(data);mode = EncodingMode.parsed;}",
    "output": "public Ole10Native(String label, String filename, String command, byte[] data) {setLabel(label);setFileName(filename);setCommand(command);setDataBuffer(data);mode = EncodingMode.parsed;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder sb = new StringBuilder();if (fetchResult != null)sb.append(fetchResult.toString());elsesb.append(\"No fetch result\");sb.append(\"\\n\");if (mergeResult != null)sb.append(mergeResult.toString());else if (rebaseResult != null)sb.append(rebaseResult.toString());elsesb.append(\"No update result\");return sb.toString();}",
    "output": "public override string ToString(){StringBuilder sb = new StringBuilder();if (fetchResult != null){sb.Append(fetchResult.ToString());}else{sb.Append(\"No fetch result\");}sb.Append(\"\\n\");if (mergeResult != null){sb.Append(mergeResult.ToString());}else{if (rebaseResult != null){sb.Append(rebaseResult.ToString());}else{sb.Append(\"No update result\");}}return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){StringBuilder sb = new StringBuilder();if (fetchResult != null){sb.Append(fetchResult.ToString());}else{sb.Append(\"No fetch result\");}sb.Append(\"\\n\");if (mergeResult != null){sb.Append(mergeResult.ToString());}else{if (rebaseResult != null){sb.Append(rebaseResult.ToString());}else{sb.Append(\"No update result\");}}return sb.ToString();}",
    "output": "public String toString() {StringBuilder sb = new StringBuilder();if (fetchResult != null)sb.append(fetchResult.toString());elsesb.append(\"No fetch result\");sb.append(\"\\n\");if (mergeResult != null)sb.append(mergeResult.toString());else if (rebaseResult != null)sb.append(rebaseResult.toString());elsesb.append(\"No update result\");return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Cell createCell(Row row, int column, String value) {return createCell(row, column, value, null);}",
    "output": "public static ICell CreateCell(IRow row, int column, String value){return CreateCell(row, column, value, null);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static ICell CreateCell(IRow row, int column, String value){return CreateCell(row, column, value, null);}",
    "output": "public static Cell createCell(Row row, int column, String value) {return createCell(row, column, value, null);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new HindiNormalizationFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new HindiNormalizationFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new HindiNormalizationFilter(input);}",
    "output": "public TokenStream create(TokenStream input) {return new HindiNormalizationFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeAddressesResult describeAddresses() {return describeAddresses(new DescribeAddressesRequest());}",
    "output": "public virtual DescribeAddressesResponse DescribeAddresses(){return DescribeAddresses(new DescribeAddressesRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeAddressesResponse DescribeAddresses(){return DescribeAddresses(new DescribeAddressesRequest());}",
    "output": "public DescribeAddressesResult describeAddresses() {return describeAddresses(new DescribeAddressesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SimpleQQParser(String qqName, String indexField) {this(new String[] { qqName }, indexField);}",
    "output": "public SimpleQQParser(string[] qqNames, string indexField){this.qqNames = qqNames;this.indexField = indexField;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SimpleQQParser(string[] qqNames, string indexField){this.qqNames = qqNames;this.indexField = indexField;}",
    "output": "public SimpleQQParser(String qqName, String indexField) {this(new String[] { qqName }, indexField);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void dispatch(RefsChangedListener listener) {listener.onRefsChanged(this);}",
    "output": "public override void Dispatch(RefsChangedListener listener){listener.OnRefsChanged(this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Dispatch(RefsChangedListener listener){listener.OnRefsChanged(this);}",
    "output": "public void dispatch(RefsChangedListener listener) {listener.onRefsChanged(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SnowballFilter(TokenStream in, String name) {super(in);try {Class<? extends SnowballStemmer> stemClass =Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballStemmer.class);stemmer = stemClass.getConstructor().newInstance();} catch (Exception e) {}}",
    "output": "public SnowballFilter(TokenStream @in, string name): base(@in){try{string className = typeof(SnowballProgram).Namespace + \".Ext.\" +name + \"Stemmer, \" + this.GetType().GetTypeInfo().Assembly.GetName().Name;Type stemClass = Type.GetType(className);stemmer = (SnowballProgram)Activator.CreateInstance(stemClass);}catch (Exception e){}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SnowballFilter(TokenStream @in, string name): base(@in){try{string className = typeof(SnowballProgram).Namespace + \".Ext.\" +name + \"Stemmer, \" + this.GetType().GetTypeInfo().Assembly.GetName().Name;Type stemClass = Type.GetType(className);stemmer = (SnowballProgram)Activator.CreateInstance(stemClass);}catch (Exception e){}}",
    "output": "public SnowballFilter(TokenStream in, String name) {super(in);try {Class<? extends SnowballStemmer> stemClass =Class.forName(\"org.tartarus.snowball.ext.\" + name + \"Stemmer\").asSubclass(SnowballStemmer.class);stemmer = stemClass.getConstructor().newInstance();} catch (Exception e) {}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpgradeAppliedSchemaResult upgradeAppliedSchema(UpgradeAppliedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradeAppliedSchema(request);}",
    "output": "public virtual UpgradeAppliedSchemaResponse UpgradeAppliedSchema(UpgradeAppliedSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpgradeAppliedSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = UpgradeAppliedSchemaResponseUnmarshaller.Instance;return Invoke<UpgradeAppliedSchemaResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpgradeAppliedSchemaResponse UpgradeAppliedSchema(UpgradeAppliedSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpgradeAppliedSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = UpgradeAppliedSchemaResponseUnmarshaller.Instance;return Invoke<UpgradeAppliedSchemaResponse>(request, options);}",
    "output": "public UpgradeAppliedSchemaResult upgradeAppliedSchema(UpgradeAppliedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradeAppliedSchema(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getParent() {int length = path.length(), firstInPath = 0;if (separatorChar == '\\\\' && length > 2 && path.charAt(1) == ':') {firstInPath = 2;}int index = path.lastIndexOf(separatorChar);if (index == -1 && firstInPath > 0) {index = 2;}if (index == -1 || path.charAt(length - 1) == separatorChar) {return null;}if (path.indexOf(separatorChar) == index&& path.charAt(firstInPath) == separatorChar) {return path.substring(0, index + 1);}return path.substring(0, index);}",
    "output": "public string getParent(){int length_1 = path.Length;int firstInPath = 0;if (separatorChar == '\\\\' && length_1 > 2 && path[1] == ':'){firstInPath = 2;}int index = path.LastIndexOf(separatorChar);if (index == -1 && firstInPath > 0){index = 2;}if (index == -1 || path[length_1 - 1] == separatorChar){return null;}if (path.IndexOf(separatorChar) == index && path[firstInPath] == separatorChar){return Sharpen.StringHelper.Substring(path, 0, index + 1);}return Sharpen.StringHelper.Substring(path, 0, index);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string getParent(){int length_1 = path.Length;int firstInPath = 0;if (separatorChar == '\\\\' && length_1 > 2 && path[1] == ':'){firstInPath = 2;}int index = path.LastIndexOf(separatorChar);if (index == -1 && firstInPath > 0){index = 2;}if (index == -1 || path[length_1 - 1] == separatorChar){return null;}if (path.IndexOf(separatorChar) == index && path[firstInPath] == separatorChar){return Sharpen.StringHelper.Substring(path, 0, index + 1);}return Sharpen.StringHelper.Substring(path, 0, index);}",
    "output": "public String getParent() {int length = path.length(), firstInPath = 0;if (separatorChar == '\\\\' && length > 2 && path.charAt(1) == ':') {firstInPath = 2;}int index = path.lastIndexOf(separatorChar);if (index == -1 && firstInPath > 0) {index = 2;}if (index == -1 || path.charAt(length - 1) == separatorChar) {return null;}if (path.indexOf(separatorChar) == index&& path.charAt(firstInPath) == separatorChar) {return path.substring(0, index + 1);}return path.substring(0, index);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BufferedChecksumIndexInput(IndexInput main) {super(\"BufferedChecksumIndexInput(\" + main + \")\");this.main = main;this.digest = new BufferedChecksum(new CRC32());}",
    "output": "public BufferedChecksumIndexInput(IndexInput main): base(\"BufferedChecksumIndexInput(\" + main + \")\"){this.main = main;this.digest = new BufferedChecksum(new CRC32());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BufferedChecksumIndexInput(IndexInput main): base(\"BufferedChecksumIndexInput(\" + main + \")\"){this.main = main;this.digest = new BufferedChecksum(new CRC32());}",
    "output": "public BufferedChecksumIndexInput(IndexInput main) {super(\"BufferedChecksumIndexInput(\" + main + \")\");this.main = main;this.digest = new BufferedChecksum(new CRC32());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void remove(RevFlagSet set) {flags &= ~set.mask;}",
    "output": "public void Remove(RevFlagSet set){flags &= ~set.mask;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Remove(RevFlagSet set){flags &= ~set.mask;}",
    "output": "public final void remove(RevFlagSet set) {flags &= ~set.mask;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;return true;}",
    "output": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}return true;}",
    "output": "public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetFaceSearchResult getFaceSearch(GetFaceSearchRequest request) {request = beforeClientExecution(request);return executeGetFaceSearch(request);}",
    "output": "public virtual GetFaceSearchResponse GetFaceSearch(GetFaceSearchRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFaceSearchRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFaceSearchResponseUnmarshaller.Instance;return Invoke<GetFaceSearchResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetFaceSearchResponse GetFaceSearch(GetFaceSearchRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetFaceSearchRequestMarshaller.Instance;options.ResponseUnmarshaller = GetFaceSearchResponseUnmarshaller.Instance;return Invoke<GetFaceSearchResponse>(request, options);}",
    "output": "public GetFaceSearchResult getFaceSearch(GetFaceSearchRequest request) {request = beforeClientExecution(request);return executeGetFaceSearch(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeUserStackAssociationsResult describeUserStackAssociations(DescribeUserStackAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeUserStackAssociations(request);}",
    "output": "public virtual DescribeUserStackAssociationsResponse DescribeUserStackAssociations(DescribeUserStackAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeUserStackAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeUserStackAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeUserStackAssociationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeUserStackAssociationsResponse DescribeUserStackAssociations(DescribeUserStackAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeUserStackAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeUserStackAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeUserStackAssociationsResponse>(request, options);}",
    "output": "public DescribeUserStackAssociationsResult describeUserStackAssociations(DescribeUserStackAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeUserStackAssociations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void close() throws IOException {in.close();in = new ClosedInputStream();}",
    "output": "public override void close(){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void close(){throw new System.NotImplementedException();}",
    "output": "public void close() throws IOException {in.close();in = new ClosedInputStream();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateBranchCommand branchCreate() {return new CreateBranchCommand(repo);}",
    "output": "public virtual CreateBranchCommand BranchCreate(){return new CreateBranchCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateBranchCommand BranchCreate(){return new CreateBranchCommand(repo);}",
    "output": "public CreateBranchCommand branchCreate() {return new CreateBranchCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(wOffset);out.writeShort(at);out.writeShort(grbit);if(unused != null)out.writeShort(unused);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(rt);out1.WriteShort(grbitFrt);out1.WriteShort(wOffset);out1.WriteShort(at);out1.WriteShort(grbit);if (unused != null)out1.WriteShort((short)unused);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(rt);out1.WriteShort(grbitFrt);out1.WriteShort(wOffset);out1.WriteShort(at);out1.WriteShort(grbit);if (unused != null)out1.WriteShort((short)unused);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(rt);out.writeShort(grbitFrt);out.writeShort(wOffset);out.writeShort(at);out.writeShort(grbit);if(unused != null)out.writeShort(unused);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringBuilder insert(int offset, Object obj) {insert0(offset, obj == null ? \"null\" : obj.toString());return this;}",
    "output": "public java.lang.StringBuilder insert(int offset, object obj){insert0(offset, obj == null ? \"null\" : obj.ToString());return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.lang.StringBuilder insert(int offset, object obj){insert0(offset, obj == null ? \"null\" : obj.ToString());return this;}",
    "output": "public StringBuilder insert(int offset, Object obj) {insert0(offset, obj == null ? \"null\" : obj.toString());return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int next() {int res = child;if (child != TaxonomyReader.INVALID_ORDINAL) {child = siblings[child];}return res;}",
    "output": "public virtual int Next(){int res = child;if (child != TaxonomyReader.INVALID_ORDINAL){child = siblings[child];}return res;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int Next(){int res = child;if (child != TaxonomyReader.INVALID_ORDINAL){child = siblings[child];}return res;}",
    "output": "public int next() {int res = child;if (child != TaxonomyReader.INVALID_ORDINAL) {child = siblings[child];}return res;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteStackResult deleteStack(DeleteStackRequest request) {request = beforeClientExecution(request);return executeDeleteStack(request);}",
    "output": "public virtual DeleteStackResponse DeleteStack(DeleteStackRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteStackRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteStackResponseUnmarshaller.Instance;return Invoke<DeleteStackResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteStackResponse DeleteStack(DeleteStackRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteStackRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteStackResponseUnmarshaller.Instance;return Invoke<DeleteStackResponse>(request, options);}",
    "output": "public DeleteStackResult deleteStack(DeleteStackRequest request) {request = beforeClientExecution(request);return executeDeleteStack(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public NorwegianMinimalStemFilterFactory(Map<String,String> args) {super(args);String variant = get(args, \"variant\");if (variant == null || \"nb\".equals(variant)) {flags = BOKMAAL;} else if (\"nn\".equals(variant)) {flags = NYNORSK;} else if (\"no\".equals(variant)) {flags = BOKMAAL | NYNORSK;} else {throw new IllegalArgumentException(\"invalid variant: \" + variant);}if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public NorwegianMinimalStemFilterFactory(IDictionary<string, string> args): base(args){string variant = Get(args, \"variant\");if (variant == null || \"nb\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.BOKMAAL;}else if (\"nn\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.NYNORSK;}else if (\"no\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.BOKMAAL | NorwegianStandard.NYNORSK;}else{throw new System.ArgumentException(\"invalid variant: \" + variant);}if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public NorwegianMinimalStemFilterFactory(IDictionary<string, string> args): base(args){string variant = Get(args, \"variant\");if (variant == null || \"nb\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.BOKMAAL;}else if (\"nn\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.NYNORSK;}else if (\"no\".Equals(variant, StringComparison.Ordinal)){flags = NorwegianStandard.BOKMAAL | NorwegianStandard.NYNORSK;}else{throw new System.ArgumentException(\"invalid variant: \" + variant);}if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public NorwegianMinimalStemFilterFactory(Map<String,String> args) {super(args);String variant = get(args, \"variant\");if (variant == null || \"nb\".equals(variant)) {flags = BOKMAAL;} else if (\"nn\".equals(variant)) {flags = NYNORSK;} else if (\"no\".equals(variant)) {flags = BOKMAAL | NYNORSK;} else {throw new IllegalArgumentException(\"invalid variant: \" + variant);}if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"Z(\" + z + \")\";}",
    "output": "public override string ToString(){return \"Z(\" + z + \")\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"Z(\" + z + \")\";}",
    "output": "public String toString() {return \"Z(\" + z + \")\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static org.apache.poi.hssf.record.Record create(RecordInputStream in) {switch (in.remaining()) {case 0:return instance;case 2:return new InterfaceHdrRecord(in);}throw new RecordFormatException(\"Invalid record data size: \" + in.remaining());}",
    "output": "public static Record Create(RecordInputStream in1){switch (in1.Remaining){case 0:return Instance;case 2:return new InterfaceHdrRecord(in1);}throw new RecordFormatException(\"Invalid record data size: \" + in1.Remaining);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static Record Create(RecordInputStream in1){switch (in1.Remaining){case 0:return Instance;case 2:return new InterfaceHdrRecord(in1);}throw new RecordFormatException(\"Invalid record data size: \" + in1.Remaining);}",
    "output": "public static org.apache.poi.hssf.record.Record create(RecordInputStream in) {switch (in.remaining()) {case 0:return instance;case 2:return new InterfaceHdrRecord(in);}throw new RecordFormatException(\"Invalid record data size: \" + in.remaining());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getCellsPnt() {int size = 0;for (Row row : rows)size += row.getCellsPnt();return size;}",
    "output": "public virtual int GetCellsPnt(){int size = 0;foreach (Row row in rows)size += row.GetCellsPnt();return size;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetCellsPnt(){int size = 0;foreach (Row row in rows)size += row.GetCellsPnt();return size;}",
    "output": "public int getCellsPnt() {int size = 0;for (Row row : rows)size += row.getCellsPnt();return size;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerActionExecutor)) {return false;}LexerActionExecutor other = (LexerActionExecutor)obj;return hashCode == other.hashCode&& Arrays.equals(lexerActions, other.lexerActions);}",
    "output": "public override bool Equals(object obj){if (obj == this){return true;}else{if (!(obj is Antlr4.Runtime.Atn.LexerActionExecutor)){return false;}}Antlr4.Runtime.Atn.LexerActionExecutor other = (Antlr4.Runtime.Atn.LexerActionExecutor)obj;return hashCode == other.hashCode && Arrays.Equals(lexerActions, other.lexerActions);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object obj){if (obj == this){return true;}else{if (!(obj is Antlr4.Runtime.Atn.LexerActionExecutor)){return false;}}Antlr4.Runtime.Atn.LexerActionExecutor other = (Antlr4.Runtime.Atn.LexerActionExecutor)obj;return hashCode == other.hashCode && Arrays.Equals(lexerActions, other.lexerActions);}",
    "output": "public boolean equals(Object obj) {if (obj == this) {return true;}else if (!(obj instanceof LexerActionExecutor)) {return false;}LexerActionExecutor other = (LexerActionExecutor)obj;return hashCode == other.hashCode&& Arrays.equals(lexerActions, other.lexerActions);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static final Analyzer createAnalyzer(String className) throws Exception{final Class<? extends Analyzer> clazz = Class.forName(className).asSubclass(Analyzer.class);try {Constructor<? extends Analyzer> cnstr = clazz.getConstructor(Version.class);return cnstr.newInstance(Version.LATEST);} catch (NoSuchMethodException nsme) {return clazz.getConstructor().newInstance();}}",
    "output": "public static Analyzer CreateAnalyzer(string className){Type clazz = Type.GetType(className);try{return (Analyzer)Activator.CreateInstance(clazz,LuceneVersion.LUCENE_CURRENT);}catch (MissingMethodException ){return (Analyzer)Activator.CreateInstance(clazz);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static Analyzer CreateAnalyzer(string className){Type clazz = Type.GetType(className);try{return (Analyzer)Activator.CreateInstance(clazz,LuceneVersion.LUCENE_CURRENT);}catch (MissingMethodException ){return (Analyzer)Activator.CreateInstance(clazz);}}",
    "output": "public static final Analyzer createAnalyzer(String className) throws Exception{final Class<? extends Analyzer> clazz = Class.forName(className).asSubclass(Analyzer.class);try {Constructor<? extends Analyzer> cnstr = clazz.getConstructor(Version.class);return cnstr.newInstance(Version.LATEST);} catch (NoSuchMethodException nsme) {return clazz.getConstructor().newInstance();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetSegmentVersionsResult getSegmentVersions(GetSegmentVersionsRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersions(request);}",
    "output": "public virtual GetSegmentVersionsResponse GetSegmentVersions(GetSegmentVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetSegmentVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetSegmentVersionsResponseUnmarshaller.Instance;return Invoke<GetSegmentVersionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetSegmentVersionsResponse GetSegmentVersions(GetSegmentVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetSegmentVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetSegmentVersionsResponseUnmarshaller.Instance;return Invoke<GetSegmentVersionsResponse>(request, options);}",
    "output": "public GetSegmentVersionsResult getSegmentVersions(GetSegmentVersionsRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getDeltaBaseCacheLimit() {return deltaBaseCacheLimit;}",
    "output": "public virtual int GetDeltaBaseCacheLimit(){return deltaBaseCacheLimit;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetDeltaBaseCacheLimit(){return deltaBaseCacheLimit;}",
    "output": "public int getDeltaBaseCacheLimit() {return deltaBaseCacheLimit;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GroupMerger(Sort groupSort) {groupComp = new GroupComparator<>(groupSort);queue = new TreeSet<>(groupComp);groupsSeen = new HashMap<>();}",
    "output": "public GroupMerger(Sort groupSort){groupComp = new GroupComparer<T>(groupSort);queue = new JCG.SortedSet<MergedGroup<T>>(groupComp);groupsSeen = new JCG.Dictionary<T, MergedGroup<T>>();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GroupMerger(Sort groupSort){groupComp = new GroupComparer<T>(groupSort);queue = new JCG.SortedSet<MergedGroup<T>>(groupComp);groupsSeen = new JCG.Dictionary<T, MergedGroup<T>>();}",
    "output": "public GroupMerger(Sort groupSort) {groupComp = new GroupComparator<>(groupSort);queue = new TreeSet<>(groupComp);groupsSeen = new HashMap<>();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long get(int index) {final int o = index >>> 4;final int b = index & 15;final int shift = b << 2;return (blocks[o] >>> shift) & 15L;}",
    "output": "public override long Get(int index){int o = (int)((uint)index >> 4);int b = index & 15;int shift = b << 2;return ((long)((ulong)blocks[o] >> shift)) & 15L;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long Get(int index){int o = (int)((uint)index >> 4);int b = index & 15;int shift = b << 2;return ((long)((ulong)blocks[o] >> shift)) & 15L;}",
    "output": "public long get(int index) {final int o = index >>> 4;final int b = index & 15;final int shift = b << 2;return (blocks[o] >>> shift) & 15L;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FileIdCluster( int drawingGroupId, int numShapeIdsUsed ) {this.field_1_drawingGroupId = drawingGroupId;this.field_2_numShapeIdsUsed = numShapeIdsUsed;}",
    "output": "public FileIdCluster(int drawingGroupId, int numShapeIdsUsed){this.field_1_drawingGroupId = drawingGroupId;this.field_2_numShapeIdsUsed = numShapeIdsUsed;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FileIdCluster(int drawingGroupId, int numShapeIdsUsed){this.field_1_drawingGroupId = drawingGroupId;this.field_2_numShapeIdsUsed = numShapeIdsUsed;}",
    "output": "public FileIdCluster( int drawingGroupId, int numShapeIdsUsed ) {this.field_1_drawingGroupId = drawingGroupId;this.field_2_numShapeIdsUsed = numShapeIdsUsed;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharArrayIterator clone() {CharArrayIterator clone = new CharArrayIterator();clone.setText(array, start, length);clone.index = index;return clone;}",
    "output": "public override object Clone(){CharArrayIterator clone = new CharArrayIterator();clone.SetText(array, start, length);clone.index = index;return clone;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override object Clone(){CharArrayIterator clone = new CharArrayIterator();clone.SetText(array, start, length);clone.index = index;return clone;}",
    "output": "public CharArrayIterator clone() {CharArrayIterator clone = new CharArrayIterator();clone.setText(array, start, length);clone.index = index;return clone;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeReservedNodesResult describeReservedNodes(DescribeReservedNodesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedNodes(request);}",
    "output": "public virtual DescribeReservedNodesResponse DescribeReservedNodes(DescribeReservedNodesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeReservedNodesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeReservedNodesResponseUnmarshaller.Instance;return Invoke<DescribeReservedNodesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeReservedNodesResponse DescribeReservedNodes(DescribeReservedNodesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeReservedNodesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeReservedNodesResponseUnmarshaller.Instance;return Invoke<DescribeReservedNodesResponse>(request, options);}",
    "output": "public DescribeReservedNodesResult describeReservedNodes(DescribeReservedNodesRequest request) {request = beforeClientExecution(request);return executeDescribeReservedNodes(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ObjectWalk(Repository repo, int depth) {super(repo);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag(\"UNSHALLOW\"); this.REINTERESTING = newFlag(\"REINTERESTING\"); this.DEEPEN_NOT = newFlag(\"DEEPEN_NOT\"); }",
    "output": "public ObjectWalk(Repository repo, int depth) : base(repo){this.depth = depth;this.UNSHALLOW = NewFlag(\"UNSHALLOW\");this.REINTERESTING = NewFlag(\"REINTERESTING\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ObjectWalk(Repository repo, int depth) : base(repo){this.depth = depth;this.UNSHALLOW = NewFlag(\"UNSHALLOW\");this.REINTERESTING = NewFlag(\"REINTERESTING\");}",
    "output": "public ObjectWalk(Repository repo, int depth) {super(repo);this.depth = depth;this.deepenNots = Collections.emptyList();this.UNSHALLOW = newFlag(\"UNSHALLOW\"); this.REINTERESTING = newFlag(\"REINTERESTING\"); this.DEEPEN_NOT = newFlag(\"DEEPEN_NOT\"); }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isRefLogDisabled() {return refLogMessage == null;}",
    "output": "public virtual bool IsRefLogDisabled(){return refLogMessage == null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsRefLogDisabled(){return refLogMessage == null;}",
    "output": "public boolean isRefLogDisabled() {return refLogMessage == null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SetLoadBalancerListenerSSLCertificateResult setLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request) {request = beforeClientExecution(request);return executeSetLoadBalancerListenerSSLCertificate(request);}",
    "output": "public virtual SetLoadBalancerListenerSSLCertificateResponse SetLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetLoadBalancerListenerSSLCertificateRequestMarshaller.Instance;options.ResponseUnmarshaller = SetLoadBalancerListenerSSLCertificateResponseUnmarshaller.Instance;return Invoke<SetLoadBalancerListenerSSLCertificateResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SetLoadBalancerListenerSSLCertificateResponse SetLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request){var options = new InvokeOptions();options.RequestMarshaller = SetLoadBalancerListenerSSLCertificateRequestMarshaller.Instance;options.ResponseUnmarshaller = SetLoadBalancerListenerSSLCertificateResponseUnmarshaller.Instance;return Invoke<SetLoadBalancerListenerSSLCertificateResponse>(request, options);}",
    "output": "public SetLoadBalancerListenerSSLCertificateResult setLoadBalancerListenerSSLCertificate(SetLoadBalancerListenerSSLCertificateRequest request) {request = beforeClientExecution(request);return executeSetLoadBalancerListenerSSLCertificate(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeRulesPackagesResult describeRulesPackages(DescribeRulesPackagesRequest request) {request = beforeClientExecution(request);return executeDescribeRulesPackages(request);}",
    "output": "public virtual DescribeRulesPackagesResponse DescribeRulesPackages(DescribeRulesPackagesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeRulesPackagesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeRulesPackagesResponseUnmarshaller.Instance;return Invoke<DescribeRulesPackagesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeRulesPackagesResponse DescribeRulesPackages(DescribeRulesPackagesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeRulesPackagesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeRulesPackagesResponseUnmarshaller.Instance;return Invoke<DescribeRulesPackagesResponse>(request, options);}",
    "output": "public DescribeRulesPackagesResult describeRulesPackages(DescribeRulesPackagesRequest request) {request = beforeClientExecution(request);return executeDescribeRulesPackages(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public byte readByte() throws IOException {return primitiveTypes.readByte();}",
    "output": "public virtual byte readByte(){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual byte readByte(){throw new System.NotImplementedException();}",
    "output": "public byte readByte() throws IOException {return primitiveTypes.readByte();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getConversion() {return s;}",
    "output": "public virtual string getConversion(){return s;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string getConversion(){return s;}",
    "output": "public String getConversion() {return s;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StandardSyntaxParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}",
    "output": "public StandardSyntaxParserTokenManager(ICharStream stream, int lexState): this(stream){SwitchTo(lexState);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public StandardSyntaxParserTokenManager(ICharStream stream, int lexState): this(stream){SwitchTo(lexState);}",
    "output": "public StandardSyntaxParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {return new TurkishLowerCaseFilter(input);}",
    "output": "public override TokenStream Create(TokenStream input){return new TurkishLowerCaseFilter(input);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){return new TurkishLowerCaseFilter(input);}",
    "output": "public TokenStream create(TokenStream input) {return new TurkishLowerCaseFilter(input);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"B\";}",
    "output": "public override string ToString(){return \"B\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"B\";}",
    "output": "public String toString() {return \"B\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return evaluate(srcRowIndex, srcColumnIndex, arg0, DEFAULT_ARG1);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return Evaluate(srcRowIndex, srcColumnIndex, arg0, DEFAULT_ARG1);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){return Evaluate(srcRowIndex, srcColumnIndex, arg0, DEFAULT_ARG1);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {return evaluate(srcRowIndex, srcColumnIndex, arg0, DEFAULT_ARG1);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void doubleField(FieldInfo fieldInfo, double value) {doc.add(new StoredField(fieldInfo.name, value));}",
    "output": "public override void DoubleField(FieldInfo fieldInfo, double value){doc.Add(new StoredField(fieldInfo.Name, value));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void DoubleField(FieldInfo fieldInfo, double value){doc.Add(new StoredField(fieldInfo.Name, value));}",
    "output": "public void doubleField(FieldInfo fieldInfo, double value) {doc.add(new StoredField(fieldInfo.name, value));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDistributionConfigRequest(String id) {setId(id);}",
    "output": "public GetDistributionConfigRequest(string id){_id = id;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GetDistributionConfigRequest(string id){_id = id;}",
    "output": "public GetDistributionConfigRequest(String id) {setId(id);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeCacheSecurityGroupsResult describeCacheSecurityGroups() {return describeCacheSecurityGroups(new DescribeCacheSecurityGroupsRequest());}",
    "output": "public virtual DescribeCacheSecurityGroupsResponse DescribeCacheSecurityGroups(){return DescribeCacheSecurityGroups(new DescribeCacheSecurityGroupsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeCacheSecurityGroupsResponse DescribeCacheSecurityGroups(){return DescribeCacheSecurityGroups(new DescribeCacheSecurityGroupsRequest());}",
    "output": "public DescribeCacheSecurityGroupsResult describeCacheSecurityGroups() {return describeCacheSecurityGroups(new DescribeCacheSecurityGroupsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double d;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);d = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}if (d == 0.0) { return NumberEval.ZERO;}return new NumberEval(d / 100);}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){double d0;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);d0 = OperandResolver.CoerceValueToDouble(ve);}catch (EvaluationException e){return e.GetErrorEval();}if (d0 == 0.0){ return NumberEval.ZERO;}return new NumberEval(d0 / 100);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){double d0;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);d0 = OperandResolver.CoerceValueToDouble(ve);}catch (EvaluationException e){return e.GetErrorEval();}if (d0 == 0.0){ return NumberEval.ZERO;}return new NumberEval(d0 / 100);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {double d;try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);d = OperandResolver.coerceValueToDouble(ve);} catch (EvaluationException e) {return e.getErrorEval();}if (d == 0.0) { return NumberEval.ZERO;}return new NumberEval(d / 100);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean containsCell(int rowIndex, int columnIndex) {if (columnIndex < _firstColumnIndex) {return false;}if (columnIndex > _lastColumnIndex) {return false;}if (rowIndex < _firstRowIndex) {return false;}if (rowIndex > _lastRowIndex) {return false;}return true;}",
    "output": "public bool ContainsCell(int rowIndex, int columnIndex){if (columnIndex < _firstColumnIndex){return false;}if (columnIndex > _lastColumnIndex){return false;}if (rowIndex < _firstRowIndex){return false;}if (rowIndex > _lastRowIndex){return false;}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool ContainsCell(int rowIndex, int columnIndex){if (columnIndex < _firstColumnIndex){return false;}if (columnIndex > _lastColumnIndex){return false;}if (rowIndex < _firstRowIndex){return false;}if (rowIndex > _lastRowIndex){return false;}return true;}",
    "output": "public boolean containsCell(int rowIndex, int columnIndex) {if (columnIndex < _firstColumnIndex) {return false;}if (columnIndex > _lastColumnIndex) {return false;}if (rowIndex < _firstRowIndex) {return false;}if (rowIndex > _lastRowIndex) {return false;}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetSegmentVersionResult getSegmentVersion(GetSegmentVersionRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersion(request);}",
    "output": "public virtual GetSegmentVersionResponse GetSegmentVersion(GetSegmentVersionRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetSegmentVersionRequestMarshaller.Instance;options.ResponseUnmarshaller = GetSegmentVersionResponseUnmarshaller.Instance;return Invoke<GetSegmentVersionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetSegmentVersionResponse GetSegmentVersion(GetSegmentVersionRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetSegmentVersionRequestMarshaller.Instance;options.ResponseUnmarshaller = GetSegmentVersionResponseUnmarshaller.Instance;return Invoke<GetSegmentVersionResponse>(request, options);}",
    "output": "public GetSegmentVersionResult getSegmentVersion(GetSegmentVersionRequest request) {request = beforeClientExecution(request);return executeGetSegmentVersion(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final FloatBuffer put(float[] src, int srcOffset, int byteCount) {throw new ReadOnlyBufferException();}",
    "output": "public sealed override java.nio.FloatBuffer put(float[] src, int srcOffset, int byteCount){throw new java.nio.ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override java.nio.FloatBuffer put(float[] src, int srcOffset, int byteCount){throw new java.nio.ReadOnlyBufferException();}",
    "output": "public final FloatBuffer put(float[] src, int srcOffset, int byteCount) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final IntBuffer put(int[] src) {return put(src, 0, src.length);}",
    "output": "public java.nio.IntBuffer put(int[] src){return put(src, 0, src.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.nio.IntBuffer put(int[] src){return put(src, 0, src.Length);}",
    "output": "public final IntBuffer put(int[] src) {return put(src, 0, src.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"SearchFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}",
    "output": "public SearchFaceRequest(): base(\"LinkFace\", \"2018-07-20\", \"SearchFace\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SearchFaceRequest(): base(\"LinkFace\", \"2018-07-20\", \"SearchFace\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}",
    "output": "public SearchFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"SearchFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TagStreamResult tagStream(TagStreamRequest request) {request = beforeClientExecution(request);return executeTagStream(request);}",
    "output": "public virtual TagStreamResponse TagStream(TagStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = TagStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = TagStreamResponseUnmarshaller.Instance;return Invoke<TagStreamResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual TagStreamResponse TagStream(TagStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = TagStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = TagStreamResponseUnmarshaller.Instance;return Invoke<TagStreamResponse>(request, options);}",
    "output": "public TagStreamResult tagStream(TagStreamRequest request) {request = beforeClientExecution(request);return executeTagStream(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getAccessKeyId() {return this.accessKeyId;}",
    "output": "public string GetAccessKeyId(){return AccessKeyId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string GetAccessKeyId(){return AccessKeyId;}",
    "output": "public String getAccessKeyId() {return this.accessKeyId;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ET previous() {if (expectedModCount == list.modCount) {if (link != list.voidLink) {lastLink = link;link = link.previous;pos--;return lastLink.data;}throw new NoSuchElementException();}throw new ConcurrentModificationException();}",
    "output": "public ET previous(){if (expectedModCount == list.modCount){if (link != list.voidLink){lastLink = link;link = link.previous;pos--;return lastLink.data;}throw new java.util.NoSuchElementException();}throw new java.util.ConcurrentModificationException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ET previous(){if (expectedModCount == list.modCount){if (link != list.voidLink){lastLink = link;link = link.previous;pos--;return lastLink.data;}throw new java.util.NoSuchElementException();}throw new java.util.ConcurrentModificationException();}",
    "output": "public ET previous() {if (expectedModCount == list.modCount) {if (link != list.voidLink) {lastLink = link;link = link.previous;pos--;return lastLink.data;}throw new NoSuchElementException();}throw new ConcurrentModificationException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateLBCookieStickinessPolicyResult createLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request) {request = beforeClientExecution(request);return executeCreateLBCookieStickinessPolicy(request);}",
    "output": "public virtual CreateLBCookieStickinessPolicyResponse CreateLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateLBCookieStickinessPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateLBCookieStickinessPolicyResponseUnmarshaller.Instance;return Invoke<CreateLBCookieStickinessPolicyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateLBCookieStickinessPolicyResponse CreateLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateLBCookieStickinessPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateLBCookieStickinessPolicyResponseUnmarshaller.Instance;return Invoke<CreateLBCookieStickinessPolicyResponse>(request, options);}",
    "output": "public CreateLBCookieStickinessPolicyResult createLBCookieStickinessPolicy(CreateLBCookieStickinessPolicyRequest request) {request = beforeClientExecution(request);return executeCreateLBCookieStickinessPolicy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateDataSourceFromRDSResult createDataSourceFromRDS(CreateDataSourceFromRDSRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRDS(request);}",
    "output": "public virtual CreateDataSourceFromRDSResponse CreateDataSourceFromRDS(CreateDataSourceFromRDSRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDataSourceFromRDSRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDataSourceFromRDSResponseUnmarshaller.Instance;return Invoke<CreateDataSourceFromRDSResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateDataSourceFromRDSResponse CreateDataSourceFromRDS(CreateDataSourceFromRDSRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDataSourceFromRDSRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDataSourceFromRDSResponseUnmarshaller.Instance;return Invoke<CreateDataSourceFromRDSResponse>(request, options);}",
    "output": "public CreateDataSourceFromRDSResult createDataSourceFromRDS(CreateDataSourceFromRDSRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRDS(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateReceiptFilterResult createReceiptFilter(CreateReceiptFilterRequest request) {request = beforeClientExecution(request);return executeCreateReceiptFilter(request);}",
    "output": "public virtual CreateReceiptFilterResponse CreateReceiptFilter(CreateReceiptFilterRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateReceiptFilterRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateReceiptFilterResponseUnmarshaller.Instance;return Invoke<CreateReceiptFilterResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateReceiptFilterResponse CreateReceiptFilter(CreateReceiptFilterRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateReceiptFilterRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateReceiptFilterResponseUnmarshaller.Instance;return Invoke<CreateReceiptFilterResponse>(request, options);}",
    "output": "public CreateReceiptFilterResult createReceiptFilter(CreateReceiptFilterRequest request) {request = beforeClientExecution(request);return executeCreateReceiptFilter(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final byte get(int index) {checkIndex(index);return backingArray[offset + index];}",
    "output": "public sealed override byte get(int index){checkIndex(index);return backingArray[offset + index];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override byte get(int index){checkIndex(index);return backingArray[offset + index];}",
    "output": "public final byte get(int index) {checkIndex(index);return backingArray[offset + index];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CherryPickCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}",
    "output": "public virtual NGit.Api.CherryPickCommand Include(Ref commit){CheckCallable();commits.AddItem(commit);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.CherryPickCommand Include(Ref commit){CheckCallable();commits.AddItem(commit);return this;}",
    "output": "public CherryPickCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ATNDeserializationOptions() {this.verifyATN = true;this.generateRuleBypassTransitions = false;}",
    "output": "public ATNDeserializationOptions(){this.verifyATN = true;this.generateRuleBypassTransitions = false;this.optimize = true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ATNDeserializationOptions(){this.verifyATN = true;this.generateRuleBypassTransitions = false;this.optimize = true;}",
    "output": "public ATNDeserializationOptions() {this.verifyATN = true;this.generateRuleBypassTransitions = false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListIdentityPoliciesResult listIdentityPolicies(ListIdentityPoliciesRequest request) {request = beforeClientExecution(request);return executeListIdentityPolicies(request);}",
    "output": "public virtual ListIdentityPoliciesResponse ListIdentityPolicies(ListIdentityPoliciesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIdentityPoliciesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIdentityPoliciesResponseUnmarshaller.Instance;return Invoke<ListIdentityPoliciesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListIdentityPoliciesResponse ListIdentityPolicies(ListIdentityPoliciesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListIdentityPoliciesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListIdentityPoliciesResponseUnmarshaller.Instance;return Invoke<ListIdentityPoliciesResponse>(request, options);}",
    "output": "public ListIdentityPoliciesResult listIdentityPolicies(ListIdentityPoliciesRequest request) {request = beforeClientExecution(request);return executeListIdentityPolicies(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static boolean isValidCode(int errorCode) {for (FormulaError error : values()) {if (error.getCode() == errorCode) return true;if (error.getLongCode() == errorCode) return true;}return false;}",
    "output": "public static bool IsValidCode(int errorCode){foreach (FormulaError error in _values){if (error.Code == errorCode) return true;if (error.LongCode == errorCode) return true;}return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static bool IsValidCode(int errorCode){foreach (FormulaError error in _values){if (error.Code == errorCode) return true;if (error.LongCode == errorCode) return true;}return false;}",
    "output": "public static boolean isValidCode(int errorCode) {for (FormulaError error : values()) {if (error.getCode() == errorCode) return true;if (error.getLongCode() == errorCode) return true;}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RKRecord(RecordInputStream in) {super(in);field_4_rk_number = in.readInt();}",
    "output": "public RKRecord(RecordInputStream in1): base(in1){field_4_rk_number = in1.ReadInt();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RKRecord(RecordInputStream in1): base(in1){field_4_rk_number = in1.ReadInt();}",
    "output": "public RKRecord(RecordInputStream in) {super(in);field_4_rk_number = in.readInt();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void copyTo(ByteBuffer b) {b.put(toHexByteArray());}",
    "output": "public virtual void CopyTo(ByteBuffer b){b.Put(ToHexByteArray());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void CopyTo(ByteBuffer b){b.Put(ToHexByteArray());}",
    "output": "public void copyTo(ByteBuffer b) {b.put(toHexByteArray());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[DAT]\\n\");buffer.append(\"    .options              = \").append(\"0x\").append(HexDump.toHex(  getOptions ())).append(\" (\").append( getOptions() ).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"         .horizontalBorder         = \").append(isHorizontalBorder()).append('\\n');buffer.append(\"         .verticalBorder           = \").append(isVerticalBorder()).append('\\n');buffer.append(\"         .border                   = \").append(isBorder()).append('\\n');buffer.append(\"         .showSeriesKey            = \").append(isShowSeriesKey()).append('\\n');buffer.append(\"[/DAT]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[DAT]\\n\");buffer.Append(\"    .options              = \").Append(\"0x\").Append(HexDump.ToHex(Options)).Append(\" (\").Append(Options).Append(\" )\");buffer.Append(Environment.NewLine);buffer.Append(\"         .horizontalBorder         = \").Append(IsHorizontalBorder()).Append('\\n');buffer.Append(\"         .verticalBorder           = \").Append(IsVerticalBorder()).Append('\\n');buffer.Append(\"         .border                   = \").Append(IsBorder()).Append('\\n');buffer.Append(\"         .showSeriesKey            = \").Append(IsShowSeriesKey()).Append('\\n');buffer.Append(\"[/DAT]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[DAT]\\n\");buffer.Append(\"    .options              = \").Append(\"0x\").Append(HexDump.ToHex(Options)).Append(\" (\").Append(Options).Append(\" )\");buffer.Append(Environment.NewLine);buffer.Append(\"         .horizontalBorder         = \").Append(IsHorizontalBorder()).Append('\\n');buffer.Append(\"         .verticalBorder           = \").Append(IsVerticalBorder()).Append('\\n');buffer.Append(\"         .border                   = \").Append(IsBorder()).Append('\\n');buffer.Append(\"         .showSeriesKey            = \").Append(IsShowSeriesKey()).Append('\\n');buffer.Append(\"[/DAT]\\n\");return buffer.ToString();}",
    "output": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[DAT]\\n\");buffer.append(\"    .options              = \").append(\"0x\").append(HexDump.toHex(  getOptions ())).append(\" (\").append( getOptions() ).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"         .horizontalBorder         = \").append(isHorizontalBorder()).append('\\n');buffer.append(\"         .verticalBorder           = \").append(isVerticalBorder()).append('\\n');buffer.append(\"         .border                   = \").append(isBorder()).append('\\n');buffer.append(\"         .showSeriesKey            = \").append(isShowSeriesKey()).append('\\n');buffer.append(\"[/DAT]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateDashboardResult updateDashboard(UpdateDashboardRequest request) {request = beforeClientExecution(request);return executeUpdateDashboard(request);}",
    "output": "public virtual UpdateDashboardResponse UpdateDashboard(UpdateDashboardRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDashboardRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDashboardResponseUnmarshaller.Instance;return Invoke<UpdateDashboardResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateDashboardResponse UpdateDashboard(UpdateDashboardRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDashboardRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDashboardResponseUnmarshaller.Instance;return Invoke<UpdateDashboardResponse>(request, options);}",
    "output": "public UpdateDashboardResult updateDashboard(UpdateDashboardRequest request) {request = beforeClientExecution(request);return executeUpdateDashboard(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RegisterTagRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RegisterTag\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public RegisterTagRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"RegisterTag\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RegisterTagRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"RegisterTag\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public RegisterTagRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RegisterTag\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DiffCommand setPathFilter(TreeFilter pathFilter) {this.pathFilter = pathFilter;return this;}",
    "output": "public virtual NGit.Api.DiffCommand SetPathFilter(TreeFilter pathFilter){this.pathFilter = pathFilter;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.DiffCommand SetPathFilter(TreeFilter pathFilter){this.pathFilter = pathFilter;return this;}",
    "output": "public DiffCommand setPathFilter(TreeFilter pathFilter) {this.pathFilter = pathFilter;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean markSupported() {return true;}",
    "output": "public override bool MarkSupported(){return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool MarkSupported(){return true;}",
    "output": "public boolean markSupported() {return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder sb = new StringBuilder(getClass().getSimpleName() + \": \");sb.append(\"maxThreadCount=\").append(maxThreadCount).append(\", \");sb.append(\"maxMergeCount=\").append(maxMergeCount).append(\", \");sb.append(\"ioThrottle=\").append(doAutoIOThrottle);return sb.toString();}",
    "output": "public override string ToString(){StringBuilder sb = new StringBuilder(this.GetType().Name + \": \");sb.Append(\"maxThreadCount=\").Append(maxThreadCount).Append(\", \");sb.Append(\"maxMergeCount=\").Append(maxMergeCount).Append(\", \");sb.Append(\"mergeThreadPriority=\").Append(mergeThreadPriority);return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){StringBuilder sb = new StringBuilder(this.GetType().Name + \": \");sb.Append(\"maxThreadCount=\").Append(maxThreadCount).Append(\", \");sb.Append(\"maxMergeCount=\").Append(maxMergeCount).Append(\", \");sb.Append(\"mergeThreadPriority=\").Append(mergeThreadPriority);return sb.ToString();}",
    "output": "public String toString() {StringBuilder sb = new StringBuilder(getClass().getSimpleName() + \": \");sb.append(\"maxThreadCount=\").append(maxThreadCount).append(\", \");sb.append(\"maxMergeCount=\").append(maxMergeCount).append(\", \");sb.append(\"ioThrottle=\").append(doAutoIOThrottle);return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized void println(String str) {print(str);newline();}",
    "output": "public virtual void println(string str){lock (this){print(str);newline();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void println(string str){lock (this){print(str);newline();}}",
    "output": "public synchronized void println(String str) {print(str);newline();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateApiResult updateApi(UpdateApiRequest request) {request = beforeClientExecution(request);return executeUpdateApi(request);}",
    "output": "public virtual UpdateApiResponse UpdateApi(UpdateApiRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateApiRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateApiResponseUnmarshaller.Instance;return Invoke<UpdateApiResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateApiResponse UpdateApi(UpdateApiRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateApiRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateApiResponseUnmarshaller.Instance;return Invoke<UpdateApiResponse>(request, options);}",
    "output": "public UpdateApiResult updateApi(UpdateApiRequest request) {request = beforeClientExecution(request);return executeUpdateApi(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FlushStageAuthorizersCacheResult flushStageAuthorizersCache(FlushStageAuthorizersCacheRequest request) {request = beforeClientExecution(request);return executeFlushStageAuthorizersCache(request);}",
    "output": "public virtual FlushStageAuthorizersCacheResponse FlushStageAuthorizersCache(FlushStageAuthorizersCacheRequest request){var options = new InvokeOptions();options.RequestMarshaller = FlushStageAuthorizersCacheRequestMarshaller.Instance;options.ResponseUnmarshaller = FlushStageAuthorizersCacheResponseUnmarshaller.Instance;return Invoke<FlushStageAuthorizersCacheResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual FlushStageAuthorizersCacheResponse FlushStageAuthorizersCache(FlushStageAuthorizersCacheRequest request){var options = new InvokeOptions();options.RequestMarshaller = FlushStageAuthorizersCacheRequestMarshaller.Instance;options.ResponseUnmarshaller = FlushStageAuthorizersCacheResponseUnmarshaller.Instance;return Invoke<FlushStageAuthorizersCacheResponse>(request, options);}",
    "output": "public FlushStageAuthorizersCacheResult flushStageAuthorizersCache(FlushStageAuthorizersCacheRequest request) {request = beforeClientExecution(request);return executeFlushStageAuthorizersCache(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BasicQueryFactory(int maxBasicQueries) {this.maxBasicQueries = maxBasicQueries;this.queriesMade = 0;}",
    "output": "public BasicQueryFactory(int maxBasicQueries){this.maxBasicQueries = maxBasicQueries;this.queriesMade = 0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BasicQueryFactory(int maxBasicQueries){this.maxBasicQueries = maxBasicQueries;this.queriesMade = 0;}",
    "output": "public BasicQueryFactory(int maxBasicQueries) {this.maxBasicQueries = maxBasicQueries;this.queriesMade = 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TrackingRefUpdate getTrackingRefUpdate(String localName) {return updates.get(localName);}",
    "output": "public virtual TrackingRefUpdate GetTrackingRefUpdate(string localName){return updates.Get(localName);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual TrackingRefUpdate GetTrackingRefUpdate(string localName){return updates.Get(localName);}",
    "output": "public TrackingRefUpdate getTrackingRefUpdate(String localName) {return updates.get(localName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[CATLAB]\\n\");buffer.append(\"    .rt      =\").append(HexDump.shortToHex(rt)).append('\\n');buffer.append(\"    .grbitFrt=\").append(HexDump.shortToHex(grbitFrt)).append('\\n');buffer.append(\"    .wOffset =\").append(HexDump.shortToHex(wOffset)).append('\\n');buffer.append(\"    .at      =\").append(HexDump.shortToHex(at)).append('\\n');buffer.append(\"    .grbit   =\").append(HexDump.shortToHex(grbit)).append('\\n');if(unused != null)buffer.append(\"    .unused  =\").append(HexDump.shortToHex(unused)).append('\\n');buffer.append(\"[/CATLAB]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[CATLAB]\\n\");buffer.Append(\"    .rt      =\").Append(HexDump.ShortToHex(rt)).Append('\\n');buffer.Append(\"    .grbitFrt=\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');buffer.Append(\"    .wOffset =\").Append(HexDump.ShortToHex(wOffset)).Append('\\n');buffer.Append(\"    .at      =\").Append(HexDump.ShortToHex(at)).Append('\\n');buffer.Append(\"    .grbit   =\").Append(HexDump.ShortToHex(grbit)).Append('\\n');buffer.Append(\"    .unused  =\").Append(HexDump.ShortToHex((short)unused)).Append('\\n');buffer.Append(\"[/CATLAB]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[CATLAB]\\n\");buffer.Append(\"    .rt      =\").Append(HexDump.ShortToHex(rt)).Append('\\n');buffer.Append(\"    .grbitFrt=\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');buffer.Append(\"    .wOffset =\").Append(HexDump.ShortToHex(wOffset)).Append('\\n');buffer.Append(\"    .at      =\").Append(HexDump.ShortToHex(at)).Append('\\n');buffer.Append(\"    .grbit   =\").Append(HexDump.ShortToHex(grbit)).Append('\\n');buffer.Append(\"    .unused  =\").Append(HexDump.ShortToHex((short)unused)).Append('\\n');buffer.Append(\"[/CATLAB]\\n\");return buffer.ToString();}",
    "output": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[CATLAB]\\n\");buffer.append(\"    .rt      =\").append(HexDump.shortToHex(rt)).append('\\n');buffer.append(\"    .grbitFrt=\").append(HexDump.shortToHex(grbitFrt)).append('\\n');buffer.append(\"    .wOffset =\").append(HexDump.shortToHex(wOffset)).append('\\n');buffer.append(\"    .at      =\").append(HexDump.shortToHex(at)).append('\\n');buffer.append(\"    .grbit   =\").append(HexDump.shortToHex(grbit)).append('\\n');if(unused != null)buffer.append(\"    .unused  =\").append(HexDump.shortToHex(unused)).append('\\n');buffer.append(\"[/CATLAB]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public EnableDirectoryResult enableDirectory(EnableDirectoryRequest request) {request = beforeClientExecution(request);return executeEnableDirectory(request);}",
    "output": "public virtual EnableDirectoryResponse EnableDirectory(EnableDirectoryRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableDirectoryRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableDirectoryResponseUnmarshaller.Instance;return Invoke<EnableDirectoryResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual EnableDirectoryResponse EnableDirectory(EnableDirectoryRequest request){var options = new InvokeOptions();options.RequestMarshaller = EnableDirectoryRequestMarshaller.Instance;options.ResponseUnmarshaller = EnableDirectoryResponseUnmarshaller.Instance;return Invoke<EnableDirectoryResponse>(request, options);}",
    "output": "public EnableDirectoryResult enableDirectory(EnableDirectoryRequest request) {request = beforeClientExecution(request);return executeEnableDirectory(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IntBuffer put(int[] src, int srcOffset, int intCount) {if (intCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, intCount);position += intCount;return this;}",
    "output": "public override java.nio.IntBuffer put(int[] src, int srcOffset, int intCount){if (intCount > remaining()){throw new java.nio.BufferOverflowException();}System.Array.Copy(src, srcOffset, backingArray, offset + _position, intCount);_position += intCount;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.IntBuffer put(int[] src, int srcOffset, int intCount){if (intCount > remaining()){throw new java.nio.BufferOverflowException();}System.Array.Copy(src, srcOffset, backingArray, offset + _position, intCount);_position += intCount;return this;}",
    "output": "public IntBuffer put(int[] src, int srcOffset, int intCount) {if (intCount > remaining()) {throw new BufferOverflowException();}System.arraycopy(src, srcOffset, backingArray, offset + position, intCount);position += intCount;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[PROT4REVPASSWORD]\\n\");buffer.append(\"    .password = \").append(HexDump.shortToHex(field_1_password)).append(\"\\n\");buffer.append(\"[/PROT4REVPASSWORD]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[PROT4REVPASSWORD]\\n\");buffer.Append(\"    .password       = \").Append(StringUtil.ToHexString(field_1_password)).Append(\"\\n\");buffer.Append(\"[/PROT4REVPASSWORD]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[PROT4REVPASSWORD]\\n\");buffer.Append(\"    .password       = \").Append(StringUtil.ToHexString(field_1_password)).Append(\"\\n\");buffer.Append(\"[/PROT4REVPASSWORD]\\n\");return buffer.ToString();}",
    "output": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[PROT4REVPASSWORD]\\n\");buffer.append(\"    .password = \").append(HexDump.shortToHex(field_1_password)).append(\"\\n\");buffer.append(\"[/PROT4REVPASSWORD]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeProjectVersionsResult describeProjectVersions(DescribeProjectVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeProjectVersions(request);}",
    "output": "public virtual DescribeProjectVersionsResponse DescribeProjectVersions(DescribeProjectVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeProjectVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeProjectVersionsResponseUnmarshaller.Instance;return Invoke<DescribeProjectVersionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeProjectVersionsResponse DescribeProjectVersions(DescribeProjectVersionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeProjectVersionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeProjectVersionsResponseUnmarshaller.Instance;return Invoke<DescribeProjectVersionsResponse>(request, options);}",
    "output": "public DescribeProjectVersionsResult describeProjectVersions(DescribeProjectVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeProjectVersions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateHostedZoneCommentResult updateHostedZoneComment(UpdateHostedZoneCommentRequest request) {request = beforeClientExecution(request);return executeUpdateHostedZoneComment(request);}",
    "output": "public virtual UpdateHostedZoneCommentResponse UpdateHostedZoneComment(UpdateHostedZoneCommentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateHostedZoneCommentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateHostedZoneCommentResponseUnmarshaller.Instance;return Invoke<UpdateHostedZoneCommentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateHostedZoneCommentResponse UpdateHostedZoneComment(UpdateHostedZoneCommentRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateHostedZoneCommentRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateHostedZoneCommentResponseUnmarshaller.Instance;return Invoke<UpdateHostedZoneCommentResponse>(request, options);}",
    "output": "public UpdateHostedZoneCommentResult updateHostedZoneComment(UpdateHostedZoneCommentRequest request) {request = beforeClientExecution(request);return executeUpdateHostedZoneComment(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Rescorer getRescorer(Bindings bindings) {return new ExpressionRescorer(this, bindings);}",
    "output": "public virtual Rescorer GetRescorer(Bindings bindings){return new ExpressionRescorer(this, bindings);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual Rescorer GetRescorer(Bindings bindings){return new ExpressionRescorer(this, bindings);}",
    "output": "public Rescorer getRescorer(Bindings bindings) {return new ExpressionRescorer(this, bindings);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SortedSet<E> headSet(E end) {return headSet(end, false);}",
    "output": "public virtual java.util.SortedSet<E> headSet(E end){return headSet(end, false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.util.SortedSet<E> headSet(E end){return headSet(end, false);}",
    "output": "public SortedSet<E> headSet(E end) {return headSet(end, false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "final public QueryNode DisjQuery(CharSequence field) throws ParseException {QueryNode first, c;Vector<QueryNode> clauses = null;first = ConjQuery(field);label_2:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case OR:;break;default:jj_la1[3] = jj_gen;break label_2;}jj_consume_token(OR);c = ConjQuery(field);if (clauses == null) {clauses = new Vector<QueryNode>();clauses.addElement(first);}clauses.addElement(c);}if (clauses != null) {{if (true) return new OrQueryNode(clauses);}} else {{if (true) return first;}}throw new Error(\"Missing return statement in function\");}",
    "output": "public IQueryNode DisjQuery(string field){IQueryNode first, c;List<IQueryNode> clauses = null;first = ConjQuery(field);while (true){switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk){case RegexpToken.OR:;break;default:jj_la1[5] = jj_gen;goto label_2_break;}Jj_consume_token(RegexpToken.OR);c = ConjQuery(field);if (clauses == null){clauses = new List<IQueryNode>();clauses.Add(first);}clauses.Add(c);}label_2_break:if (clauses != null){{ if (true) return new OrQueryNode(clauses); }}else{{ if (true) return first; }}throw new Exception(\"Missing return statement in function\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IQueryNode DisjQuery(string field){IQueryNode first, c;List<IQueryNode> clauses = null;first = ConjQuery(field);while (true){switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk){case RegexpToken.OR:;break;default:jj_la1[5] = jj_gen;goto label_2_break;}Jj_consume_token(RegexpToken.OR);c = ConjQuery(field);if (clauses == null){clauses = new List<IQueryNode>();clauses.Add(first);}clauses.Add(c);}label_2_break:if (clauses != null){{ if (true) return new OrQueryNode(clauses); }}else{{ if (true) return first; }}throw new Exception(\"Missing return statement in function\");}",
    "output": "final public QueryNode DisjQuery(CharSequence field) throws ParseException {QueryNode first, c;Vector<QueryNode> clauses = null;first = ConjQuery(field);label_2:while (true) {switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case OR:;break;default:jj_la1[3] = jj_gen;break label_2;}jj_consume_token(OR);c = ConjQuery(field);if (clauses == null) {clauses = new Vector<QueryNode>();clauses.addElement(first);}clauses.addElement(c);}if (clauses != null) {{if (true) return new OrQueryNode(clauses);}} else {{if (true) return first;}}throw new Error(\"Missing return statement in function\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DataValidationConstraint createExplicitListConstraint(String[] listOfValues) {return DVConstraint.createExplicitListConstraint(listOfValues);}",
    "output": "public IDataValidationConstraint CreateExplicitListConstraint(String[] listOfValues){return DVConstraint.CreateExplicitListConstraint(listOfValues);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IDataValidationConstraint CreateExplicitListConstraint(String[] listOfValues){return DVConstraint.CreateExplicitListConstraint(listOfValues);}",
    "output": "public DataValidationConstraint createExplicitListConstraint(String[] listOfValues) {return DVConstraint.createExplicitListConstraint(listOfValues);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {String s0;String s1;try {s0 = evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}return BoolEval.valueOf(s0.equals(s1));}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1){String arg;int index;try{arg = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);index = TextFunction.EvaluateIntArg(arg1, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}if (index < 0){return ErrorEval.VALUE_INVALID;}String result;if (_isLeft){result = arg.Substring(0, Math.Min(arg.Length, index));}else{result = arg.Substring(Math.Max(0, arg.Length - index));}return new StringEval(result);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1){String arg;int index;try{arg = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);index = TextFunction.EvaluateIntArg(arg1, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}if (index < 0){return ErrorEval.VALUE_INVALID;}String result;if (_isLeft){result = arg.Substring(0, Math.Min(arg.Length, index));}else{result = arg.Substring(Math.Max(0, arg.Length - index));}return new StringEval(result);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {String s0;String s1;try {s0 = evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}return BoolEval.valueOf(s0.equals(s1));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean offer(E o) {return addLastImpl(o);}",
    "output": "public virtual bool offer(E o){return addLastImpl(o);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool offer(E o){return addLastImpl(o);}",
    "output": "public boolean offer(E o) {return addLastImpl(o);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListInvalidationsRequest(String distributionId) {setDistributionId(distributionId);}",
    "output": "public ListInvalidationsRequest(string distributionId){_distributionId = distributionId;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ListInvalidationsRequest(string distributionId){_distributionId = distributionId;}",
    "output": "public ListInvalidationsRequest(String distributionId) {setDistributionId(distributionId);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TagPhotoRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"TagPhoto\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public TagPhotoRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"TagPhoto\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public TagPhotoRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"TagPhoto\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public TagPhotoRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"TagPhoto\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateFleetResult createFleet(CreateFleetRequest request) {request = beforeClientExecution(request);return executeCreateFleet(request);}",
    "output": "public virtual CreateFleetResponse CreateFleet(CreateFleetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateFleetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateFleetResponseUnmarshaller.Instance;return Invoke<CreateFleetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateFleetResponse CreateFleet(CreateFleetRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateFleetRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateFleetResponseUnmarshaller.Instance;return Invoke<CreateFleetResponse>(request, options);}",
    "output": "public CreateFleetResult createFleet(CreateFleetRequest request) {request = beforeClientExecution(request);return executeCreateFleet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetTransitGatewayAttachmentPropagationsResult getTransitGatewayAttachmentPropagations(GetTransitGatewayAttachmentPropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayAttachmentPropagations(request);}",
    "output": "public virtual GetTransitGatewayAttachmentPropagationsResponse GetTransitGatewayAttachmentPropagations(GetTransitGatewayAttachmentPropagationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTransitGatewayAttachmentPropagationsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTransitGatewayAttachmentPropagationsResponseUnmarshaller.Instance;return Invoke<GetTransitGatewayAttachmentPropagationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetTransitGatewayAttachmentPropagationsResponse GetTransitGatewayAttachmentPropagations(GetTransitGatewayAttachmentPropagationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTransitGatewayAttachmentPropagationsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTransitGatewayAttachmentPropagationsResponseUnmarshaller.Instance;return Invoke<GetTransitGatewayAttachmentPropagationsResponse>(request, options);}",
    "output": "public GetTransitGatewayAttachmentPropagationsResult getTransitGatewayAttachmentPropagations(GetTransitGatewayAttachmentPropagationsRequest request) {request = beforeClientExecution(request);return executeGetTransitGatewayAttachmentPropagations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListWorkteamsResult listWorkteams(ListWorkteamsRequest request) {request = beforeClientExecution(request);return executeListWorkteams(request);}",
    "output": "public virtual ListWorkteamsResponse ListWorkteams(ListWorkteamsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListWorkteamsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListWorkteamsResponseUnmarshaller.Instance;return Invoke<ListWorkteamsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListWorkteamsResponse ListWorkteams(ListWorkteamsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListWorkteamsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListWorkteamsResponseUnmarshaller.Instance;return Invoke<ListWorkteamsResponse>(request, options);}",
    "output": "public ListWorkteamsResult listWorkteams(ListWorkteamsRequest request) {request = beforeClientExecution(request);return executeListWorkteams(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DetachVpnGatewayResult detachVpnGateway(DetachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeDetachVpnGateway(request);}",
    "output": "public virtual DetachVpnGatewayResponse DetachVpnGateway(DetachVpnGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetachVpnGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DetachVpnGatewayResponseUnmarshaller.Instance;return Invoke<DetachVpnGatewayResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DetachVpnGatewayResponse DetachVpnGateway(DetachVpnGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetachVpnGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = DetachVpnGatewayResponseUnmarshaller.Instance;return Invoke<DetachVpnGatewayResponse>(request, options);}",
    "output": "public DetachVpnGatewayResult detachVpnGateway(DetachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeDetachVpnGateway(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListGeoLocationsResult listGeoLocations() {return listGeoLocations(new ListGeoLocationsRequest());}",
    "output": "public virtual ListGeoLocationsResponse ListGeoLocations(){return ListGeoLocations(new ListGeoLocationsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListGeoLocationsResponse ListGeoLocations(){return ListGeoLocations(new ListGeoLocationsRequest());}",
    "output": "public ListGeoLocationsResult listGeoLocations() {return listGeoLocations(new ListGeoLocationsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return getClass().getName() + \" [\" +getStringValue() +\"]\";}",
    "output": "public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(\" [\");sb.Append(StringValue);sb.Append(\"]\");return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(\" [\");sb.Append(StringValue);sb.Append(\"]\");return sb.ToString();}",
    "output": "public String toString() {return getClass().getName() + \" [\" +getStringValue() +\"]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static double decodeNumber(int number) {long raw_number = number;raw_number = raw_number >> 2;double rvalue = 0;if ((number & 0x02) == 0x02){rvalue = raw_number;}else{rvalue = Double.longBitsToDouble(raw_number << 34);}if ((number & 0x01) == 0x01){rvalue /= 100;}return rvalue;}",
    "output": "public static double DecodeNumber(int number){long raw_number = number;raw_number = raw_number >> 2;double rvalue = 0;if ((number & 0x02) == 0x02){rvalue = (double)(raw_number);}else{rvalue = BitConverter.Int64BitsToDouble(raw_number << 34);}if ((number & 0x01) == 0x01){rvalue /= 100;}return rvalue;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static double DecodeNumber(int number){long raw_number = number;raw_number = raw_number >> 2;double rvalue = 0;if ((number & 0x02) == 0x02){rvalue = (double)(raw_number);}else{rvalue = BitConverter.Int64BitsToDouble(raw_number << 34);}if ((number & 0x01) == 0x01){rvalue /= 100;}return rvalue;}",
    "output": "public static double decodeNumber(int number) {long raw_number = number;raw_number = raw_number >> 2;double rvalue = 0;if ((number & 0x02) == 0x02){rvalue = raw_number;}else{rvalue = Double.longBitsToDouble(raw_number << 34);}if ((number & 0x01) == 0x01){rvalue /= 100;}return rvalue;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long get(long index) {assert index >= 0 && index < valueCount;final int block = (int) (index >>> blockShift);final int idx = (int) (index & blockMask);return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);}",
    "output": "public override long Get(long index){Debug.Assert(index >= 0 && index < valueCount);int block = (int)((long)((ulong)index >> blockShift));int idx = (int)(index & blockMask);return (minValues == null ? 0 : minValues[block]) + subReaders[block].Get(idx);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long Get(long index){Debug.Assert(index >= 0 && index < valueCount);int block = (int)((long)((ulong)index >> blockShift));int idx = (int)(index & blockMask);return (minValues == null ? 0 : minValues[block]) + subReaders[block].Get(idx);}",
    "output": "public long get(long index) {assert index >= 0 && index < valueCount;final int block = (int) (index >>> blockShift);final int idx = (int) (index & blockMask);return (minValues == null ? 0 : minValues[block]) + subReaders[block].get(idx);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdatePublishingDestinationResult updatePublishingDestination(UpdatePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeUpdatePublishingDestination(request);}",
    "output": "public virtual UpdatePublishingDestinationResponse UpdatePublishingDestination(UpdatePublishingDestinationRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdatePublishingDestinationRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdatePublishingDestinationResponseUnmarshaller.Instance;return Invoke<UpdatePublishingDestinationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdatePublishingDestinationResponse UpdatePublishingDestination(UpdatePublishingDestinationRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdatePublishingDestinationRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdatePublishingDestinationResponseUnmarshaller.Instance;return Invoke<UpdatePublishingDestinationResponse>(request, options);}",
    "output": "public UpdatePublishingDestinationResult updatePublishingDestination(UpdatePublishingDestinationRequest request) {request = beforeClientExecution(request);return executeUpdatePublishingDestination(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void notifyDeleteCell(EvaluationCell cell) {int sheetIndex = getSheetIndex(cell.getSheet());_cache.notifyDeleteCell(_workbookIx, sheetIndex, cell);}",
    "output": "public void NotifyDeleteCell(IEvaluationCell cell){int sheetIndex = GetSheetIndex(cell.Sheet);_cache.NotifyDeleteCell(_workbookIx, sheetIndex, cell);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void NotifyDeleteCell(IEvaluationCell cell){int sheetIndex = GetSheetIndex(cell.Sheet);_cache.NotifyDeleteCell(_workbookIx, sheetIndex, cell);}",
    "output": "public void notifyDeleteCell(EvaluationCell cell) {int sheetIndex = getSheetIndex(cell.getSheet());_cache.notifyDeleteCell(_workbookIx, sheetIndex, cell);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Request<GetPolicyRequest> marshall(GetPolicyRequest getPolicyRequest) {if (getPolicyRequest == null) {throw new SdkClientException(\"Invalid argument passed to marshall(...)\");}Request<GetPolicyRequest> request = new DefaultRequest<GetPolicyRequest>(getPolicyRequest, \"AmazonIdentityManagement\");request.addParameter(\"Action\", \"GetPolicy\");request.addParameter(\"Version\", \"2010-05-08\");request.setHttpMethod(HttpMethodName.POST);if (getPolicyRequest.getPolicyArn() != null) {request.addParameter(\"PolicyArn\", StringUtils.fromString(getPolicyRequest.getPolicyArn()));}return request;}",
    "output": "public IRequest Marshall(GetPolicyRequest publicRequest){IRequest request = new DefaultRequest(publicRequest, \"Amazon.Lambda\");request.Headers[Amazon.Util.HeaderKeys.XAmzApiVersion] = \"2015-03-31\";request.HttpMethod = \"GET\";if (!publicRequest.IsSetFunctionName())throw new AmazonLambdaException(\"Request object does not have required field FunctionName set\");request.AddPathResource(\"{FunctionName}\", StringUtils.FromString(publicRequest.FunctionName));if (publicRequest.IsSetQualifier())request.Parameters.Add(\"Qualifier\", StringUtils.FromString(publicRequest.Qualifier));request.ResourcePath = \"/2015-03-31/functions/{FunctionName}/policy\";request.MarshallerVersion = 2;request.UseQueryString = true;return request;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IRequest Marshall(GetPolicyRequest publicRequest){IRequest request = new DefaultRequest(publicRequest, \"Amazon.Lambda\");request.Headers[Amazon.Util.HeaderKeys.XAmzApiVersion] = \"2015-03-31\";request.HttpMethod = \"GET\";if (!publicRequest.IsSetFunctionName())throw new AmazonLambdaException(\"Request object does not have required field FunctionName set\");request.AddPathResource(\"{FunctionName}\", StringUtils.FromString(publicRequest.FunctionName));if (publicRequest.IsSetQualifier())request.Parameters.Add(\"Qualifier\", StringUtils.FromString(publicRequest.Qualifier));request.ResourcePath = \"/2015-03-31/functions/{FunctionName}/policy\";request.MarshallerVersion = 2;request.UseQueryString = true;return request;}",
    "output": "public Request<GetPolicyRequest> marshall(GetPolicyRequest getPolicyRequest) {if (getPolicyRequest == null) {throw new SdkClientException(\"Invalid argument passed to marshall(...)\");}Request<GetPolicyRequest> request = new DefaultRequest<GetPolicyRequest>(getPolicyRequest, \"AmazonIdentityManagement\");request.addParameter(\"Action\", \"GetPolicy\");request.addParameter(\"Version\", \"2010-05-08\");request.setHttpMethod(HttpMethodName.POST);if (getPolicyRequest.getPolicyArn() != null) {request.addParameter(\"PolicyArn\", StringUtils.fromString(getPolicyRequest.getPolicyArn()));}return request;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval real_num, ValueEval i_num) {return this.evaluate(srcRowIndex, srcColumnIndex, real_num, i_num, new StringEval(DEFAULT_SUFFIX));}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval real_num, ValueEval i_num){return this.Evaluate(srcRowIndex, srcColumnIndex, real_num, i_num, new StringEval(DEFAULT_SUFFIX));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval real_num, ValueEval i_num){return this.Evaluate(srcRowIndex, srcColumnIndex, real_num, i_num, new StringEval(DEFAULT_SUFFIX));}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval real_num, ValueEval i_num) {return this.evaluate(srcRowIndex, srcColumnIndex, real_num, i_num, new StringEval(DEFAULT_SUFFIX));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_numShapes   =  LittleEndian.getInt( data, pos + size );     size += 4;field_2_lastMSOSPID =  LittleEndian.getInt( data, pos + size );     size += 4;return getRecordSize();}",
    "output": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;int size = 0;field_1_numShapes = LittleEndian.GetInt(data, pos + size); size += 4;field_2_lastMSOSPID = LittleEndian.GetInt(data, pos + size); size += 4;return RecordSize;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;int size = 0;field_1_numShapes = LittleEndian.GetInt(data, pos + size); size += 4;field_2_lastMSOSPID = LittleEndian.GetInt(data, pos + size); size += 4;return RecordSize;}",
    "output": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_numShapes   =  LittleEndian.getInt( data, pos + size );     size += 4;field_2_lastMSOSPID =  LittleEndian.getInt( data, pos + size );     size += 4;return getRecordSize();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final CharsetEncoder reset() {status = INIT;implReset();return this;}",
    "output": "public java.nio.charset.CharsetEncoder reset(){status = INIT;implReset();return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.nio.charset.CharsetEncoder reset(){status = INIT;implReset();return this;}",
    "output": "public final CharsetEncoder reset() {status = INIT;implReset();return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void emit(Token token) {this._token = token;}",
    "output": "public virtual void Emit(IToken token){this._token = token;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Emit(IToken token){this._token = token;}",
    "output": "public void emit(Token token) {this._token = token;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AbstractTreeIterator createSubtreeIterator(ObjectReader reader)throws IncorrectObjectTypeException, IOException {if (currentSubtree == null)throw new IncorrectObjectTypeException(getEntryObjectId(),Constants.TYPE_TREE);return new DirCacheBuildIterator(this, currentSubtree);}",
    "output": "public override AbstractTreeIterator CreateSubtreeIterator(ObjectReader reader){if (currentSubtree == null){throw new IncorrectObjectTypeException(EntryObjectId, Constants.TYPE_TREE);}return new NGit.Dircache.DirCacheBuildIterator(this, currentSubtree);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override AbstractTreeIterator CreateSubtreeIterator(ObjectReader reader){if (currentSubtree == null){throw new IncorrectObjectTypeException(EntryObjectId, Constants.TYPE_TREE);}return new NGit.Dircache.DirCacheBuildIterator(this, currentSubtree);}",
    "output": "public AbstractTreeIterator createSubtreeIterator(ObjectReader reader)throws IncorrectObjectTypeException, IOException {if (currentSubtree == null)throw new IncorrectObjectTypeException(getEntryObjectId(),Constants.TYPE_TREE);return new DirCacheBuildIterator(this, currentSubtree);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GreekLowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public GreekLowerCaseFilterFactory(IDictionary<string, string> args) : base(args){AssureMatchVersion();if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GreekLowerCaseFilterFactory(IDictionary<string, string> args) : base(args){AssureMatchVersion();if (args.Count > 0){throw new System.ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public GreekLowerCaseFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public URI relativize(URI relative) {if (relative.opaque || opaque) {return relative;}if (scheme == null ? relative.scheme != null : !scheme.equals(relative.scheme)) {return relative;}if (authority == null ? relative.authority != null : !authority.equals(relative.authority)) {return relative;}String thisPath = normalize(path, false);String relativePath = normalize(relative.path, false);if (!thisPath.equals(relativePath)) {thisPath = thisPath.substring(0, thisPath.lastIndexOf('/') + 1);if (!relativePath.startsWith(thisPath)) {return relative;}}URI result = new URI();result.fragment = relative.fragment;result.query = relative.query;result.path = relativePath.substring(thisPath.length());result.setSchemeSpecificPart();return result;}",
    "output": "public java.net.URI relativize(java.net.URI relative){if (relative.opaque || opaque){return relative;}if (scheme == null ? relative.scheme != null : !scheme.Equals(relative.scheme)){return relative;}if (authority == null ? relative.authority != null : !authority.Equals(relative.authority)){return relative;}string thisPath = normalize(path, false);string relativePath = normalize(relative.path, false);if (!thisPath.Equals(relativePath)){thisPath = Sharpen.StringHelper.Substring(thisPath, 0, thisPath.LastIndexOf('/')+ 1);if (!relativePath.StartsWith(thisPath)){return relative;}}java.net.URI result = new java.net.URI();result.fragment = relative.fragment;result.query = relative.query;result.path = Sharpen.StringHelper.Substring(relativePath, thisPath.Length);result.setSchemeSpecificPart();return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.net.URI relativize(java.net.URI relative){if (relative.opaque || opaque){return relative;}if (scheme == null ? relative.scheme != null : !scheme.Equals(relative.scheme)){return relative;}if (authority == null ? relative.authority != null : !authority.Equals(relative.authority)){return relative;}string thisPath = normalize(path, false);string relativePath = normalize(relative.path, false);if (!thisPath.Equals(relativePath)){thisPath = Sharpen.StringHelper.Substring(thisPath, 0, thisPath.LastIndexOf('/')+ 1);if (!relativePath.StartsWith(thisPath)){return relative;}}java.net.URI result = new java.net.URI();result.fragment = relative.fragment;result.query = relative.query;result.path = Sharpen.StringHelper.Substring(relativePath, thisPath.Length);result.setSchemeSpecificPart();return result;}",
    "output": "public URI relativize(URI relative) {if (relative.opaque || opaque) {return relative;}if (scheme == null ? relative.scheme != null : !scheme.equals(relative.scheme)) {return relative;}if (authority == null ? relative.authority != null : !authority.equals(relative.authority)) {return relative;}String thisPath = normalize(path, false);String relativePath = normalize(relative.path, false);if (!thisPath.equals(relativePath)) {thisPath = thisPath.substring(0, thisPath.lastIndexOf('/') + 1);if (!relativePath.startsWith(thisPath)) {return relative;}}URI result = new URI();result.fragment = relative.fragment;result.query = relative.query;result.path = relativePath.substring(thisPath.length());result.setSchemeSpecificPart();return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Reader freeze(boolean trim) {if (frozen) {throw new IllegalStateException(\"already frozen\");}if (didSkipBytes) {throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");}if (trim && upto < blockSize) {final byte[] newBlock = new byte[upto];System.arraycopy(currentBlock, 0, newBlock, 0, upto);currentBlock = newBlock;}if (currentBlock == null) {currentBlock = EMPTY_BYTES;}addBlock(currentBlock);frozen = true;currentBlock = null;return new PagedBytes.Reader(this);}",
    "output": "public Reader Freeze(bool trim){if (frozen){throw new InvalidOperationException(\"already frozen\");}if (didSkipBytes){throw new InvalidOperationException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");}if (trim && upto < blockSize){var newBlock = new byte[upto];Array.Copy(currentBlock, 0, newBlock, 0, upto);currentBlock = newBlock;}if (currentBlock == null){currentBlock = EMPTY_BYTES;}blocks.Add(currentBlock);blockEnd.Add(upto);frozen = true;currentBlock = null;return new PagedBytes.Reader(this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Reader Freeze(bool trim){if (frozen){throw new InvalidOperationException(\"already frozen\");}if (didSkipBytes){throw new InvalidOperationException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");}if (trim && upto < blockSize){var newBlock = new byte[upto];Array.Copy(currentBlock, 0, newBlock, 0, upto);currentBlock = newBlock;}if (currentBlock == null){currentBlock = EMPTY_BYTES;}blocks.Add(currentBlock);blockEnd.Add(upto);frozen = true;currentBlock = null;return new PagedBytes.Reader(this);}",
    "output": "public Reader freeze(boolean trim) {if (frozen) {throw new IllegalStateException(\"already frozen\");}if (didSkipBytes) {throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");}if (trim && upto < blockSize) {final byte[] newBlock = new byte[upto];System.arraycopy(currentBlock, 0, newBlock, 0, upto);currentBlock = newBlock;}if (currentBlock == null) {currentBlock = EMPTY_BYTES;}addBlock(currentBlock);frozen = true;currentBlock = null;return new PagedBytes.Reader(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length == 2) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}if (args.length == 3) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}",
    "output": "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec){if (args.Length == 2){return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1]);}if (args.Length == 3){return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec){if (args.Length == 2){return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1]);}if (args.Length == 3){return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}",
    "output": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length == 2) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);}if (args.length == 3) {return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1], args[2]);}return ErrorEval.VALUE_INVALID;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Cluster createCluster(CreateClusterRequest request) {request = beforeClientExecution(request);return executeCreateCluster(request);}",
    "output": "public virtual CreateClusterResponse CreateCluster(CreateClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateClusterResponseUnmarshaller.Instance;return Invoke<CreateClusterResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateClusterResponse CreateCluster(CreateClusterRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateClusterRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateClusterResponseUnmarshaller.Instance;return Invoke<CreateClusterResponse>(request, options);}",
    "output": "public Cluster createCluster(CreateClusterRequest request) {request = beforeClientExecution(request);return executeCreateCluster(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,Directory dir, OpenMode mode) throws IOException {super(primary);this.dir = dir;if (mode == OpenMode.CREATE) {clearPriorSnapshots();}loadPriorSnapshots();if (mode == OpenMode.APPEND && nextWriteGen == 0) {throw new IllegalStateException(\"no snapshots stored in this directory\");}}",
    "output": "public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary, Directory dir, OpenMode mode): base(primary){this.dir = dir;if (mode == OpenMode.CREATE){ClearPriorSnapshots();}LoadPriorSnapshots();if (mode == OpenMode.APPEND && nextWriteGen == 0){throw new InvalidOperationException(\"no snapshots stored in this directory\");}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary, Directory dir, OpenMode mode): base(primary){this.dir = dir;if (mode == OpenMode.CREATE){ClearPriorSnapshots();}LoadPriorSnapshots();if (mode == OpenMode.APPEND && nextWriteGen == 0){throw new InvalidOperationException(\"no snapshots stored in this directory\");}}",
    "output": "public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary,Directory dir, OpenMode mode) throws IOException {super(primary);this.dir = dir;if (mode == OpenMode.CREATE) {clearPriorSnapshots();}loadPriorSnapshots();if (mode == OpenMode.APPEND && nextWriteGen == 0) {throw new IllegalStateException(\"no snapshots stored in this directory\");}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getText(RuleContext ctx) {return getText(ctx.getSourceInterval());}",
    "output": "public virtual string GetText(RuleContext ctx){return GetText(ctx.SourceInterval);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetText(RuleContext ctx){return GetText(ctx.SourceInterval);}",
    "output": "public String getText(RuleContext ctx) {return getText(ctx.getSourceInterval());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final float get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}",
    "output": "public sealed override float get(){if (_position == _limit){throw new java.nio.BufferUnderflowException();}return backingArray[offset + _position++];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override float get(){if (_position == _limit){throw new java.nio.BufferUnderflowException();}return backingArray[offset + _position++];}",
    "output": "public final float get() {if (position == limit) {throw new BufferUnderflowException();}return backingArray[offset + position++];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteDataSetResult deleteDataSet(DeleteDataSetRequest request) {request = beforeClientExecution(request);return executeDeleteDataSet(request);}",
    "output": "public virtual DeleteDataSetResponse DeleteDataSet(DeleteDataSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDataSetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDataSetResponseUnmarshaller.Instance;return Invoke<DeleteDataSetResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteDataSetResponse DeleteDataSet(DeleteDataSetRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDataSetRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDataSetResponseUnmarshaller.Instance;return Invoke<DeleteDataSetResponse>(request, options);}",
    "output": "public DeleteDataSetResult deleteDataSet(DeleteDataSetRequest request) {request = beforeClientExecution(request);return executeDeleteDataSet(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean contains(Object o) {return containsKey(o);}",
    "output": "public override bool contains(object o){return this._enclosing.containsKey(o);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool contains(object o){return this._enclosing.containsKey(o);}",
    "output": "public boolean contains(Object o) {return containsKey(o);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean matches(char s[], int len) {return super.matches(s, len) && !exceptions.contains(s, 0, len);}",
    "output": "public override bool Matches(char[] s, int len){return base.Matches(s, len) && !m_exceptions.Contains(s, 0, len);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Matches(char[] s, int len){return base.Matches(s, len) && !m_exceptions.Contains(s, 0, len);}",
    "output": "public boolean matches(char s[], int len) {return super.matches(s, len) && !exceptions.contains(s, 0, len);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getDeltaSearchWindowSize() {return deltaSearchWindowSize;}",
    "output": "public virtual int GetDeltaSearchWindowSize(){return deltaSearchWindowSize;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int GetDeltaSearchWindowSize(){return deltaSearchWindowSize;}",
    "output": "public int getDeltaSearchWindowSize() {return deltaSearchWindowSize;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDomainNameResult getDomainName(GetDomainNameRequest request) {request = beforeClientExecution(request);return executeGetDomainName(request);}",
    "output": "public virtual GetDomainNameResponse GetDomainName(GetDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDomainNameResponseUnmarshaller.Instance;return Invoke<GetDomainNameResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetDomainNameResponse GetDomainName(GetDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDomainNameResponseUnmarshaller.Instance;return Invoke<GetDomainNameResponse>(request, options);}",
    "output": "public GetDomainNameResult getDomainName(GetDomainNameRequest request) {request = beforeClientExecution(request);return executeGetDomainName(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteAccessLogSettingsResult deleteAccessLogSettings(DeleteAccessLogSettingsRequest request) {request = beforeClientExecution(request);return executeDeleteAccessLogSettings(request);}",
    "output": "public virtual DeleteAccessLogSettingsResponse DeleteAccessLogSettings(DeleteAccessLogSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAccessLogSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAccessLogSettingsResponseUnmarshaller.Instance;return Invoke<DeleteAccessLogSettingsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteAccessLogSettingsResponse DeleteAccessLogSettings(DeleteAccessLogSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAccessLogSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAccessLogSettingsResponseUnmarshaller.Instance;return Invoke<DeleteAccessLogSettingsResponse>(request, options);}",
    "output": "public DeleteAccessLogSettingsResult deleteAccessLogSettings(DeleteAccessLogSettingsRequest request) {request = beforeClientExecution(request);return executeDeleteAccessLogSettings(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public QueryValueSource(Query q, float defVal) {this.q = q;this.defVal = defVal;}",
    "output": "public QueryValueSource(Query q, float defVal){this.q = q;this.defVal = defVal;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public QueryValueSource(Query q, float defVal){this.q = q;this.defVal = defVal;}",
    "output": "public QueryValueSource(Query q, float defVal) {this.q = q;this.defVal = defVal;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public Object[] toArray() {return snapshot().toArray();}",
    "output": "public override object[] toArray(){lock (this._enclosing){return base.toArray();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override object[] toArray(){lock (this._enclosing){return base.toArray();}}",
    "output": "@Override public Object[] toArray() {return snapshot().toArray();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toLexerString() {if ( s0==null ) return \"\";DFASerializer serializer = new LexerDFASerializer(this);return serializer.toString();}",
    "output": "public String ToLexerString(){if (s0 == null)return \"\";DFASerializer serializer = new LexerDFASerializer(this);return serializer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public String ToLexerString(){if (s0 == null)return \"\";DFASerializer serializer = new LexerDFASerializer(this);return serializer.ToString();}",
    "output": "public String toLexerString() {if ( s0==null ) return \"\";DFASerializer serializer = new LexerDFASerializer(this);return serializer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {fill(0, size(), 0);}",
    "output": "public virtual void Clear(){Fill(0, Count, 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Clear(){Fill(0, Count, 0);}",
    "output": "public void clear() {fill(0, size(), 0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetStreamingDistributionConfigResult getStreamingDistributionConfig(GetStreamingDistributionConfigRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistributionConfig(request);}",
    "output": "public virtual GetStreamingDistributionConfigResponse GetStreamingDistributionConfig(GetStreamingDistributionConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetStreamingDistributionConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetStreamingDistributionConfigResponseUnmarshaller.Instance;return Invoke<GetStreamingDistributionConfigResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetStreamingDistributionConfigResponse GetStreamingDistributionConfig(GetStreamingDistributionConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetStreamingDistributionConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetStreamingDistributionConfigResponseUnmarshaller.Instance;return Invoke<GetStreamingDistributionConfigResponse>(request, options);}",
    "output": "public GetStreamingDistributionConfigResult getStreamingDistributionConfig(GetStreamingDistributionConfigRequest request) {request = beforeClientExecution(request);return executeGetStreamingDistributionConfig(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateDomainContactResult updateDomainContact(UpdateDomainContactRequest request) {request = beforeClientExecution(request);return executeUpdateDomainContact(request);}",
    "output": "public virtual UpdateDomainContactResponse UpdateDomainContact(UpdateDomainContactRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDomainContactRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDomainContactResponseUnmarshaller.Instance;return Invoke<UpdateDomainContactResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateDomainContactResponse UpdateDomainContact(UpdateDomainContactRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateDomainContactRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateDomainContactResponseUnmarshaller.Instance;return Invoke<UpdateDomainContactResponse>(request, options);}",
    "output": "public UpdateDomainContactResult updateDomainContact(UpdateDomainContactRequest request) {request = beforeClientExecution(request);return executeUpdateDomainContact(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListIterator<E> listIterator(int location) {return new LinkIterator<E>(this, location);}",
    "output": "public override java.util.ListIterator<E> listIterator(int location){return new java.util.LinkedList.LinkIterator<E>(this, location);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.util.ListIterator<E> listIterator(int location){return new java.util.LinkedList.LinkIterator<E>(this, location);}",
    "output": "public ListIterator<E> listIterator(int location) {return new LinkIterator<E>(this, location);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[STARTBLOCK]\\n\");buffer.append(\"    .rt              =\").append(HexDump.shortToHex(rt)).append('\\n');buffer.append(\"    .grbitFrt        =\").append(HexDump.shortToHex(grbitFrt)).append('\\n');buffer.append(\"    .iObjectKind     =\").append(HexDump.shortToHex(iObjectKind)).append('\\n');buffer.append(\"    .iObjectContext  =\").append(HexDump.shortToHex(iObjectContext)).append('\\n');buffer.append(\"    .iObjectInstance1=\").append(HexDump.shortToHex(iObjectInstance1)).append('\\n');buffer.append(\"    .iObjectInstance2=\").append(HexDump.shortToHex(iObjectInstance2)).append('\\n');buffer.append(\"[/STARTBLOCK]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[STARTBLOCK]\\n\");buffer.Append(\"    .rt              =\").Append(HexDump.ShortToHex(rt)).Append('\\n');buffer.Append(\"    .grbitFrt        =\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');buffer.Append(\"    .iObjectKind     =\").Append(HexDump.ShortToHex(iObjectKind)).Append('\\n');buffer.Append(\"    .iObjectContext  =\").Append(HexDump.ShortToHex(iObjectContext)).Append('\\n');buffer.Append(\"    .iObjectInstance1=\").Append(HexDump.ShortToHex(iObjectInstance1)).Append('\\n');buffer.Append(\"    .iObjectInstance2=\").Append(HexDump.ShortToHex(iObjectInstance2)).Append('\\n');buffer.Append(\"[/STARTBLOCK]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\"[STARTBLOCK]\\n\");buffer.Append(\"    .rt              =\").Append(HexDump.ShortToHex(rt)).Append('\\n');buffer.Append(\"    .grbitFrt        =\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');buffer.Append(\"    .iObjectKind     =\").Append(HexDump.ShortToHex(iObjectKind)).Append('\\n');buffer.Append(\"    .iObjectContext  =\").Append(HexDump.ShortToHex(iObjectContext)).Append('\\n');buffer.Append(\"    .iObjectInstance1=\").Append(HexDump.ShortToHex(iObjectInstance1)).Append('\\n');buffer.Append(\"    .iObjectInstance2=\").Append(HexDump.ShortToHex(iObjectInstance2)).Append('\\n');buffer.Append(\"[/STARTBLOCK]\\n\");return buffer.ToString();}",
    "output": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[STARTBLOCK]\\n\");buffer.append(\"    .rt              =\").append(HexDump.shortToHex(rt)).append('\\n');buffer.append(\"    .grbitFrt        =\").append(HexDump.shortToHex(grbitFrt)).append('\\n');buffer.append(\"    .iObjectKind     =\").append(HexDump.shortToHex(iObjectKind)).append('\\n');buffer.append(\"    .iObjectContext  =\").append(HexDump.shortToHex(iObjectContext)).append('\\n');buffer.append(\"    .iObjectInstance1=\").append(HexDump.shortToHex(iObjectInstance1)).append('\\n');buffer.append(\"    .iObjectInstance2=\").append(HexDump.shortToHex(iObjectInstance2)).append('\\n');buffer.append(\"[/STARTBLOCK]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long get(int index) {final int o = index / 7;final int b = index % 7;final int shift = b * 9;return (blocks[o] >>> shift) & 511L;}",
    "output": "public override long Get(int index){int o = index / 7;int b = index % 7;int shift = b * 9;return ((long)((ulong)blocks[o] >> shift)) & 511L;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long Get(int index){int o = index / 7;int b = index % 7;int shift = b * 9;return ((long)((ulong)blocks[o] >> shift)) & 511L;}",
    "output": "public long get(int index) {final int o = index / 7;final int b = index % 7;final int shift = b * 9;return (blocks[o] >>> shift) & 511L;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(String field) {StringBuilder buffer = new StringBuilder();boolean needParens = (getLowFreqMinimumNumberShouldMatch() > 0);if (needParens) {buffer.append(\"(\");}for (int i = 0; i < terms.size(); i++) {Term t = terms.get(i);buffer.append(newTermQuery(t, null).toString());if (i != terms.size() - 1) buffer.append(\", \");}if (needParens) {buffer.append(\")\");}if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {buffer.append('~');buffer.append(\"(\");buffer.append(getLowFreqMinimumNumberShouldMatch());buffer.append(getHighFreqMinimumNumberShouldMatch());buffer.append(\")\");}return buffer.toString();}",
    "output": "public override string ToString(string field){var buffer = new StringBuilder();bool needParens = (Boost != 1.0) || (LowFreqMinimumNumberShouldMatch > 0);if (needParens){buffer.Append(\"(\");}for (int i = 0; i < m_terms.Count; i++){Term t = m_terms[i];buffer.Append(NewTermQuery(t, null).ToString());if (i != m_terms.Count - 1){buffer.Append(\", \");}}if (needParens){buffer.Append(\")\");}if (LowFreqMinimumNumberShouldMatch > 0 || HighFreqMinimumNumberShouldMatch > 0){buffer.Append('~');buffer.Append(\"(\");buffer.AppendFormat(CultureInfo.InvariantCulture, \"{0:0.0#######}\", LowFreqMinimumNumberShouldMatch);buffer.AppendFormat(CultureInfo.InvariantCulture, \"{0:0.0#######}\", HighFreqMinimumNumberShouldMatch);buffer.Append(\")\");}if (Boost != 1.0f){buffer.Append(ToStringUtils.Boost(Boost));}return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(string field){var buffer = new StringBuilder();bool needParens = (Boost != 1.0) || (LowFreqMinimumNumberShouldMatch > 0);if (needParens){buffer.Append(\"(\");}for (int i = 0; i < m_terms.Count; i++){Term t = m_terms[i];buffer.Append(NewTermQuery(t, null).ToString());if (i != m_terms.Count - 1){buffer.Append(\", \");}}if (needParens){buffer.Append(\")\");}if (LowFreqMinimumNumberShouldMatch > 0 || HighFreqMinimumNumberShouldMatch > 0){buffer.Append('~');buffer.Append(\"(\");buffer.AppendFormat(CultureInfo.InvariantCulture, \"{0:0.0#######}\", LowFreqMinimumNumberShouldMatch);buffer.AppendFormat(CultureInfo.InvariantCulture, \"{0:0.0#######}\", HighFreqMinimumNumberShouldMatch);buffer.Append(\")\");}if (Boost != 1.0f){buffer.Append(ToStringUtils.Boost(Boost));}return buffer.ToString();}",
    "output": "public String toString(String field) {StringBuilder buffer = new StringBuilder();boolean needParens = (getLowFreqMinimumNumberShouldMatch() > 0);if (needParens) {buffer.append(\"(\");}for (int i = 0; i < terms.size(); i++) {Term t = terms.get(i);buffer.append(newTermQuery(t, null).toString());if (i != terms.size() - 1) buffer.append(\", \");}if (needParens) {buffer.append(\")\");}if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {buffer.append('~');buffer.append(\"(\");buffer.append(getLowFreqMinimumNumberShouldMatch());buffer.append(getHighFreqMinimumNumberShouldMatch());buffer.append(\")\");}return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String[] getStopWords(String fieldName) {Set<String> stopWords = stopWordsPerField.get(fieldName);return stopWords != null ? stopWords.toArray(new String[stopWords.size()]) : new String[0];}",
    "output": "public string[] GetStopWords(string fieldName){var stopWords = stopWordsPerField[fieldName];return stopWords != null ? stopWords.ToArray() : new string[0];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string[] GetStopWords(string fieldName){var stopWords = stopWordsPerField[fieldName];return stopWords != null ? stopWords.ToArray() : new string[0];}",
    "output": "public String[] getStopWords(String fieldName) {Set<String> stopWords = stopWordsPerField.get(fieldName);return stopWords != null ? stopWords.toArray(new String[stopWords.size()]) : new String[0];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void print(float f) {print(String.valueOf(f));}",
    "output": "public virtual void print(float f){print(f.ToString());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void print(float f){print(f.ToString());}",
    "output": "public void print(float f) {print(String.valueOf(f));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MopenCreateGroupRequest() {super(\"MoPen\", \"2018-02-11\", \"MopenCreateGroup\", \"mopen\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}",
    "output": "public MopenCreateGroupRequest(): base(\"MoPen\", \"2018-02-11\", \"MopenCreateGroup\", \"mopen\", \"openAPI\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public MopenCreateGroupRequest(): base(\"MoPen\", \"2018-02-11\", \"MopenCreateGroup\", \"mopen\", \"openAPI\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}",
    "output": "public MopenCreateGroupRequest() {super(\"MoPen\", \"2018-02-11\", \"MopenCreateGroup\", \"mopen\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SmallObject(int type, byte[] data) {this.type = type;this.data = data;}",
    "output": "public SmallObject(int type, byte[] data){this.type = type;this.data = data;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SmallObject(int type, byte[] data){this.type = type;this.data = data;}",
    "output": "public SmallObject(int type, byte[] data) {this.type = type;this.data = data;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final boolean matches(char c) {return Character.isUpperCase(c);}",
    "output": "public bool Matches(char c){return System.Char.IsUpper(c);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool Matches(char c){return System.Char.IsUpper(c);}",
    "output": "public final boolean matches(char c) {return Character.isUpperCase(c);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StartNotebookInstanceResult startNotebookInstance(StartNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeStartNotebookInstance(request);}",
    "output": "public virtual StartNotebookInstanceResponse StartNotebookInstance(StartNotebookInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartNotebookInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = StartNotebookInstanceResponseUnmarshaller.Instance;return Invoke<StartNotebookInstanceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual StartNotebookInstanceResponse StartNotebookInstance(StartNotebookInstanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = StartNotebookInstanceRequestMarshaller.Instance;options.ResponseUnmarshaller = StartNotebookInstanceResponseUnmarshaller.Instance;return Invoke<StartNotebookInstanceResponse>(request, options);}",
    "output": "public StartNotebookInstanceResult startNotebookInstance(StartNotebookInstanceRequest request) {request = beforeClientExecution(request);return executeStartNotebookInstance(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static void putUnicodeLE(String input, byte[] output, int offset) {byte[] bytes = input.getBytes(UTF16LE);System.arraycopy(bytes, 0, output, offset, bytes.length);}",
    "output": "public static void PutUnicodeLE(String input, byte[] output, int offset){byte[] bytes = UTF16LE.GetBytes(input);Array.Copy(bytes, 0, output, offset, bytes.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static void PutUnicodeLE(String input, byte[] output, int offset){byte[] bytes = UTF16LE.GetBytes(input);Array.Copy(bytes, 0, output, offset, bytes.Length);}",
    "output": "public static void putUnicodeLE(String input, byte[] output, int offset) {byte[] bytes = input.getBytes(UTF16LE);System.arraycopy(bytes, 0, output, offset, bytes.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void deleteDocument(int docID) {final int i = readerIndex(docID);getSequentialSubReaders().get(i).deleteDocument(docID - readerBase(i));}",
    "output": "public void DeleteDocument(int docID){int i = ReaderIndex(docID);((FakeDeleteAtomicIndexReader)GetSequentialSubReaders()[i]).DeleteDocument(docID - ReaderBase(i));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void DeleteDocument(int docID){int i = ReaderIndex(docID);((FakeDeleteAtomicIndexReader)GetSequentialSubReaders()[i]).DeleteDocument(docID - ReaderBase(i));}",
    "output": "public void deleteDocument(int docID) {final int i = readerIndex(docID);getSequentialSubReaders().get(i).deleteDocument(docID - readerBase(i));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isRelevant(String docName, QualityQuery query) {QRelJudgement qrj = judgements.get(query.getQueryID());return qrj!=null && qrj.isRelevant(docName);}",
    "output": "public virtual bool IsRelevant(string docName, QualityQuery query){QRelJudgement qrj;judgements.TryGetValue(query.QueryID, out qrj);return qrj != null && qrj.IsRelevant(docName);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsRelevant(string docName, QualityQuery query){QRelJudgement qrj;judgements.TryGetValue(query.QueryID, out qrj);return qrj != null && qrj.IsRelevant(docName);}",
    "output": "public boolean isRelevant(String docName, QualityQuery query) {QRelJudgement qrj = judgements.get(query.getQueryID());return qrj!=null && qrj.isRelevant(docName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final int getBeginB() {return beginB;}",
    "output": "public int GetBeginB(){return beginB;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int GetBeginB(){return beginB;}",
    "output": "public final int getBeginB() {return beginB;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ModifySpotFleetRequestResult modifySpotFleetRequest(ModifySpotFleetRequestRequest request) {request = beforeClientExecution(request);return executeModifySpotFleetRequest(request);}",
    "output": "public virtual ModifySpotFleetRequestResponse ModifySpotFleetRequest(ModifySpotFleetRequestRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifySpotFleetRequestRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifySpotFleetRequestResponseUnmarshaller.Instance;return Invoke<ModifySpotFleetRequestResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ModifySpotFleetRequestResponse ModifySpotFleetRequest(ModifySpotFleetRequestRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifySpotFleetRequestRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifySpotFleetRequestResponseUnmarshaller.Instance;return Invoke<ModifySpotFleetRequestResponse>(request, options);}",
    "output": "public ModifySpotFleetRequestResult modifySpotFleetRequest(ModifySpotFleetRequestRequest request) {request = beforeClientExecution(request);return executeModifySpotFleetRequest(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UncalcedRecord() {_reserved = 0;}",
    "output": "public UncalcedRecord(){_reserved = 0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UncalcedRecord(){_reserved = 0;}",
    "output": "public UncalcedRecord() {_reserved = 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static PageOrder valueOf(int value){return _table[value];}",
    "output": "public static PageOrder ValueOf(int value){return _table[value];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static PageOrder ValueOf(int value){return _table[value];}",
    "output": "public static PageOrder valueOf(int value){return _table[value];}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static CellValue valueOf(boolean booleanValue) {return booleanValue ? TRUE : FALSE;}",
    "output": "public static CellValue ValueOf(bool boolValue){return boolValue ? TRUE : FALSE;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static CellValue ValueOf(bool boolValue){return boolValue ? TRUE : FALSE;}",
    "output": "public static CellValue valueOf(boolean booleanValue) {return booleanValue ? TRUE : FALSE;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void write(String str) {buf.append(str);}",
    "output": "public override void write(string str){buf.append(str);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void write(string str){buf.append(str);}",
    "output": "public void write(String str) {buf.append(str);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void addListener(HSSFListener lsnr, short sid) {List<HSSFListener> list = _records.computeIfAbsent(Short.valueOf(sid), k -> new ArrayList<>(1));list.add(lsnr);}",
    "output": "public void AddListener(IHSSFListener lsnr, short sid){IList list = null;Object obj = records[sid];if (obj != null){list = (IList)obj;}else{list = new ArrayList(1);   list.Add(lsnr);records[sid]=list;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void AddListener(IHSSFListener lsnr, short sid){IList list = null;Object obj = records[sid];if (obj != null){list = (IList)obj;}else{list = new ArrayList(1);   list.Add(lsnr);records[sid]=list;}}",
    "output": "public void addListener(HSSFListener lsnr, short sid) {List<HSSFListener> list = _records.computeIfAbsent(Short.valueOf(sid), k -> new ArrayList<>(1));list.add(lsnr);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetMeetingResult getMeeting(GetMeetingRequest request) {request = beforeClientExecution(request);return executeGetMeeting(request);}",
    "output": "public virtual GetMeetingResponse GetMeeting(GetMeetingRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetMeetingRequestMarshaller.Instance;options.ResponseUnmarshaller = GetMeetingResponseUnmarshaller.Instance;return Invoke<GetMeetingResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetMeetingResponse GetMeeting(GetMeetingRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetMeetingRequestMarshaller.Instance;options.ResponseUnmarshaller = GetMeetingResponseUnmarshaller.Instance;return Invoke<GetMeetingResponse>(request, options);}",
    "output": "public GetMeetingResult getMeeting(GetMeetingRequest request) {request = beforeClientExecution(request);return executeGetMeeting(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void stopTimer() {stop = true;}",
    "output": "public void StopTimer(){stop = true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void StopTimer(){stop = true;}",
    "output": "public void stopTimer() {stop = true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AttachLoadBalancerTargetGroupsResult attachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancerTargetGroups(request);}",
    "output": "public virtual AttachLoadBalancerTargetGroupsResponse AttachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachLoadBalancerTargetGroupsRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachLoadBalancerTargetGroupsResponseUnmarshaller.Instance;return Invoke<AttachLoadBalancerTargetGroupsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AttachLoadBalancerTargetGroupsResponse AttachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachLoadBalancerTargetGroupsRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachLoadBalancerTargetGroupsResponseUnmarshaller.Instance;return Invoke<AttachLoadBalancerTargetGroupsResponse>(request, options);}",
    "output": "public AttachLoadBalancerTargetGroupsResult attachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancerTargetGroups(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetQueryLoggingConfigResult getQueryLoggingConfig(GetQueryLoggingConfigRequest request) {request = beforeClientExecution(request);return executeGetQueryLoggingConfig(request);}",
    "output": "public virtual GetQueryLoggingConfigResponse GetQueryLoggingConfig(GetQueryLoggingConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetQueryLoggingConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetQueryLoggingConfigResponseUnmarshaller.Instance;return Invoke<GetQueryLoggingConfigResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetQueryLoggingConfigResponse GetQueryLoggingConfig(GetQueryLoggingConfigRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetQueryLoggingConfigRequestMarshaller.Instance;options.ResponseUnmarshaller = GetQueryLoggingConfigResponseUnmarshaller.Instance;return Invoke<GetQueryLoggingConfigResponse>(request, options);}",
    "output": "public GetQueryLoggingConfigResult getQueryLoggingConfig(GetQueryLoggingConfigRequest request) {request = beforeClientExecution(request);return executeGetQueryLoggingConfig(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListIterator<E> listIterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}",
    "output": "public virtual java.util.ListIterator<E> listIterator(){object[] snapshot = elements;return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(snapshot, 0,snapshot.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.util.ListIterator<E> listIterator(){object[] snapshot = elements;return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(snapshot, 0,snapshot.Length);}",
    "output": "public ListIterator<E> listIterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateSnapshotResult createSnapshot(CreateSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateSnapshot(request);}",
    "output": "public virtual CreateSnapshotResponse CreateSnapshot(CreateSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateSnapshotResponseUnmarshaller.Instance;return Invoke<CreateSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateSnapshotResponse CreateSnapshot(CreateSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateSnapshotResponseUnmarshaller.Instance;return Invoke<CreateSnapshotResponse>(request, options);}",
    "output": "public CreateSnapshotResult createSnapshot(CreateSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean hasObject(AnyObjectId objectId) {try {return getObjectDatabase().has(objectId);} catch (IOException e) {throw new UncheckedIOException(e);}}",
    "output": "public virtual bool HasObject(AnyObjectId objectId){try{return ObjectDatabase.Has(objectId);}catch (IOException){return false;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool HasObject(AnyObjectId objectId){try{return ObjectDatabase.Has(objectId);}catch (IOException){return false;}}",
    "output": "public boolean hasObject(AnyObjectId objectId) {try {return getObjectDatabase().has(objectId);} catch (IOException e) {throw new UncheckedIOException(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void sort(int from, int to) {checkRange(from, to);mergeSort(from, to);}",
    "output": "public override sealed void Sort(int from, int to){CheckRange(from, to);MergeSort(from, to);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override sealed void Sort(int from, int to){CheckRange(from, to);MergeSort(from, to);}",
    "output": "public final void sort(int from, int to) {checkRange(from, to);mergeSort(from, to);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public <T extends EscherRecord> T getChildById( short recordId ) {for ( EscherRecord childRecord : this ) {if ( childRecord.getRecordId() == recordId ) {@SuppressWarnings( \"unchecked\" )final T result = (T) childRecord;return result;}}return null;}",
    "output": "public EscherRecord GetChildById(short recordId){for (IEnumerator iterator = _childRecords.GetEnumerator(); iterator.MoveNext(); ){EscherRecord escherRecord = (EscherRecord)iterator.Current;if (escherRecord.RecordId == recordId)return escherRecord;}return null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public EscherRecord GetChildById(short recordId){for (IEnumerator iterator = _childRecords.GetEnumerator(); iterator.MoveNext(); ){EscherRecord escherRecord = (EscherRecord)iterator.Current;if (escherRecord.RecordId == recordId)return escherRecord;}return null;}",
    "output": "public <T extends EscherRecord> T getChildById( short recordId ) {for ( EscherRecord childRecord : this ) {if ( childRecord.getRecordId() == recordId ) {@SuppressWarnings( \"unchecked\" )final T result = (T) childRecord;return result;}}return null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_xBasis);out.writeShort(field_2_yBasis);out.writeShort(field_3_heightBasis);out.writeShort(field_4_scale);out.writeShort(field_5_indexToFontTable);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_xBasis);out1.WriteShort(field_2_yBasis);out1.WriteShort(field_3_heightBasis);out1.WriteShort(field_4_scale);out1.WriteShort(field_5_indexToFontTable);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_xBasis);out1.WriteShort(field_2_yBasis);out1.WriteShort(field_3_heightBasis);out1.WriteShort(field_4_scale);out1.WriteShort(field_5_indexToFontTable);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_xBasis);out.writeShort(field_2_yBasis);out.writeShort(field_3_heightBasis);out.writeShort(field_4_scale);out.writeShort(field_5_indexToFontTable);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String toHex(int value) {StringBuilder sb = new StringBuilder(8);writeHex(sb, value & 0xFFFFFFFFL, 8, \"\");return sb.toString();}",
    "output": "public static string ToHex(int value){return ToHex((long)value, 8);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string ToHex(int value){return ToHex((long)value, 8);}",
    "output": "public static String toHex(int value) {StringBuilder sb = new StringBuilder(8);writeHex(sb, value & 0xFFFFFFFFL, 8, \"\");return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static Collection<Ref> sort(Collection<Ref> refs) {final List<Ref> r = new ArrayList<>(refs);Collections.sort(r, INSTANCE);return r;}",
    "output": "public static ICollection<Ref> Sort(ICollection<Ref> refs){IList<Ref> r = new AList<Ref>(refs);r.Sort(INSTANCE);return r;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static ICollection<Ref> Sort(ICollection<Ref> refs){IList<Ref> r = new AList<Ref>(refs);r.Sort(INSTANCE);return r;}",
    "output": "public static Collection<Ref> sort(Collection<Ref> refs) {final List<Ref> r = new ArrayList<>(refs);Collections.sort(r, INSTANCE);return r;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeVpcsResult describeVpcs() {return describeVpcs(new DescribeVpcsRequest());}",
    "output": "public virtual DescribeVpcsResponse DescribeVpcs(){return DescribeVpcs(new DescribeVpcsRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeVpcsResponse DescribeVpcs(){return DescribeVpcs(new DescribeVpcsRequest());}",
    "output": "public DescribeVpcsResult describeVpcs() {return describeVpcs(new DescribeVpcsRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListProposalsResult listProposals(ListProposalsRequest request) {request = beforeClientExecution(request);return executeListProposals(request);}",
    "output": "public virtual ListProposalsResponse ListProposals(ListProposalsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListProposalsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListProposalsResponseUnmarshaller.Instance;return Invoke<ListProposalsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListProposalsResponse ListProposals(ListProposalsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListProposalsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListProposalsResponseUnmarshaller.Instance;return Invoke<ListProposalsResponse>(request, options);}",
    "output": "public ListProposalsResult listProposals(ListProposalsRequest request) {request = beforeClientExecution(request);return executeListProposals(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void close() throws IOException {flush();output.close();}",
    "output": "public override void close(){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void close(){throw new System.NotImplementedException();}",
    "output": "public void close() throws IOException {flush();output.close();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final T get() {return object;}",
    "output": "public T Get(){return m_object;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public T Get(){return m_object;}",
    "output": "public final T get() {return object;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BundleInstanceRequest(String instanceId, Storage storage) {setInstanceId(instanceId);setStorage(storage);}",
    "output": "public BundleInstanceRequest(string instanceId, Storage storage){_instanceId = instanceId;_storage = storage;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BundleInstanceRequest(string instanceId, Storage storage){_instanceId = instanceId;_storage = storage;}",
    "output": "public BundleInstanceRequest(String instanceId, Storage storage) {setInstanceId(instanceId);setStorage(storage);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void back(int delta) {if (delta == 1 && 0 <= prevPtr) {currPtr = prevPtr;prevPtr = -1;if (!eof())parseEntry();return;} else if (delta <= 0)throw new ArrayIndexOutOfBoundsException(delta);final int[] trace = new int[delta + 1];Arrays.fill(trace, -1);int ptr = 0;while (ptr != currPtr) {System.arraycopy(trace, 1, trace, 0, delta);trace[delta] = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (trace[1] == -1)throw new ArrayIndexOutOfBoundsException(delta);prevPtr = trace[0];currPtr = trace[1];parseEntry();}",
    "output": "public override void Back(int delta){if (delta == 1 && 0 <= prevPtr){currPtr = prevPtr;prevPtr = -1;if (!Eof){ParseEntry();}return;}else{if (delta <= 0){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}}int[] trace = new int[delta + 1];Arrays.Fill(trace, -1);int ptr = 0;while (ptr != currPtr){System.Array.Copy(trace, 1, trace, 0, delta);trace[delta] = ptr;while (raw[ptr] != 0){ptr++;}ptr += Constants.OBJECT_ID_LENGTH + 1;}if (trace[1] == -1){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}prevPtr = trace[0];currPtr = trace[1];ParseEntry();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Back(int delta){if (delta == 1 && 0 <= prevPtr){currPtr = prevPtr;prevPtr = -1;if (!Eof){ParseEntry();}return;}else{if (delta <= 0){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}}int[] trace = new int[delta + 1];Arrays.Fill(trace, -1);int ptr = 0;while (ptr != currPtr){System.Array.Copy(trace, 1, trace, 0, delta);trace[delta] = ptr;while (raw[ptr] != 0){ptr++;}ptr += Constants.OBJECT_ID_LENGTH + 1;}if (trace[1] == -1){throw Sharpen.Extensions.CreateIndexOutOfRangeException(delta);}prevPtr = trace[0];currPtr = trace[1];ParseEntry();}",
    "output": "public void back(int delta) {if (delta == 1 && 0 <= prevPtr) {currPtr = prevPtr;prevPtr = -1;if (!eof())parseEntry();return;} else if (delta <= 0)throw new ArrayIndexOutOfBoundsException(delta);final int[] trace = new int[delta + 1];Arrays.fill(trace, -1);int ptr = 0;while (ptr != currPtr) {System.arraycopy(trace, 1, trace, 0, delta);trace[delta] = ptr;while (raw[ptr] != 0)ptr++;ptr += OBJECT_ID_LENGTH + 1;}if (trace[1] == -1)throw new ArrayIndexOutOfBoundsException(delta);prevPtr = trace[0];currPtr = trace[1];parseEntry();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"pred_\"+ruleIndex+\":\"+predIndex;}",
    "output": "public override string ToString(){return \"pred_\" + ruleIndex + \":\" + predIndex;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"pred_\" + ruleIndex + \":\" + predIndex;}",
    "output": "public String toString() {return \"pred_\"+ruleIndex+\":\"+predIndex;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PatternSyntaxException(String description, String pattern, int index) {this.desc = description;this.pattern = pattern;this.index = index;}",
    "output": "public PatternSyntaxException(string description, string pattern, int index){this.desc = description;this.pattern = pattern;this.index = index;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public PatternSyntaxException(string description, string pattern, int index){this.desc = description;this.pattern = pattern;this.index = index;}",
    "output": "public PatternSyntaxException(String description, String pattern, int index) {this.desc = description;this.pattern = pattern;this.index = index;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AlphaAnimation(float from, float to) {mStartAlpha = from;mEndAlpha = to;mCurrentAlpha = from;}",
    "output": "public AlphaAnimation(float fromAlpha, float toAlpha){mFromAlpha = fromAlpha;mToAlpha = toAlpha;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public AlphaAnimation(float fromAlpha, float toAlpha){mFromAlpha = fromAlpha;mToAlpha = toAlpha;}",
    "output": "public AlphaAnimation(float from, float to) {mStartAlpha = from;mEndAlpha = to;mCurrentAlpha = from;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int doLogic() throws Exception {TaxonomyWriter taxonomyWriter = getRunData().getTaxonomyWriter();if (taxonomyWriter != null) {taxonomyWriter.commit();} else {throw new IllegalStateException(\"TaxonomyWriter is not currently open\");}return 1;}",
    "output": "public override int DoLogic(){ITaxonomyWriter taxonomyWriter = RunData.TaxonomyWriter;if (taxonomyWriter != null){taxonomyWriter.Commit();}else{throw new InvalidOperationException(\"TaxonomyWriter is not currently open\");}return 1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int DoLogic(){ITaxonomyWriter taxonomyWriter = RunData.TaxonomyWriter;if (taxonomyWriter != null){taxonomyWriter.Commit();}else{throw new InvalidOperationException(\"TaxonomyWriter is not currently open\");}return 1;}",
    "output": "public int doLogic() throws Exception {TaxonomyWriter taxonomyWriter = getRunData().getTaxonomyWriter();if (taxonomyWriter != null) {taxonomyWriter.commit();} else {throw new IllegalStateException(\"TaxonomyWriter is not currently open\");}return 1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeltaIndex(byte[] sourceBuffer) {src = sourceBuffer;DeltaIndexScanner scan = new DeltaIndexScanner(src, src.length);table = scan.table;tableMask = scan.tableMask;entries = new long[1 + countEntries(scan)];copyEntries(scan);}",
    "output": "public DeltaIndex(byte[] sourceBuffer){src = sourceBuffer;DeltaIndexScanner scan = new DeltaIndexScanner(src, src.Length);table = scan.table;tableMask = scan.tableMask;entries = new long[1 + CountEntries(scan)];CopyEntries(scan);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeltaIndex(byte[] sourceBuffer){src = sourceBuffer;DeltaIndexScanner scan = new DeltaIndexScanner(src, src.Length);table = scan.table;tableMask = scan.tableMask;entries = new long[1 + CountEntries(scan)];CopyEntries(scan);}",
    "output": "public DeltaIndex(byte[] sourceBuffer) {src = sourceBuffer;DeltaIndexScanner scan = new DeltaIndexScanner(src, src.length);table = scan.table;tableMask = scan.tableMask;entries = new long[1 + countEntries(scan)];copyEntries(scan);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int previousIndex() {return pos;}",
    "output": "public int previousIndex(){return pos;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int previousIndex(){return pos;}",
    "output": "public int previousIndex() {return pos;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public QueryMaker getQueryMaker() {return getRunData().getQueryMaker(this);}",
    "output": "public override IQueryMaker GetQueryMaker(){return RunData.GetQueryMaker(this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override IQueryMaker GetQueryMaker(){return RunData.GetQueryMaker(this);}",
    "output": "public QueryMaker getQueryMaker() {return getRunData().getQueryMaker(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public JapaneseTokenizerFactory(Map<String,String> args) {super(args);mode = Mode.valueOf(get(args, MODE, JapaneseTokenizer.DEFAULT_MODE.toString()).toUpperCase(Locale.ROOT));userDictionaryPath = args.remove(USER_DICT_PATH);userDictionaryEncoding = args.remove(USER_DICT_ENCODING);discardPunctuation = getBoolean(args, DISCARD_PUNCTUATION, true);discardCompoundToken = getBoolean(args, DISCARD_COMPOUND_TOKEN, true);nbestCost = getInt(args, NBEST_COST, 0);nbestExamples = args.remove(NBEST_EXAMPLES);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public JapaneseTokenizerFactory(IDictionary<string, string> args): base(args){Enum.TryParse(Get(args, MODE, JapaneseTokenizer.DEFAULT_MODE.ToString()), true, out mode);userDictionaryPath = Get(args, USER_DICT_PATH);userDictionaryEncoding = Get(args, USER_DICT_ENCODING);discardPunctuation = GetBoolean(args, DISCARD_PUNCTUATION, true);if (args.Count > 0){throw new ArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public JapaneseTokenizerFactory(IDictionary<string, string> args): base(args){Enum.TryParse(Get(args, MODE, JapaneseTokenizer.DEFAULT_MODE.ToString()), true, out mode);userDictionaryPath = Get(args, USER_DICT_PATH);userDictionaryEncoding = Get(args, USER_DICT_ENCODING);discardPunctuation = GetBoolean(args, DISCARD_PUNCTUATION, true);if (args.Count > 0){throw new ArgumentException(\"Unknown parameters: \" + args);}}",
    "output": "public JapaneseTokenizerFactory(Map<String,String> args) {super(args);mode = Mode.valueOf(get(args, MODE, JapaneseTokenizer.DEFAULT_MODE.toString()).toUpperCase(Locale.ROOT));userDictionaryPath = args.remove(USER_DICT_PATH);userDictionaryEncoding = args.remove(USER_DICT_ENCODING);discardPunctuation = getBoolean(args, DISCARD_PUNCTUATION, true);discardCompoundToken = getBoolean(args, DISCARD_COMPOUND_TOKEN, true);nbestCost = getInt(args, NBEST_COST, 0);nbestExamples = args.remove(NBEST_EXAMPLES);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Long longValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Long.valueOf(responseMap.get(key));}",
    "output": "public long? LongValue(string key){if (null != DictionaryUtil.Get(ResponseDictionary, key)){return long.Parse(DictionaryUtil.Get(ResponseDictionary, key));}return null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public long? LongValue(string key){if (null != DictionaryUtil.Get(ResponseDictionary, key)){return long.Parse(DictionaryUtil.Get(ResponseDictionary, key));}return null;}",
    "output": "public Long longValue(String key) {String value = responseMap.get(key);if (null == value || 0 == value.length()) {return null;}return Long.valueOf(responseMap.get(key));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetLibraryRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetLibrary\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public GetLibraryRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetLibrary\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GetLibraryRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetLibrary\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public GetLibraryRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetLibrary\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public short getFontOfFormattingRun(int index) {FormatRun r = _string.getFormatRun(index);return r.getFontIndex();}",
    "output": "public short GetFontOfFormattingRun(int index){UnicodeString.FormatRun r = _string.GetFormatRun(index);return r.FontIndex;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public short GetFontOfFormattingRun(int index){UnicodeString.FormatRun r = _string.GetFormatRun(index);return r.FontIndex;}",
    "output": "public short getFontOfFormattingRun(int index) {FormatRun r = _string.getFormatRun(index);return r.getFontIndex();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_shapeIdMax     =  LittleEndian.getInt( data, pos + size );size+=4;size+=4;field_3_numShapesSaved =  LittleEndian.getInt( data, pos + size );size+=4;field_4_drawingsSaved  =  LittleEndian.getInt( data, pos + size );size+=4;field_5_fileIdClusters.clear();int numIdClusters = (bytesRemaining-size) / 8;for (int i = 0; i < numIdClusters; i++) {int drawingGroupId = LittleEndian.getInt( data, pos + size );int numShapeIdsUsed = LittleEndian.getInt( data, pos + size + 4 );FileIdCluster fic = new FileIdCluster(drawingGroupId, numShapeIdsUsed);field_5_fileIdClusters.add(fic);maxDgId = Math.max(maxDgId, drawingGroupId);size += 8;}bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException(\"Expecting no remaining data but got \" + bytesRemaining + \" byte(s).\");}return 8 + size;}",
    "output": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;int size = 0;field_1_shapeIdMax = LittleEndian.GetInt(data, pos + size); size += 4;int field_2_numIdClusters = LittleEndian.GetInt(data, pos + size); size += 4;field_3_numShapesSaved = LittleEndian.GetInt(data, pos + size); size += 4;field_4_drawingsSaved = LittleEndian.GetInt(data, pos + size); size += 4;field_5_fileIdClusters = new FileIdCluster[(bytesRemaining - size) / 8];  for (int i = 0; i < field_5_fileIdClusters.Length; i++){field_5_fileIdClusters[i] = new FileIdCluster(LittleEndian.GetInt(data, pos + size), LittleEndian.GetInt(data, pos + size + 4));maxDgId = Math.Max(maxDgId, field_5_fileIdClusters[i].DrawingGroupId);size += 8;}bytesRemaining -= size;if (bytesRemaining != 0)throw new RecordFormatException(\"Expecting no remaining data but got \" + bytesRemaining + \" byte(s).\");return 8 + size + bytesRemaining;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory){int bytesRemaining = ReadHeader(data, offset);int pos = offset + 8;int size = 0;field_1_shapeIdMax = LittleEndian.GetInt(data, pos + size); size += 4;int field_2_numIdClusters = LittleEndian.GetInt(data, pos + size); size += 4;field_3_numShapesSaved = LittleEndian.GetInt(data, pos + size); size += 4;field_4_drawingsSaved = LittleEndian.GetInt(data, pos + size); size += 4;field_5_fileIdClusters = new FileIdCluster[(bytesRemaining - size) / 8];  for (int i = 0; i < field_5_fileIdClusters.Length; i++){field_5_fileIdClusters[i] = new FileIdCluster(LittleEndian.GetInt(data, pos + size), LittleEndian.GetInt(data, pos + size + 4));maxDgId = Math.Max(maxDgId, field_5_fileIdClusters[i].DrawingGroupId);size += 8;}bytesRemaining -= size;if (bytesRemaining != 0)throw new RecordFormatException(\"Expecting no remaining data but got \" + bytesRemaining + \" byte(s).\");return 8 + size + bytesRemaining;}",
    "output": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_shapeIdMax     =  LittleEndian.getInt( data, pos + size );size+=4;size+=4;field_3_numShapesSaved =  LittleEndian.getInt( data, pos + size );size+=4;field_4_drawingsSaved  =  LittleEndian.getInt( data, pos + size );size+=4;field_5_fileIdClusters.clear();int numIdClusters = (bytesRemaining-size) / 8;for (int i = 0; i < numIdClusters; i++) {int drawingGroupId = LittleEndian.getInt( data, pos + size );int numShapeIdsUsed = LittleEndian.getInt( data, pos + size + 4 );FileIdCluster fic = new FileIdCluster(drawingGroupId, numShapeIdsUsed);field_5_fileIdClusters.add(fic);maxDgId = Math.max(maxDgId, drawingGroupId);size += 8;}bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException(\"Expecting no remaining data but got \" + bytesRemaining + \" byte(s).\");}return 8 + size;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void encode(int[] values, int valuesOffset, byte[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = writeLong(block, blocks, blocksOffset);}}",
    "output": "public override void Encode(long[] values, int valuesOffset, byte[] blocks, int blocksOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = Encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = WriteInt64(block, blocks, blocksOffset);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Encode(long[] values, int valuesOffset, byte[] blocks, int blocksOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = Encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = WriteInt64(block, blocks, blocksOffset);}}",
    "output": "public void encode(int[] values, int valuesOffset, byte[] blocks,int blocksOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = encode(values, valuesOffset);valuesOffset += valueCount;blocksOffset = writeLong(block, blocks, blocksOffset);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetTerminologyResult getTerminology(GetTerminologyRequest request) {request = beforeClientExecution(request);return executeGetTerminology(request);}",
    "output": "public virtual GetTerminologyResponse GetTerminology(GetTerminologyRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTerminologyRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTerminologyResponseUnmarshaller.Instance;return Invoke<GetTerminologyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetTerminologyResponse GetTerminology(GetTerminologyRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetTerminologyRequestMarshaller.Instance;options.ResponseUnmarshaller = GetTerminologyResponseUnmarshaller.Instance;return Invoke<GetTerminologyResponse>(request, options);}",
    "output": "public GetTerminologyResult getTerminology(GetTerminologyRequest request) {request = beforeClientExecution(request);return executeGetTerminology(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(_character);out.writeShort(_fontIndex);}",
    "output": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(_character);out1.WriteShort(_fontIndex);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Serialize(ILittleEndianOutput out1){out1.WriteShort(_character);out1.WriteShort(_fontIndex);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(_character);out.writeShort(_fontIndex);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_options);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_options);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_options);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchFacesResult searchFaces(SearchFacesRequest request) {request = beforeClientExecution(request);return executeSearchFaces(request);}",
    "output": "public virtual SearchFacesResponse SearchFaces(SearchFacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchFacesRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchFacesResponseUnmarshaller.Instance;return Invoke<SearchFacesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SearchFacesResponse SearchFaces(SearchFacesRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchFacesRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchFacesResponseUnmarshaller.Instance;return Invoke<SearchFacesResponse>(request, options);}",
    "output": "public SearchFacesResult searchFaces(SearchFacesRequest request) {request = beforeClientExecution(request);return executeSearchFaces(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int getPositionIncrementGap(String fieldName) {return getWrappedAnalyzer(fieldName).getPositionIncrementGap(fieldName);}",
    "output": "public override int GetPositionIncrementGap(string fieldName){return GetWrappedAnalyzer(fieldName).GetPositionIncrementGap(fieldName);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int GetPositionIncrementGap(string fieldName){return GetWrappedAnalyzer(fieldName).GetPositionIncrementGap(fieldName);}",
    "output": "public int getPositionIncrementGap(String fieldName) {return getWrappedAnalyzer(fieldName).getPositionIncrementGap(fieldName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeSchemaResult describeSchema(DescribeSchemaRequest request) {request = beforeClientExecution(request);return executeDescribeSchema(request);}",
    "output": "public virtual DescribeSchemaResponse DescribeSchema(DescribeSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSchemaResponseUnmarshaller.Instance;return Invoke<DescribeSchemaResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeSchemaResponse DescribeSchema(DescribeSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeSchemaResponseUnmarshaller.Instance;return Invoke<DescribeSchemaResponse>(request, options);}",
    "output": "public DescribeSchemaResult describeSchema(DescribeSchemaRequest request) {request = beforeClientExecution(request);return executeDescribeSchema(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public int size() {return BoundedMap.this.size();}",
    "output": "public override int size(){return this._enclosing.size();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int size(){return this._enclosing.size();}",
    "output": "@Override public int size() {return BoundedMap.this.size();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MutableEntry cloneEntry() {final MutableEntry r = new MutableEntry();ensureId();r.idBuffer.fromObjectId(idBuffer);r.offset = offset;return r;}",
    "output": "public virtual PackIndex.MutableEntry CloneEntry(){PackIndex.MutableEntry r = new PackIndex.MutableEntry();EnsureId();r.idBuffer.FromObjectId(idBuffer);r.offset = offset;return r;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PackIndex.MutableEntry CloneEntry(){PackIndex.MutableEntry r = new PackIndex.MutableEntry();EnsureId();r.idBuffer.FromObjectId(idBuffer);r.offset = offset;return r;}",
    "output": "public MutableEntry cloneEntry() {final MutableEntry r = new MutableEntry();ensureId();r.idBuffer.fromObjectId(idBuffer);r.offset = offset;return r;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OperateEquipmentRequest() {super(\"industry-brain\", \"2018-07-12\", \"OperateEquipment\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}",
    "output": "public OperateEquipmentRequest(): base(\"industry-brain\", \"2018-07-12\", \"OperateEquipment\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public OperateEquipmentRequest(): base(\"industry-brain\", \"2018-07-12\", \"OperateEquipment\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}",
    "output": "public OperateEquipmentRequest() {super(\"industry-brain\", \"2018-07-12\", \"OperateEquipment\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean add(E e) {synchronized (mutex) {return delegate().add(e);}}",
    "output": "public virtual bool add(E @object){lock (mutex){return c.add(@object);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool add(E @object){lock (mutex){return c.add(@object);}}",
    "output": "public boolean add(E e) {synchronized (mutex) {return delegate().add(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals( Object o ){if ( this == o ) {return true;}if ( !( o instanceof EscherSimpleProperty ) ) {return false;}final EscherSimpleProperty escherSimpleProperty = (EscherSimpleProperty) o;if ( propertyValue != escherSimpleProperty.propertyValue ) {return false;}if ( getId() != escherSimpleProperty.getId() ) {return false;}return true;}",
    "output": "public override bool Equals(Object o){if (this == o) return true;if (!(o is EscherSimpleProperty)) return false;EscherSimpleProperty escherSimpleProperty = (EscherSimpleProperty)o;if (propertyValue != escherSimpleProperty.propertyValue) return false;if (Id != escherSimpleProperty.Id) return false;return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(Object o){if (this == o) return true;if (!(o is EscherSimpleProperty)) return false;EscherSimpleProperty escherSimpleProperty = (EscherSimpleProperty)o;if (propertyValue != escherSimpleProperty.propertyValue) return false;if (Id != escherSimpleProperty.Id) return false;return true;}",
    "output": "public boolean equals( Object o ){if ( this == o ) {return true;}if ( !( o instanceof EscherSimpleProperty ) ) {return false;}final EscherSimpleProperty escherSimpleProperty = (EscherSimpleProperty) o;if ( propertyValue != escherSimpleProperty.propertyValue ) {return false;}if ( getId() != escherSimpleProperty.getId() ) {return false;}return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final FloatBuffer asFloatBuffer() {return FloatToByteBufferAdapter.asFloatBuffer(this);}",
    "output": "public sealed override java.nio.FloatBuffer asFloatBuffer(){return java.nio.FloatToByteBufferAdapter.asFloatBuffer(this);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public sealed override java.nio.FloatBuffer asFloatBuffer(){return java.nio.FloatToByteBufferAdapter.asFloatBuffer(this);}",
    "output": "public final FloatBuffer asFloatBuffer() {return FloatToByteBufferAdapter.asFloatBuffer(this);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void removeThumbnail() {remove1stProperty(PropertyIDMap.PID_THUMBNAIL);}",
    "output": "public void RemoveThumbnail(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_THUMBNAIL);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void RemoveThumbnail(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_THUMBNAIL);}",
    "output": "public void removeThumbnail() {remove1stProperty(PropertyIDMap.PID_THUMBNAIL);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int compareIgnoreCase(String a, String b) {for (int i = 0; i < a.length() && i < b.length(); i++) {int d = toLowerCase(a.charAt(i)) - toLowerCase(b.charAt(i));if (d != 0)return d;}return a.length() - b.length();}",
    "output": "public static int CompareIgnoreCase(string a, string b){for (int i = 0; i < a.Length && i < b.Length; i++){int d = ToLowerCase(a[i]) - ToLowerCase(b[i]);if (d != 0){return d;}}return a.Length - b.Length;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int CompareIgnoreCase(string a, string b){for (int i = 0; i < a.Length && i < b.Length; i++){int d = ToLowerCase(a[i]) - ToLowerCase(b[i]);if (d != 0){return d;}}return a.Length - b.Length;}",
    "output": "public static int compareIgnoreCase(String a, String b) {for (int i = 0; i < a.length() && i < b.length(); i++) {int d = toLowerCase(a.charAt(i)) - toLowerCase(b.charAt(i));if (d != 0)return d;}return a.length() - b.length();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ViewDefinitionRecord(RecordInputStream in) {rwFirst = in.readUShort();rwLast = in.readUShort();colFirst = in.readUShort();colLast = in.readUShort();rwFirstHead = in.readUShort();rwFirstData = in.readUShort();colFirstData = in.readUShort();iCache = in.readUShort();reserved = in.readUShort();sxaxis4Data = in.readUShort();ipos4Data = in.readUShort();cDim = in.readUShort();cDimRw = in.readUShort();cDimCol = in.readUShort();cDimPg = in.readUShort();cDimData = in.readUShort();cRw = in.readUShort();cCol = in.readUShort();grbit = in.readUShort();itblAutoFmt = in.readUShort();int cchName = in.readUShort();int cchData = in.readUShort();name = StringUtil.readUnicodeString(in, cchName);dataField = StringUtil.readUnicodeString(in, cchData);}",
    "output": "public ViewDefinitionRecord(RecordInputStream in1){rwFirst = in1.ReadUShort();rwLast = in1.ReadUShort();colFirst = in1.ReadUShort();colLast = in1.ReadUShort();rwFirstHead = in1.ReadUShort();rwFirstData = in1.ReadUShort();colFirstData = in1.ReadUShort();iCache = in1.ReadUShort();reserved = in1.ReadUShort();sxaxis4Data = in1.ReadUShort();ipos4Data = in1.ReadUShort();cDim = in1.ReadUShort();cDimRw = in1.ReadUShort();cDimCol = in1.ReadUShort();cDimPg = in1.ReadUShort();cDimData = in1.ReadUShort();cRw = in1.ReadUShort();cCol = in1.ReadUShort();grbit = in1.ReadUShort();itblAutoFmt = in1.ReadUShort();int cchName = in1.ReadUShort();int cchData = in1.ReadUShort();name = StringUtil.ReadUnicodeString(in1, cchName);dataField = StringUtil.ReadUnicodeString(in1, cchData);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ViewDefinitionRecord(RecordInputStream in1){rwFirst = in1.ReadUShort();rwLast = in1.ReadUShort();colFirst = in1.ReadUShort();colLast = in1.ReadUShort();rwFirstHead = in1.ReadUShort();rwFirstData = in1.ReadUShort();colFirstData = in1.ReadUShort();iCache = in1.ReadUShort();reserved = in1.ReadUShort();sxaxis4Data = in1.ReadUShort();ipos4Data = in1.ReadUShort();cDim = in1.ReadUShort();cDimRw = in1.ReadUShort();cDimCol = in1.ReadUShort();cDimPg = in1.ReadUShort();cDimData = in1.ReadUShort();cRw = in1.ReadUShort();cCol = in1.ReadUShort();grbit = in1.ReadUShort();itblAutoFmt = in1.ReadUShort();int cchName = in1.ReadUShort();int cchData = in1.ReadUShort();name = StringUtil.ReadUnicodeString(in1, cchName);dataField = StringUtil.ReadUnicodeString(in1, cchData);}",
    "output": "public ViewDefinitionRecord(RecordInputStream in) {rwFirst = in.readUShort();rwLast = in.readUShort();colFirst = in.readUShort();colLast = in.readUShort();rwFirstHead = in.readUShort();rwFirstData = in.readUShort();colFirstData = in.readUShort();iCache = in.readUShort();reserved = in.readUShort();sxaxis4Data = in.readUShort();ipos4Data = in.readUShort();cDim = in.readUShort();cDimRw = in.readUShort();cDimCol = in.readUShort();cDimPg = in.readUShort();cDimData = in.readUShort();cRw = in.readUShort();cCol = in.readUShort();grbit = in.readUShort();itblAutoFmt = in.readUShort();int cchName = in.readUShort();int cchData = in.readUShort();name = StringUtil.readUnicodeString(in, cchName);dataField = StringUtil.readUnicodeString(in, cchData);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public FormatRecord(RecordInputStream in) {field_1_index_code = in.readShort();int field_3_unicode_len = in.readUShort();field_3_hasMultibyte = (in.readByte() & 0x01) != 0;if (field_3_hasMultibyte) {field_4_formatstring = readStringCommon(in, field_3_unicode_len, false);} else {field_4_formatstring = readStringCommon(in, field_3_unicode_len, true);}}",
    "output": "public FormatRecord(RecordInputStream in1){field_1_index_code = in1.ReadShort();int field_3_unicode_len = in1.ReadShort();field_3_hasMultibyte = (in1.ReadByte() & (byte)0x01) != 0;if (field_3_hasMultibyte){field_4_formatstring = in1.ReadUnicodeLEString(field_3_unicode_len);}else{field_4_formatstring = in1.ReadCompressedUnicode(field_3_unicode_len);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public FormatRecord(RecordInputStream in1){field_1_index_code = in1.ReadShort();int field_3_unicode_len = in1.ReadShort();field_3_hasMultibyte = (in1.ReadByte() & (byte)0x01) != 0;if (field_3_hasMultibyte){field_4_formatstring = in1.ReadUnicodeLEString(field_3_unicode_len);}else{field_4_formatstring = in1.ReadCompressedUnicode(field_3_unicode_len);}}",
    "output": "public FormatRecord(RecordInputStream in) {field_1_index_code = in.readShort();int field_3_unicode_len = in.readUShort();field_3_hasMultibyte = (in.readByte() & 0x01) != 0;if (field_3_hasMultibyte) {field_4_formatstring = readStringCommon(in, field_3_unicode_len, false);} else {field_4_formatstring = readStringCommon(in, field_3_unicode_len, true);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeBrokerResult describeBroker(DescribeBrokerRequest request) {request = beforeClientExecution(request);return executeDescribeBroker(request);}",
    "output": "public virtual DescribeBrokerResponse DescribeBroker(DescribeBrokerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeBrokerRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeBrokerResponseUnmarshaller.Instance;return Invoke<DescribeBrokerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeBrokerResponse DescribeBroker(DescribeBrokerRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeBrokerRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeBrokerResponseUnmarshaller.Instance;return Invoke<DescribeBrokerResponse>(request, options);}",
    "output": "public DescribeBrokerResult describeBroker(DescribeBrokerRequest request) {request = beforeClientExecution(request);return executeDescribeBroker(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void reset() {if ( getInputStream()!=null ) getInputStream().seek(0);_errHandler.reset(this);_ctx = null;_syntaxErrors = 0;matchedEOF = false;setTrace(false);_precedenceStack.clear();_precedenceStack.push(0);ATNSimulator interpreter = getInterpreter();if (interpreter != null) {interpreter.reset();}}",
    "output": "public virtual void Reset(){if (((ITokenStream)InputStream) != null){((ITokenStream)InputStream).Seek(0);}_errHandler.Reset(this);_ctx = null;_syntaxErrors = 0;_precedenceStack.Clear();_precedenceStack.Add(0);ATNSimulator interpreter = Interpreter;if (interpreter != null){interpreter.Reset();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Reset(){if (((ITokenStream)InputStream) != null){((ITokenStream)InputStream).Seek(0);}_errHandler.Reset(this);_ctx = null;_syntaxErrors = 0;_precedenceStack.Clear();_precedenceStack.Add(0);ATNSimulator interpreter = Interpreter;if (interpreter != null){interpreter.Reset();}}",
    "output": "public void reset() {if ( getInputStream()!=null ) getInputStream().seek(0);_errHandler.reset(this);_ctx = null;_syntaxErrors = 0;matchedEOF = false;setTrace(false);_precedenceStack.clear();_precedenceStack.push(0);ATNSimulator interpreter = getInterpreter();if (interpreter != null) {interpreter.reset();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean remove(Object o) {final RevFlag flag = (RevFlag) o;if ((mask & flag.mask) == 0)return false;mask &= ~flag.mask;for (int i = 0; i < active.size(); i++)if (active.get(i).mask == flag.mask)active.remove(i);return true;}",
    "output": "public override bool Remove(object o){RevFlag flag = (RevFlag)o;if ((mask & flag.mask) == 0){return false;}mask &= ~flag.mask;for (int i = 0; i < active.Count; i++){if (active[i].mask == flag.mask){active.Remove(i);}}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Remove(object o){RevFlag flag = (RevFlag)o;if ((mask & flag.mask) == 0){return false;}mask &= ~flag.mask;for (int i = 0; i < active.Count; i++){if (active[i].mask == flag.mask){active.Remove(i);}}return true;}",
    "output": "public boolean remove(Object o) {final RevFlag flag = (RevFlag) o;if ((mask & flag.mask) == 0)return false;mask &= ~flag.mask;for (int i = 0; i < active.size(); i++)if (active.get(i).mask == flag.mask)active.remove(i);return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String format(Passage passages[], String content) {StringBuilder sb = new StringBuilder();int pos = 0;for (Passage passage : passages) {if (passage.getStartOffset() > pos && pos > 0) {sb.append(ellipsis);}pos = passage.getStartOffset();for (int i = 0; i < passage.getNumMatches(); i++) {int start = passage.getMatchStarts()[i];assert start >= pos && start < passage.getEndOffset();append(sb, content, pos, start);int end = passage.getMatchEnds()[i];assert end > start;while (i + 1 < passage.getNumMatches() && passage.getMatchStarts()[i+1] < end) {end = passage.getMatchEnds()[++i];}end = Math.min(end, passage.getEndOffset()); sb.append(preTag);append(sb, content, start, end);sb.append(postTag);pos = end;}append(sb, content, pos, Math.max(pos, passage.getEndOffset()));pos = passage.getEndOffset();}return sb.toString();}",
    "output": "public override object Format(Passage[] passages, string content){StringBuilder sb = new StringBuilder();int pos = 0;foreach (Passage passage in passages){if (passage.startOffset > pos && pos > 0){sb.Append(m_ellipsis);}pos = passage.startOffset;for (int i = 0; i < passage.numMatches; i++){int start = passage.matchStarts[i];int end = passage.matchEnds[i];if (start > pos){Append(sb, content, pos, start);}if (end > pos){sb.Append(m_preTag);Append(sb, content, Math.Max(pos, start), end);sb.Append(m_postTag);pos = end;}}Append(sb, content, pos, Math.Max(pos, passage.endOffset));pos = passage.endOffset;}return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override object Format(Passage[] passages, string content){StringBuilder sb = new StringBuilder();int pos = 0;foreach (Passage passage in passages){if (passage.startOffset > pos && pos > 0){sb.Append(m_ellipsis);}pos = passage.startOffset;for (int i = 0; i < passage.numMatches; i++){int start = passage.matchStarts[i];int end = passage.matchEnds[i];if (start > pos){Append(sb, content, pos, start);}if (end > pos){sb.Append(m_preTag);Append(sb, content, Math.Max(pos, start), end);sb.Append(m_postTag);pos = end;}}Append(sb, content, pos, Math.Max(pos, passage.endOffset));pos = passage.endOffset;}return sb.ToString();}",
    "output": "public String format(Passage passages[], String content) {StringBuilder sb = new StringBuilder();int pos = 0;for (Passage passage : passages) {if (passage.getStartOffset() > pos && pos > 0) {sb.append(ellipsis);}pos = passage.getStartOffset();for (int i = 0; i < passage.getNumMatches(); i++) {int start = passage.getMatchStarts()[i];assert start >= pos && start < passage.getEndOffset();append(sb, content, pos, start);int end = passage.getMatchEnds()[i];assert end > start;while (i + 1 < passage.getNumMatches() && passage.getMatchStarts()[i+1] < end) {end = passage.getMatchEnds()[++i];}end = Math.min(end, passage.getEndOffset()); sb.append(preTag);append(sb, content, start, end);sb.append(postTag);pos = end;}append(sb, content, pos, Math.max(pos, passage.getEndOffset()));pos = passage.getEndOffset();}return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DrillSidewaysResult(Facets facets, TopDocs hits) {this.facets = facets;this.hits = hits;}",
    "output": "public DrillSidewaysResult(Facets facets, TopDocs hits){this.Facets = facets;this.Hits = hits;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DrillSidewaysResult(Facets facets, TopDocs hits){this.Facets = facets;this.Hits = hits;}",
    "output": "public DrillSidewaysResult(Facets facets, TopDocs hits) {this.facets = facets;this.hits = hits;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTrafficPolicyInstancesByPolicyResult listTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyInstancesByPolicy(request);}",
    "output": "public virtual ListTrafficPolicyInstancesByPolicyResponse ListTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrafficPolicyInstancesByPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrafficPolicyInstancesByPolicyResponseUnmarshaller.Instance;return Invoke<ListTrafficPolicyInstancesByPolicyResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTrafficPolicyInstancesByPolicyResponse ListTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTrafficPolicyInstancesByPolicyRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTrafficPolicyInstancesByPolicyResponseUnmarshaller.Instance;return Invoke<ListTrafficPolicyInstancesByPolicyResponse>(request, options);}",
    "output": "public ListTrafficPolicyInstancesByPolicyResult listTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request) {request = beforeClientExecution(request);return executeListTrafficPolicyInstancesByPolicy(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ComplexPhraseQuery(String field, String phrasedQueryStringContents,int slopFactor, boolean inOrder) {this.field = Objects.requireNonNull(field);this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);this.slopFactor = slopFactor;this.inOrder = inOrder;}",
    "output": "public ComplexPhraseQuery(string field, string phrasedQueryStringContents,int slopFactor, bool inOrder){this.field = field;this.phrasedQueryStringContents = phrasedQueryStringContents;this.slopFactor = slopFactor;this.inOrder = inOrder;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ComplexPhraseQuery(string field, string phrasedQueryStringContents,int slopFactor, bool inOrder){this.field = field;this.phrasedQueryStringContents = phrasedQueryStringContents;this.slopFactor = slopFactor;this.inOrder = inOrder;}",
    "output": "public ComplexPhraseQuery(String field, String phrasedQueryStringContents,int slopFactor, boolean inOrder) {this.field = Objects.requireNonNull(field);this.phrasedQueryStringContents = Objects.requireNonNull(phrasedQueryStringContents);this.slopFactor = slopFactor;this.inOrder = inOrder;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!term.field().equals(field)) {buffer.append(term.field());buffer.append(\":\");}buffer.append(getClass().getSimpleName());buffer.append(\" {\");buffer.append('\\n');buffer.append(automaton.toString());buffer.append(\"}\");return buffer.toString();}",
    "output": "public override string ToString(string field){StringBuilder buffer = new StringBuilder();if (!m_term.Field.Equals(field, StringComparison.Ordinal)){buffer.Append(m_term.Field);buffer.Append(\":\");}buffer.Append(this.GetType().Name);buffer.Append(\" {\");buffer.Append('\\n');buffer.Append(m_automaton.ToString());buffer.Append(\"}\");buffer.Append(ToStringUtils.Boost(Boost));return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(string field){StringBuilder buffer = new StringBuilder();if (!m_term.Field.Equals(field, StringComparison.Ordinal)){buffer.Append(m_term.Field);buffer.Append(\":\");}buffer.Append(this.GetType().Name);buffer.Append(\" {\");buffer.Append('\\n');buffer.Append(m_automaton.ToString());buffer.Append(\"}\");buffer.Append(ToStringUtils.Boost(Boost));return buffer.ToString();}",
    "output": "public String toString(String field) {StringBuilder buffer = new StringBuilder();if (!term.field().equals(field)) {buffer.append(term.field());buffer.append(\":\");}buffer.append(getClass().getSimpleName());buffer.append(\" {\");buffer.append('\\n');buffer.append(automaton.toString());buffer.append(\"}\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final String toFormulaString() {return getName();}",
    "output": "public override String ToFormulaString(){return Name;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){return Name;}",
    "output": "public final String toFormulaString() {return getName();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AreaRecord clone() {return copy();}",
    "output": "public override Object Clone(){AreaRecord rec = new AreaRecord();rec.field_1_formatFlags = field_1_formatFlags;return rec;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override Object Clone(){AreaRecord rec = new AreaRecord();rec.field_1_formatFlags = field_1_formatFlags;return rec;}",
    "output": "public AreaRecord clone() {return copy();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null ? fst.ramBytesUsed() : 0)+ RamUsageEstimator.sizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}",
    "output": "public override long RamBytesUsed(){return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms != null) ? simpleTextTerms.RamBytesUsed() : 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long RamBytesUsed(){return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms != null) ? simpleTextTerms.RamBytesUsed() : 0);}",
    "output": "public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null ? fst.ramBytesUsed() : 0)+ RamUsageEstimator.sizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteConfigurationTemplateRequest(String applicationName, String templateName) {setApplicationName(applicationName);setTemplateName(templateName);}",
    "output": "public DeleteConfigurationTemplateRequest(string applicationName, string templateName){_applicationName = applicationName;_templateName = templateName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteConfigurationTemplateRequest(string applicationName, string templateName){_applicationName = applicationName;_templateName = templateName;}",
    "output": "public DeleteConfigurationTemplateRequest(String applicationName, String templateName) {setApplicationName(applicationName);setTemplateName(templateName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<Token> getTokens(int start, int stop, int ttype) {HashSet<Integer> s = new HashSet<Integer>(ttype);s.add(ttype);return getTokens(start,stop, s);}",
    "output": "public virtual IList<IToken> GetTokens(int start, int stop, int ttype){BitSet s = new BitSet(ttype);s.Set(ttype);return GetTokens(start, stop, s);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual IList<IToken> GetTokens(int start, int stop, int ttype){BitSet s = new BitSet(ttype);s.Set(ttype);return GetTokens(start, stop, s);}",
    "output": "public List<Token> getTokens(int start, int stop, int ttype) {HashSet<Integer> s = new HashSet<Integer>(ttype);s.add(ttype);return getTokens(start,stop, s);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeIamInstanceProfileAssociationsResult describeIamInstanceProfileAssociations(DescribeIamInstanceProfileAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeIamInstanceProfileAssociations(request);}",
    "output": "public virtual DescribeIamInstanceProfileAssociationsResponse DescribeIamInstanceProfileAssociations(DescribeIamInstanceProfileAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeIamInstanceProfileAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeIamInstanceProfileAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeIamInstanceProfileAssociationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeIamInstanceProfileAssociationsResponse DescribeIamInstanceProfileAssociations(DescribeIamInstanceProfileAssociationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeIamInstanceProfileAssociationsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeIamInstanceProfileAssociationsResponseUnmarshaller.Instance;return Invoke<DescribeIamInstanceProfileAssociationsResponse>(request, options);}",
    "output": "public DescribeIamInstanceProfileAssociationsResult describeIamInstanceProfileAssociations(DescribeIamInstanceProfileAssociationsRequest request) {request = beforeClientExecution(request);return executeDescribeIamInstanceProfileAssociations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval textArg) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(textArg, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String text = OperandResolver.coerceValueToString(veText1);if (text.length() == 0) {return ErrorEval.VALUE_INVALID;}int code = text.charAt(0);return new StringEval(String.valueOf(code));}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval textArg){ValueEval veText1;try{veText1 = OperandResolver.GetSingleValue(textArg, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}String text = OperandResolver.CoerceValueToString(veText1);if (text.Length == 0){return ErrorEval.VALUE_INVALID;}int code = (int)text[0];return new StringEval(code.ToString());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval textArg){ValueEval veText1;try{veText1 = OperandResolver.GetSingleValue(textArg, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}String text = OperandResolver.CoerceValueToString(veText1);if (text.Length == 0){return ErrorEval.VALUE_INVALID;}int code = (int)text[0];return new StringEval(code.ToString());}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval textArg) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(textArg, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String text = OperandResolver.coerceValueToString(veText1);if (text.length() == 0) {return ErrorEval.VALUE_INVALID;}int code = text.charAt(0);return new StringEval(String.valueOf(code));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AttachVpnGatewayResult attachVpnGateway(AttachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeAttachVpnGateway(request);}",
    "output": "public virtual AttachVpnGatewayResponse AttachVpnGateway(AttachVpnGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachVpnGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachVpnGatewayResponseUnmarshaller.Instance;return Invoke<AttachVpnGatewayResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AttachVpnGatewayResponse AttachVpnGateway(AttachVpnGatewayRequest request){var options = new InvokeOptions();options.RequestMarshaller = AttachVpnGatewayRequestMarshaller.Instance;options.ResponseUnmarshaller = AttachVpnGatewayResponseUnmarshaller.Instance;return Invoke<AttachVpnGatewayResponse>(request, options);}",
    "output": "public AttachVpnGatewayResult attachVpnGateway(AttachVpnGatewayRequest request) {request = beforeClientExecution(request);return executeAttachVpnGateway(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int compareTo(FloatBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;float thisFloat, otherFloat;while (compareRemaining > 0) {thisFloat = get(thisPos);otherFloat = otherBuffer.get(otherPos);if ((thisFloat != otherFloat)&& ((thisFloat == thisFloat) || (otherFloat == otherFloat))) {return thisFloat < otherFloat ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}",
    "output": "public virtual int compareTo(java.nio.FloatBuffer otherBuffer){int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();int thisPos = _position;int otherPos = otherBuffer._position;float thisFloat;float otherFloat;while (compareRemaining > 0){thisFloat = get(thisPos);otherFloat = otherBuffer.get(otherPos);if ((thisFloat != otherFloat) && ((thisFloat == thisFloat) || (otherFloat == otherFloat))){return thisFloat < otherFloat ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int compareTo(java.nio.FloatBuffer otherBuffer){int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();int thisPos = _position;int otherPos = otherBuffer._position;float thisFloat;float otherFloat;while (compareRemaining > 0){thisFloat = get(thisPos);otherFloat = otherBuffer.get(otherPos);if ((thisFloat != otherFloat) && ((thisFloat == thisFloat) || (otherFloat == otherFloat))){return thisFloat < otherFloat ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}",
    "output": "public int compareTo(FloatBuffer otherBuffer) {int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining(): otherBuffer.remaining();int thisPos = position;int otherPos = otherBuffer.position;float thisFloat, otherFloat;while (compareRemaining > 0) {thisFloat = get(thisPos);otherFloat = otherBuffer.get(otherPos);if ((thisFloat != otherFloat)&& ((thisFloat == thisFloat) || (otherFloat == otherFloat))) {return thisFloat < otherFloat ? -1 : 1;}thisPos++;otherPos++;compareRemaining--;}return remaining() - otherBuffer.remaining();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Matcher useTransparentBounds(boolean value) {transparentBounds = value;useTransparentBoundsImpl(address, value);return this;}",
    "output": "public java.util.regex.Matcher useTransparentBounds(bool value){transparentBounds = value;useTransparentBoundsImpl(address, value);return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.util.regex.Matcher useTransparentBounds(bool value){transparentBounds = value;useTransparentBoundsImpl(address, value);return this;}",
    "output": "public Matcher useTransparentBounds(boolean value) {transparentBounds = value;useTransparentBoundsImpl(address, value);return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void remove() {if (lastEntryReturned == null)throw new IllegalStateException();if (modCount != expectedModCount)throw new ConcurrentModificationException();Hashtable.this.remove(lastEntryReturned.key);lastEntryReturned = null;expectedModCount = modCount;}",
    "output": "public virtual void remove(){if (this.lastEntryReturned == null){throw new System.InvalidOperationException();}if (this._enclosing.modCount != this.expectedModCount){throw new java.util.ConcurrentModificationException();}this._enclosing.remove(this.lastEntryReturned.key);this.lastEntryReturned = null;this.expectedModCount = this._enclosing.modCount;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void remove(){if (this.lastEntryReturned == null){throw new System.InvalidOperationException();}if (this._enclosing.modCount != this.expectedModCount){throw new java.util.ConcurrentModificationException();}this._enclosing.remove(this.lastEntryReturned.key);this.lastEntryReturned = null;this.expectedModCount = this._enclosing.modCount;}",
    "output": "public void remove() {if (lastEntryReturned == null)throw new IllegalStateException();if (modCount != expectedModCount)throw new ConcurrentModificationException();Hashtable.this.remove(lastEntryReturned.key);lastEntryReturned = null;expectedModCount = modCount;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString() {StringBuilder sb = new StringBuilder(64);if (externalWorkbookNumber >= 0) {sb.append('[');sb.append(externalWorkbookNumber);sb.append(']');}if (sheetName != null) {SheetNameFormatter.appendFormat(sb, sheetName);}sb.append('!');sb.append(FormulaError.REF.getString());return sb.toString();}",
    "output": "public override String ToFormulaString(){StringBuilder sb = new StringBuilder();if (externalWorkbookNumber >= 0){sb.Append('[');sb.Append(externalWorkbookNumber);sb.Append(']');}if (sheetName != null){sb.Append(sheetName);}sb.Append('!');sb.Append(ErrorConstants.GetText(ErrorConstants.ERROR_REF));return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){StringBuilder sb = new StringBuilder();if (externalWorkbookNumber >= 0){sb.Append('[');sb.Append(externalWorkbookNumber);sb.Append(']');}if (sheetName != null){sb.Append(sheetName);}sb.Append('!');sb.Append(ErrorConstants.GetText(ErrorConstants.ERROR_REF));return sb.ToString();}",
    "output": "public String toFormulaString() {StringBuilder sb = new StringBuilder(64);if (externalWorkbookNumber >= 0) {sb.append('[');sb.append(externalWorkbookNumber);sb.append(']');}if (sheetName != null) {SheetNameFormatter.appendFormat(sb, sheetName);}sb.append('!');sb.append(FormulaError.REF.getString());return sb.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return slice.toString()+\":\"+ postingsEnum;}",
    "output": "public override string ToString(){return \"MultiDocsEnum(\" + Arrays.ToString(Subs) + \")\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"MultiDocsEnum(\" + Arrays.ToString(Subs) + \")\";}",
    "output": "public String toString() {return slice.toString()+\":\"+ postingsEnum;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateVpnConnectionRouteResult createVpnConnectionRoute(CreateVpnConnectionRouteRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnectionRoute(request);}",
    "output": "public virtual CreateVpnConnectionRouteResponse CreateVpnConnectionRoute(CreateVpnConnectionRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpnConnectionRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpnConnectionRouteResponseUnmarshaller.Instance;return Invoke<CreateVpnConnectionRouteResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateVpnConnectionRouteResponse CreateVpnConnectionRoute(CreateVpnConnectionRouteRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateVpnConnectionRouteRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateVpnConnectionRouteResponseUnmarshaller.Instance;return Invoke<CreateVpnConnectionRouteResponse>(request, options);}",
    "output": "public CreateVpnConnectionRouteResult createVpnConnectionRoute(CreateVpnConnectionRouteRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnectionRoute(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean hasNext() {return next != null;}",
    "output": "public virtual bool hasNext(){return this._next != null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool hasNext(){return this._next != null;}",
    "output": "public boolean hasNext() {return next != null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteDBSecurityGroupRequest(String dBSecurityGroupName) {setDBSecurityGroupName(dBSecurityGroupName);}",
    "output": "public DeleteDBSecurityGroupRequest(string dbSecurityGroupName){_dbSecurityGroupName = dbSecurityGroupName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DeleteDBSecurityGroupRequest(string dbSecurityGroupName){_dbSecurityGroupName = dbSecurityGroupName;}",
    "output": "public DeleteDBSecurityGroupRequest(String dBSecurityGroupName) {setDBSecurityGroupName(dBSecurityGroupName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int compare(Property o1, Property o2){String VBA_PROJECT = \"_VBA_PROJECT\";String name1  = o1.getName();String name2  = o2.getName();int  result = name1.length() - name2.length();if (result == 0){if (name1.compareTo(VBA_PROJECT) == 0)result = 1;else if (name2.compareTo(VBA_PROJECT) == 0)result = -1;else{if (name1.startsWith(\"__\") && name2.startsWith(\"__\")){result = name1.compareToIgnoreCase(name2);}else if (name1.startsWith(\"__\")){result = 1;}else if (name2.startsWith(\"__\")){result = -1;}elseresult = name1.compareToIgnoreCase(name2);}}return result;}",
    "output": "public int Compare(Property o1, Property o2){String VBA_PROJECT = \"_VBA_PROJECT\";String name1 = ((Property)o1).Name;String name2 = ((Property)o2).Name;int num = name1.Length - name2.Length;if (num == 0){if (name1.Equals(VBA_PROJECT, StringComparison.CurrentCulture)){num = 1;}else if (name2.Equals(VBA_PROJECT, StringComparison.CurrentCulture)){num = -1;}else{if (name1.StartsWith(\"__\", StringComparison.Ordinal) && name2.StartsWith(\"__\", StringComparison.Ordinal)){num = String.Compare(name1, name2, StringComparison.OrdinalIgnoreCase);}else if (name1.StartsWith(\"__\", StringComparison.Ordinal)){num = 1;}else if (name2.StartsWith(\"__\", StringComparison.Ordinal)){num = -1;}else{num = String.Compare(name1, name2, StringComparison.OrdinalIgnoreCase);}}}return num;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int Compare(Property o1, Property o2){String VBA_PROJECT = \"_VBA_PROJECT\";String name1 = ((Property)o1).Name;String name2 = ((Property)o2).Name;int num = name1.Length - name2.Length;if (num == 0){if (name1.Equals(VBA_PROJECT, StringComparison.CurrentCulture)){num = 1;}else if (name2.Equals(VBA_PROJECT, StringComparison.CurrentCulture)){num = -1;}else{if (name1.StartsWith(\"__\", StringComparison.Ordinal) && name2.StartsWith(\"__\", StringComparison.Ordinal)){num = String.Compare(name1, name2, StringComparison.OrdinalIgnoreCase);}else if (name1.StartsWith(\"__\", StringComparison.Ordinal)){num = 1;}else if (name2.StartsWith(\"__\", StringComparison.Ordinal)){num = -1;}else{num = String.Compare(name1, name2, StringComparison.OrdinalIgnoreCase);}}}return num;}",
    "output": "public int compare(Property o1, Property o2){String VBA_PROJECT = \"_VBA_PROJECT\";String name1  = o1.getName();String name2  = o2.getName();int  result = name1.length() - name2.length();if (result == 0){if (name1.compareTo(VBA_PROJECT) == 0)result = 1;else if (name2.compareTo(VBA_PROJECT) == 0)result = -1;else{if (name1.startsWith(\"__\") && name2.startsWith(\"__\")){result = name1.compareToIgnoreCase(name2);}else if (name1.startsWith(\"__\")){result = 1;}else if (name2.startsWith(\"__\")){result = -1;}elseresult = name1.compareToIgnoreCase(name2);}}return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DoubleBuffer get(double[] dst, int dstOffset, int doubleCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, doubleCount);if (doubleCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + doubleCount; ++i) {dst[i] = get();}return this;}",
    "output": "public virtual java.nio.DoubleBuffer get(double[] dst, int dstOffset, int doubleCount){java.util.Arrays.checkOffsetAndCount(dst.Length, dstOffset, doubleCount);if (doubleCount > remaining()){throw new java.nio.BufferUnderflowException();}{for (int i = dstOffset; i < dstOffset + doubleCount; ++i){dst[i] = get();}}return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.nio.DoubleBuffer get(double[] dst, int dstOffset, int doubleCount){java.util.Arrays.checkOffsetAndCount(dst.Length, dstOffset, doubleCount);if (doubleCount > remaining()){throw new java.nio.BufferUnderflowException();}{for (int i = dstOffset; i < dstOffset + doubleCount; ++i){dst[i] = get();}}return this;}",
    "output": "public DoubleBuffer get(double[] dst, int dstOffset, int doubleCount) {Arrays.checkOffsetAndCount(dst.length, dstOffset, doubleCount);if (doubleCount > remaining()) {throw new BufferUnderflowException();}for (int i = dstOffset; i < dstOffset + doubleCount; ++i) {dst[i] = get();}return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharsRef add(CharsRef prefix, CharsRef output) {assert prefix != null;assert output != null;if (prefix == NO_OUTPUT) {return output;} else if (output == NO_OUTPUT) {return prefix;} else {assert prefix.length > 0;assert output.length > 0;CharsRef result = new CharsRef(prefix.length + output.length);System.arraycopy(prefix.chars, prefix.offset, result.chars, 0, prefix.length);System.arraycopy(output.chars, output.offset, result.chars, prefix.length, output.length);result.length = prefix.length + output.length;return result;}}",
    "output": "public override CharsRef Add(CharsRef prefix, CharsRef output){Debug.Assert(prefix != null);Debug.Assert(output != null);if (prefix == NO_OUTPUT){return output;}else if (output == NO_OUTPUT){return prefix;}else{Debug.Assert(prefix.Length > 0);Debug.Assert(output.Length > 0);var result = new CharsRef(prefix.Length + output.Length);Array.Copy(prefix.Chars, prefix.Offset, result.Chars, 0, prefix.Length);Array.Copy(output.Chars, output.Offset, result.Chars, prefix.Length, output.Length);result.Length = prefix.Length + output.Length;return result;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override CharsRef Add(CharsRef prefix, CharsRef output){Debug.Assert(prefix != null);Debug.Assert(output != null);if (prefix == NO_OUTPUT){return output;}else if (output == NO_OUTPUT){return prefix;}else{Debug.Assert(prefix.Length > 0);Debug.Assert(output.Length > 0);var result = new CharsRef(prefix.Length + output.Length);Array.Copy(prefix.Chars, prefix.Offset, result.Chars, 0, prefix.Length);Array.Copy(output.Chars, output.Offset, result.Chars, prefix.Length, output.Length);result.Length = prefix.Length + output.Length;return result;}}",
    "output": "public CharsRef add(CharsRef prefix, CharsRef output) {assert prefix != null;assert output != null;if (prefix == NO_OUTPUT) {return output;} else if (output == NO_OUTPUT) {return prefix;} else {assert prefix.length > 0;assert output.length > 0;CharsRef result = new CharsRef(prefix.length + output.length);System.arraycopy(prefix.chars, prefix.offset, result.chars, 0, prefix.length);System.arraycopy(output.chars, output.offset, result.chars, prefix.length, output.length);result.length = prefix.length + output.length;return result;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateProfileResult updateProfile(UpdateProfileRequest request) {request = beforeClientExecution(request);return executeUpdateProfile(request);}",
    "output": "public virtual UpdateProfileResponse UpdateProfile(UpdateProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateProfileResponseUnmarshaller.Instance;return Invoke<UpdateProfileResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateProfileResponse UpdateProfile(UpdateProfileRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateProfileRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateProfileResponseUnmarshaller.Instance;return Invoke<UpdateProfileResponse>(request, options);}",
    "output": "public UpdateProfileResult updateProfile(UpdateProfileRequest request) {request = beforeClientExecution(request);return executeUpdateProfile(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public LikeThisQueryBuilder(Analyzer analyzer, String[] defaultFieldNames) {this.analyzer = analyzer;this.defaultFieldNames = defaultFieldNames;}",
    "output": "public LikeThisQueryBuilder(Analyzer analyzer, string[] defaultFieldNames){this.analyzer = analyzer;this.defaultFieldNames = defaultFieldNames;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public LikeThisQueryBuilder(Analyzer analyzer, string[] defaultFieldNames){this.analyzer = analyzer;this.defaultFieldNames = defaultFieldNames;}",
    "output": "public LikeThisQueryBuilder(Analyzer analyzer, String[] defaultFieldNames) {this.analyzer = analyzer;this.defaultFieldNames = defaultFieldNames;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringBuffer insert(int index, long l) {return insert(index, Long.toString(l));}",
    "output": "public java.lang.StringBuffer insert(int index, long l){return insert(index, System.Convert.ToString(l));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public java.lang.StringBuffer insert(int index, long l){return insert(index, System.Convert.ToString(l));}",
    "output": "public StringBuffer insert(int index, long l) {return insert(index, Long.toString(l));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Field(String name, BytesRef bytes, IndexableFieldType type) {if (name == null) {throw new IllegalArgumentException(\"name must not be null\");}if (bytes == null) {throw new IllegalArgumentException(\"bytes must not be null\");}if (type == null) {throw new IllegalArgumentException(\"type must not be null\");}this.name = name;this.fieldsData = bytes;this.type = type;}",
    "output": "public Field(string name, BytesRef bytes, FieldType type){if (name == null){throw new System.ArgumentNullException(\"name\", \"name cannot be null\");}if (type == null){throw new System.ArgumentNullException(\"type\", \"type cannot be null\");}if (type.IsIndexed){throw new System.ArgumentException(\"Fields with BytesRef values cannot be indexed\");}this.FieldsData = bytes;this.m_type = type;this.m_name = name;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Field(string name, BytesRef bytes, FieldType type){if (name == null){throw new System.ArgumentNullException(\"name\", \"name cannot be null\");}if (type == null){throw new System.ArgumentNullException(\"type\", \"type cannot be null\");}if (type.IsIndexed){throw new System.ArgumentException(\"Fields with BytesRef values cannot be indexed\");}this.FieldsData = bytes;this.m_type = type;this.m_name = name;}",
    "output": "public Field(String name, BytesRef bytes, IndexableFieldType type) {if (name == null) {throw new IllegalArgumentException(\"name must not be null\");}if (bytes == null) {throw new IllegalArgumentException(\"bytes must not be null\");}if (type == null) {throw new IllegalArgumentException(\"type must not be null\");}this.name = name;this.fieldsData = bytes;this.type = type;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void clear() {mSize = 0;}",
    "output": "public virtual void clear(){mSize = 0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void clear(){mSize = 0;}",
    "output": "public void clear() {mSize = 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SrndQuery parse2(String query) throws ParseException {ReInit(new FastCharStream(new StringReader(query)));try {return TopSrndQuery();} catch (TokenMgrError tme) {throw new ParseException(tme.getMessage());}}",
    "output": "public virtual SrndQuery Parse2(string query){ReInit(new FastCharStream(new StringReader(query)));try{return TopSrndQuery();}catch (TokenMgrError tme){throw new ParseException(tme.Message);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SrndQuery Parse2(string query){ReInit(new FastCharStream(new StringReader(query)));try{return TopSrndQuery();}catch (TokenMgrError tme){throw new ParseException(tme.Message);}}",
    "output": "public SrndQuery parse2(String query) throws ParseException {ReInit(new FastCharStream(new StringReader(query)));try {return TopSrndQuery();} catch (TokenMgrError tme) {throw new ParseException(tme.getMessage());}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public int size() {return (int) Math.min(this.size, Integer.MAX_VALUE);}",
    "output": "public override int size(){return this._enclosing._size;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override int size(){return this._enclosing._size;}",
    "output": "@Override public int size() {return (int) Math.min(this.size, Integer.MAX_VALUE);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeConfigurationResult describeConfiguration(DescribeConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeConfiguration(request);}",
    "output": "public virtual DescribeConfigurationResponse DescribeConfiguration(DescribeConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeConfigurationResponseUnmarshaller.Instance;return Invoke<DescribeConfigurationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeConfigurationResponse DescribeConfiguration(DescribeConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeConfigurationResponseUnmarshaller.Instance;return Invoke<DescribeConfigurationResponse>(request, options);}",
    "output": "public DescribeConfigurationResult describeConfiguration(DescribeConfigurationRequest request) {request = beforeClientExecution(request);return executeDescribeConfiguration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getCharErrorDisplay(int c) {String s = getErrorDisplay(c);return \"'\"+s+\"'\";}",
    "output": "public virtual string GetCharErrorDisplay(int c){string s = GetErrorDisplay(c);return \"'\" + s + \"'\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetCharErrorDisplay(int c){string s = GetErrorDisplay(c);return \"'\" + s + \"'\";}",
    "output": "public String getCharErrorDisplay(int c) {String s = getErrorDisplay(c);return \"'\"+s+\"'\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeHumanTaskUiResult describeHumanTaskUi(DescribeHumanTaskUiRequest request) {request = beforeClientExecution(request);return executeDescribeHumanTaskUi(request);}",
    "output": "public virtual DescribeHumanTaskUiResponse DescribeHumanTaskUi(DescribeHumanTaskUiRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeHumanTaskUiRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeHumanTaskUiResponseUnmarshaller.Instance;return Invoke<DescribeHumanTaskUiResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeHumanTaskUiResponse DescribeHumanTaskUi(DescribeHumanTaskUiRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeHumanTaskUiRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeHumanTaskUiResponseUnmarshaller.Instance;return Invoke<DescribeHumanTaskUiResponse>(request, options);}",
    "output": "public DescribeHumanTaskUiResult describeHumanTaskUi(DescribeHumanTaskUiRequest request) {request = beforeClientExecution(request);return executeDescribeHumanTaskUi(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void run() {try {int n = task.runAndMaybeStats(letChildReport);if (anyExhaustibleTasks) {updateExhausted(task);}count += n;} catch (NoMoreDataException e) {exhausted = true;} catch (Exception e) {throw new RuntimeException(e);}}",
    "output": "public override void Run(){try{int n = task.RunAndMaybeStats(outerInstance.letChildReport);if (outerInstance.anyExhaustibleTasks){outerInstance.UpdateExhausted(task);}count += n;}catch (NoMoreDataException){outerInstance.exhausted = true;}catch (Exception e){throw new Exception(e.ToString(), e);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Run(){try{int n = task.RunAndMaybeStats(outerInstance.letChildReport);if (outerInstance.anyExhaustibleTasks){outerInstance.UpdateExhausted(task);}count += n;}catch (NoMoreDataException){outerInstance.exhausted = true;}catch (Exception e){throw new Exception(e.ToString(), e);}}",
    "output": "public void run() {try {int n = task.runAndMaybeStats(letChildReport);if (anyExhaustibleTasks) {updateExhausted(task);}count += n;} catch (NoMoreDataException e) {exhausted = true;} catch (Exception e) {throw new RuntimeException(e);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeImagePermissionsResult describeImagePermissions(DescribeImagePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeImagePermissions(request);}",
    "output": "public virtual DescribeImagePermissionsResponse DescribeImagePermissions(DescribeImagePermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeImagePermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeImagePermissionsResponseUnmarshaller.Instance;return Invoke<DescribeImagePermissionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeImagePermissionsResponse DescribeImagePermissions(DescribeImagePermissionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeImagePermissionsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeImagePermissionsResponseUnmarshaller.Instance;return Invoke<DescribeImagePermissionsResponse>(request, options);}",
    "output": "public DescribeImagePermissionsResult describeImagePermissions(DescribeImagePermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeImagePermissions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SrndQuery clone() {try {return (SrndQuery)super.clone();} catch (CloneNotSupportedException cns) {throw new Error(cns);}}",
    "output": "public virtual object Clone(){object clone = null;try{clone = base.MemberwiseClone();}catch (Exception e){throw new InvalidOperationException(e.Message, e); }return clone;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual object Clone(){object clone = null;try{clone = base.MemberwiseClone();}catch (Exception e){throw new InvalidOperationException(e.Message, e); }return clone;}",
    "output": "public SrndQuery clone() {try {return (SrndQuery)super.clone();} catch (CloneNotSupportedException cns) {throw new Error(cns);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void recycleByteBlocks(byte[][] blocks, int start, int end) {final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);final int size = freeBlocks + numBlocks;if (size >= freeByteBlocks.length) {final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);freeByteBlocks = newBlocks;}final int stop = start + numBlocks;for (int i = start; i < stop; i++) {freeByteBlocks[freeBlocks++] = blocks[i];blocks[i] = null;}for (int i = stop; i < end; i++) {blocks[i] = null;}bytesUsed.addAndGet(-(end - stop) * blockSize);assert bytesUsed.get() >= 0;}",
    "output": "public override void RecycleByteBlocks(byte[][] blocks, int start, int end){int numBlocks = Math.Min(maxBufferedBlocks - freeBlocks, end - start);int size = freeBlocks + numBlocks;if (size >= freeByteBlocks.Length){var newBlocks = new byte[ArrayUtil.Oversize(size, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];Array.Copy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);freeByteBlocks = newBlocks;}int stop = start + numBlocks;for (int i = start; i < stop; i++){freeByteBlocks[freeBlocks++] = blocks[i];blocks[i] = null;}for (int i = stop; i < end; i++){blocks[i] = null;}bytesUsed.AddAndGet(-(end - stop) * m_blockSize);Debug.Assert(bytesUsed.Get() >= 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void RecycleByteBlocks(byte[][] blocks, int start, int end){int numBlocks = Math.Min(maxBufferedBlocks - freeBlocks, end - start);int size = freeBlocks + numBlocks;if (size >= freeByteBlocks.Length){var newBlocks = new byte[ArrayUtil.Oversize(size, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];Array.Copy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);freeByteBlocks = newBlocks;}int stop = start + numBlocks;for (int i = start; i < stop; i++){freeByteBlocks[freeBlocks++] = blocks[i];blocks[i] = null;}for (int i = stop; i < end; i++){blocks[i] = null;}bytesUsed.AddAndGet(-(end - stop) * m_blockSize);Debug.Assert(bytesUsed.Get() >= 0);}",
    "output": "public void recycleByteBlocks(byte[][] blocks, int start, int end) {final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);final int size = freeBlocks + numBlocks;if (size >= freeByteBlocks.length) {final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);freeByteBlocks = newBlocks;}final int stop = start + numBlocks;for (int i = start; i < stop; i++) {freeByteBlocks[freeBlocks++] = blocks[i];blocks[i] = null;}for (int i = stop; i < end; i++) {blocks[i] = null;}bytesUsed.addAndGet(-(end - stop) * blockSize);assert bytesUsed.get() >= 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GeohashPrefixTree(SpatialContext ctx, int maxLevels) {super(ctx, maxLevels);Rectangle bounds = ctx.getWorldBounds();if (bounds.getMinX() != -180)throw new IllegalArgumentException(\"Geohash only supports lat-lon world bounds. Got \"+bounds);int MAXP = getMaxLevelsPossible();if (maxLevels <= 0 || maxLevels > MAXP)throw new IllegalArgumentException(\"maxLevels must be [1-\"+MAXP+\"] but got \"+ maxLevels);}",
    "output": "public GeohashPrefixTree(SpatialContext ctx, int maxLevels): base(ctx, maxLevels){IRectangle bounds = ctx.WorldBounds;if (bounds.MinX != -180){throw new ArgumentException(\"Geohash only supports lat-lon world bounds. Got \" + bounds);}int Maxp = MaxLevelsPossible;if (maxLevels <= 0 || maxLevels > Maxp){throw new ArgumentException(\"maxLen must be [1-\" + Maxp + \"] but got \" + maxLevels);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GeohashPrefixTree(SpatialContext ctx, int maxLevels): base(ctx, maxLevels){IRectangle bounds = ctx.WorldBounds;if (bounds.MinX != -180){throw new ArgumentException(\"Geohash only supports lat-lon world bounds. Got \" + bounds);}int Maxp = MaxLevelsPossible;if (maxLevels <= 0 || maxLevels > Maxp){throw new ArgumentException(\"maxLen must be [1-\" + Maxp + \"] but got \" + maxLevels);}}",
    "output": "public GeohashPrefixTree(SpatialContext ctx, int maxLevels) {super(ctx, maxLevels);Rectangle bounds = ctx.getWorldBounds();if (bounds.getMinX() != -180)throw new IllegalArgumentException(\"Geohash only supports lat-lon world bounds. Got \"+bounds);int MAXP = getMaxLevelsPossible();if (maxLevels <= 0 || maxLevels > MAXP)throw new IllegalArgumentException(\"maxLevels must be [1-\"+MAXP+\"] but got \"+ maxLevels);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void removeName(int namenum) {_definedNames.remove(namenum);}",
    "output": "public void RemoveName(int namenum){_definedNames.RemoveAt(namenum);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void RemoveName(int namenum){_definedNames.RemoveAt(namenum);}",
    "output": "public void removeName(int namenum) {_definedNames.remove(namenum);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CancelSpotFleetRequestsResult cancelSpotFleetRequests(CancelSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeCancelSpotFleetRequests(request);}",
    "output": "public virtual CancelSpotFleetRequestsResponse CancelSpotFleetRequests(CancelSpotFleetRequestsRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelSpotFleetRequestsRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelSpotFleetRequestsResponseUnmarshaller.Instance;return Invoke<CancelSpotFleetRequestsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CancelSpotFleetRequestsResponse CancelSpotFleetRequests(CancelSpotFleetRequestsRequest request){var options = new InvokeOptions();options.RequestMarshaller = CancelSpotFleetRequestsRequestMarshaller.Instance;options.ResponseUnmarshaller = CancelSpotFleetRequestsResponseUnmarshaller.Instance;return Invoke<CancelSpotFleetRequestsResponse>(request, options);}",
    "output": "public CancelSpotFleetRequestsResult cancelSpotFleetRequests(CancelSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeCancelSpotFleetRequests(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetIndustryInfoLineageListRequest() {super(\"industry-brain\", \"2018-07-12\", \"GetIndustryInfoLineageList\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public GetIndustryInfoLineageListRequest(): base(\"industry-brain\", \"2018-07-12\", \"GetIndustryInfoLineageList\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public GetIndustryInfoLineageListRequest(): base(\"industry-brain\", \"2018-07-12\", \"GetIndustryInfoLineageList\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public GetIndustryInfoLineageListRequest() {super(\"industry-brain\", \"2018-07-12\", \"GetIndustryInfoLineageList\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static double[] grow(double[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Double.BYTES));} else return array;}",
    "output": "public static double[] Grow(double[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){double[] newArray = new double[Oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static double[] Grow(double[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){double[] newArray = new double[Oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}",
    "output": "public static double[] grow(double[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Double.BYTES));} else return array;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setResult(RefUpdate.Result status) {result = status;super.setResult(status);}",
    "output": "public override void SetResult(RefUpdate.Result status){this._enclosing.result = status;base.SetResult(status);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SetResult(RefUpdate.Result status){this._enclosing.result = status;base.SetResult(status);}",
    "output": "public void setResult(RefUpdate.Result status) {result = status;super.setResult(status);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | (byte2 >>> 4);final int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);final int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}",
    "output": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){int byte0 = blocks[blocksOffset++] & 0xFF;int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | ((int)((uint)byte1 >> 6));int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | ((int)((uint)byte2 >> 4));int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | ((int)((uint)byte3 >> 2));int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){int byte0 = blocks[blocksOffset++] & 0xFF;int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | ((int)((uint)byte1 >> 6));int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | ((int)((uint)byte2 >> 4));int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | ((int)((uint)byte3 >> 2));int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}",
    "output": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final int byte0 = blocks[blocksOffset++] & 0xFF;final int byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);final int byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 63) << 4) | (byte2 >>> 4);final int byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);final int byte4 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1, ValueEval arg2) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);final double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}ve = OperandResolver.getSingleValue(arg2, srcRowIndex, srcColumnIndex);int order_value = OperandResolver.coerceValueToInt(ve);final boolean order;if (order_value==0) {order = true;} else if(order_value==1) {order = false;} else {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), order);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, order);} catch (EvaluationException e) {return e.getErrorEval();}}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1, ValueEval arg2){AreaEval aeRange;double result;bool order = false;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);result = OperandResolver.CoerceValueToDouble(ve);if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}aeRange = ConvertRangeArg(arg1);ve = OperandResolver.GetSingleValue(arg2, srcRowIndex, srcColumnIndex);int order_value = OperandResolver.CoerceValueToInt(ve);if (order_value == 0){order = true;}else if (order_value == 1){order = false;}else throw new EvaluationException(ErrorEval.NUM_ERROR);}catch (EvaluationException e){return e.GetErrorEval();}return eval(srcRowIndex, srcColumnIndex, result, aeRange, order);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1, ValueEval arg2){AreaEval aeRange;double result;bool order = false;try{ValueEval ve = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);result = OperandResolver.CoerceValueToDouble(ve);if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}aeRange = ConvertRangeArg(arg1);ve = OperandResolver.GetSingleValue(arg2, srcRowIndex, srcColumnIndex);int order_value = OperandResolver.CoerceValueToInt(ve);if (order_value == 0){order = true;}else if (order_value == 1){order = false;}else throw new EvaluationException(ErrorEval.NUM_ERROR);}catch (EvaluationException e){return e.GetErrorEval();}return eval(srcRowIndex, srcColumnIndex, result, aeRange, order);}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1, ValueEval arg2) {try {ValueEval ve = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);final double result = OperandResolver.coerceValueToDouble(ve);if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}ve = OperandResolver.getSingleValue(arg2, srcRowIndex, srcColumnIndex);int order_value = OperandResolver.coerceValueToInt(ve);final boolean order;if (order_value==0) {order = true;} else if(order_value==1) {order = false;} else {throw new EvaluationException(ErrorEval.NUM_ERROR);}if (arg1 instanceof RefListEval) {return eval(result, ((RefListEval)arg1), order);}final AreaEval aeRange = convertRangeArg(arg1);return eval(result, aeRange, order);} catch (EvaluationException e) {return e.getErrorEval();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteEventBusResult deleteEventBus(DeleteEventBusRequest request) {request = beforeClientExecution(request);return executeDeleteEventBus(request);}",
    "output": "public virtual DeleteEventBusResponse DeleteEventBus(DeleteEventBusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteEventBusRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteEventBusResponseUnmarshaller.Instance;return Invoke<DeleteEventBusResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteEventBusResponse DeleteEventBus(DeleteEventBusRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteEventBusRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteEventBusResponseUnmarshaller.Instance;return Invoke<DeleteEventBusResponse>(request, options);}",
    "output": "public DeleteEventBusResult deleteEventBus(DeleteEventBusRequest request) {request = beforeClientExecution(request);return executeDeleteEventBus(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static ByteBuffer wrap(byte[] array, int start, int byteCount) {Arrays.checkOffsetAndCount(array.length, start, byteCount);ByteBuffer buf = new ReadWriteHeapByteBuffer(array);buf.position = start;buf.limit = start + byteCount;return buf;}",
    "output": "public static java.nio.ByteBuffer wrap(byte[] array_1, int start, int byteCount){java.util.Arrays.checkOffsetAndCount(array_1.Length, start, byteCount);java.nio.ByteBuffer buf = new java.nio.ReadWriteHeapByteBuffer(array_1);buf._position = start;buf._limit = start + byteCount;return buf;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static java.nio.ByteBuffer wrap(byte[] array_1, int start, int byteCount){java.util.Arrays.checkOffsetAndCount(array_1.Length, start, byteCount);java.nio.ByteBuffer buf = new java.nio.ReadWriteHeapByteBuffer(array_1);buf._position = start;buf._limit = start + byteCount;return buf;}",
    "output": "public static ByteBuffer wrap(byte[] array, int start, int byteCount) {Arrays.checkOffsetAndCount(array.length, start, byteCount);ByteBuffer buf = new ReadWriteHeapByteBuffer(array);buf.position = start;buf.limit = start + byteCount;return buf;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String apiVersion() {return this.apiVersion;}",
    "output": "public string ApiVersion { get; private set; }"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string ApiVersion { get; private set; }",
    "output": "public String apiVersion() {return this.apiVersion;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchResult search(SearchRequest request) {request = beforeClientExecution(request);return executeSearch(request);}",
    "output": "public virtual SearchResponse Search(SearchRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchResponseUnmarshaller.Instance;return Invoke<SearchResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SearchResponse Search(SearchRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchResponseUnmarshaller.Instance;return Invoke<SearchResponse>(request, options);}",
    "output": "public SearchResult search(SearchRequest request) {request = beforeClientExecution(request);return executeSearch(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PushCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}",
    "output": "public virtual NGit.Api.PushCommand SetRemote(string remote){CheckCallable();this.remote = remote;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.PushCommand SetRemote(string remote){CheckCallable();this.remote = remote;return this;}",
    "output": "public PushCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AcceptReservedInstancesExchangeQuoteResult acceptReservedInstancesExchangeQuote(AcceptReservedInstancesExchangeQuoteRequest request) {request = beforeClientExecution(request);return executeAcceptReservedInstancesExchangeQuote(request);}",
    "output": "public virtual AcceptReservedInstancesExchangeQuoteResponse AcceptReservedInstancesExchangeQuote(AcceptReservedInstancesExchangeQuoteRequest request){var options = new InvokeOptions();options.RequestMarshaller = AcceptReservedInstancesExchangeQuoteRequestMarshaller.Instance;options.ResponseUnmarshaller = AcceptReservedInstancesExchangeQuoteResponseUnmarshaller.Instance;return Invoke<AcceptReservedInstancesExchangeQuoteResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual AcceptReservedInstancesExchangeQuoteResponse AcceptReservedInstancesExchangeQuote(AcceptReservedInstancesExchangeQuoteRequest request){var options = new InvokeOptions();options.RequestMarshaller = AcceptReservedInstancesExchangeQuoteRequestMarshaller.Instance;options.ResponseUnmarshaller = AcceptReservedInstancesExchangeQuoteResponseUnmarshaller.Instance;return Invoke<AcceptReservedInstancesExchangeQuoteResponse>(request, options);}",
    "output": "public AcceptReservedInstancesExchangeQuoteResult acceptReservedInstancesExchangeQuote(AcceptReservedInstancesExchangeQuoteRequest request) {request = beforeClientExecution(request);return executeAcceptReservedInstancesExchangeQuote(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetAuthorizationTokenResult getAuthorizationToken(GetAuthorizationTokenRequest request) {request = beforeClientExecution(request);return executeGetAuthorizationToken(request);}",
    "output": "public virtual GetAuthorizationTokenResponse GetAuthorizationToken(GetAuthorizationTokenRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAuthorizationTokenRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAuthorizationTokenResponseUnmarshaller.Instance;return Invoke<GetAuthorizationTokenResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetAuthorizationTokenResponse GetAuthorizationToken(GetAuthorizationTokenRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAuthorizationTokenRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAuthorizationTokenResponseUnmarshaller.Instance;return Invoke<GetAuthorizationTokenResponse>(request, options);}",
    "output": "public GetAuthorizationTokenResult getAuthorizationToken(GetAuthorizationTokenRequest request) {request = beforeClientExecution(request);return executeGetAuthorizationToken(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static InitCommand init() {return new InitCommand();}",
    "output": "public static InitCommand Init(){return new InitCommand();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static InitCommand Init(){return new InitCommand();}",
    "output": "public static InitCommand init() {return new InitCommand();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static RevFilter create(Collection<RevFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}",
    "output": "public static RevFilter Create(ICollection<RevFilter> list){if (list.Count < 2){throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded);}RevFilter[] subfilters = new RevFilter[list.Count];Sharpen.Collections.ToArray(list, subfilters);if (subfilters.Length == 2){return Create(subfilters[0], subfilters[1]);}return new AndRevFilter.List(subfilters);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static RevFilter Create(ICollection<RevFilter> list){if (list.Count < 2){throw new ArgumentException(JGitText.Get().atLeastTwoFiltersNeeded);}RevFilter[] subfilters = new RevFilter[list.Count];Sharpen.Collections.ToArray(list, subfilters);if (subfilters.Length == 2){return Create(subfilters[0], subfilters[1]);}return new AndRevFilter.List(subfilters);}",
    "output": "public static RevFilter create(Collection<RevFilter> list) {if (list.size() < 2)throw new IllegalArgumentException(JGitText.get().atLeastTwoFiltersNeeded);final RevFilter[] subfilters = new RevFilter[list.size()];list.toArray(subfilters);if (subfilters.length == 2)return create(subfilters[0], subfilters[1]);return new List(subfilters);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){if ( rootIsWildcard ) {if ( a == EMPTY ) return EMPTY;  if ( b == EMPTY ) return EMPTY;  }else {if ( a == EMPTY && b == EMPTY ) return EMPTY; if ( a == EMPTY ) { int[] payloads = {b.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {b.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}if ( b == EMPTY ) { int[] payloads = {a.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {a.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}}return null;}",
    "output": "public static PredictionContext MergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,bool rootIsWildcard){if (rootIsWildcard){if (a == PredictionContext.EMPTY)return PredictionContext.EMPTY;  if (b == PredictionContext.EMPTY)return PredictionContext.EMPTY;  }else {if (a == EMPTY && b == EMPTY) return EMPTY; if (a == EMPTY){ int[] payloads = { b.returnState, EMPTY_RETURN_STATE };PredictionContext[] parents = { b.parent, null };PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}if (b == EMPTY){ int[] payloads = { a.returnState, EMPTY_RETURN_STATE };PredictionContext[] parents = { a.parent, null };PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}}return null;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static PredictionContext MergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,bool rootIsWildcard){if (rootIsWildcard){if (a == PredictionContext.EMPTY)return PredictionContext.EMPTY;  if (b == PredictionContext.EMPTY)return PredictionContext.EMPTY;  }else {if (a == EMPTY && b == EMPTY) return EMPTY; if (a == EMPTY){ int[] payloads = { b.returnState, EMPTY_RETURN_STATE };PredictionContext[] parents = { b.parent, null };PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}if (b == EMPTY){ int[] payloads = { a.returnState, EMPTY_RETURN_STATE };PredictionContext[] parents = { a.parent, null };PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}}return null;}",
    "output": "public static PredictionContext mergeRoot(SingletonPredictionContext a,SingletonPredictionContext b,boolean rootIsWildcard){if ( rootIsWildcard ) {if ( a == EMPTY ) return EMPTY;  if ( b == EMPTY ) return EMPTY;  }else {if ( a == EMPTY && b == EMPTY ) return EMPTY; if ( a == EMPTY ) { int[] payloads = {b.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {b.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}if ( b == EMPTY ) { int[] payloads = {a.returnState, EMPTY_RETURN_STATE};PredictionContext[] parents = {a.parent, null};PredictionContext joined =new ArrayPredictionContext(parents, payloads);return joined;}}return null;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListTerminologiesResult listTerminologies(ListTerminologiesRequest request) {request = beforeClientExecution(request);return executeListTerminologies(request);}",
    "output": "public virtual ListTerminologiesResponse ListTerminologies(ListTerminologiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTerminologiesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTerminologiesResponseUnmarshaller.Instance;return Invoke<ListTerminologiesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListTerminologiesResponse ListTerminologies(ListTerminologiesRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListTerminologiesRequestMarshaller.Instance;options.ResponseUnmarshaller = ListTerminologiesResponseUnmarshaller.Instance;return Invoke<ListTerminologiesResponse>(request, options);}",
    "output": "public ListTerminologiesResult listTerminologies(ListTerminologiesRequest request) {request = beforeClientExecution(request);return executeListTerminologies(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ModifyInstanceGroupsRequest(java.util.List<InstanceGroupModifyConfig> instanceGroups) {setInstanceGroups(instanceGroups);}",
    "output": "public ModifyInstanceGroupsRequest(List<InstanceGroupModifyConfig> instanceGroups){_instanceGroups = instanceGroups;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ModifyInstanceGroupsRequest(List<InstanceGroupModifyConfig> instanceGroups){_instanceGroups = instanceGroups;}",
    "output": "public ModifyInstanceGroupsRequest(java.util.List<InstanceGroupModifyConfig> instanceGroups) {setInstanceGroups(instanceGroups);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"AnyObjectId[\" + name() + \"]\";}",
    "output": "public override string ToString(){return \"AnyObjectId[\" + Name + \"]\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"AnyObjectId[\" + Name + \"]\";}",
    "output": "public String toString() {return \"AnyObjectId[\" + name() + \"]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}",
    "output": "public override long RamBytesUsed(){long ramBytesUsed = 0;foreach (TermsReader r in fields.Values){if (r.index != null){ramBytesUsed += r.index.GetSizeInBytes();ramBytesUsed += RamUsageEstimator.SizeOf(r.metaBytesBlock);ramBytesUsed += RamUsageEstimator.SizeOf(r.metaLongsBlock);ramBytesUsed += RamUsageEstimator.SizeOf(r.skipInfo);ramBytesUsed += RamUsageEstimator.SizeOf(r.statsBlock);}}return ramBytesUsed;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override long RamBytesUsed(){long ramBytesUsed = 0;foreach (TermsReader r in fields.Values){if (r.index != null){ramBytesUsed += r.index.GetSizeInBytes();ramBytesUsed += RamUsageEstimator.SizeOf(r.metaBytesBlock);ramBytesUsed += RamUsageEstimator.SizeOf(r.metaLongsBlock);ramBytesUsed += RamUsageEstimator.SizeOf(r.skipInfo);ramBytesUsed += RamUsageEstimator.SizeOf(r.statsBlock);}}return ramBytesUsed;}",
    "output": "public long ramBytesUsed() {long ramBytesUsed = postingsReader.ramBytesUsed();for (TermsReader r : fields.values()) {ramBytesUsed += r.ramBytesUsed();}return ramBytesUsed;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static final ObjectId fromRaw(int[] is, int p) {return new ObjectId(is[p], is[p + 1], is[p + 2], is[p + 3], is[p + 4]);}",
    "output": "public static NGit.ObjectId FromRaw(int[] @is, int p){return new NGit.ObjectId(@is[p], @is[p + 1], @is[p + 2], @is[p + 3], @is[p + 4]);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static NGit.ObjectId FromRaw(int[] @is, int p){return new NGit.ObjectId(@is[p], @is[p + 1], @is[p + 2], @is[p + 3], @is[p + 4]);}",
    "output": "public static final ObjectId fromRaw(int[] is, int p) {return new ObjectId(is[p], is[p + 1], is[p + 2], is[p + 3], is[p + 4]);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RemoveTagsFromStreamResult removeTagsFromStream(RemoveTagsFromStreamRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromStream(request);}",
    "output": "public virtual RemoveTagsFromStreamResponse RemoveTagsFromStream(RemoveTagsFromStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveTagsFromStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveTagsFromStreamResponseUnmarshaller.Instance;return Invoke<RemoveTagsFromStreamResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RemoveTagsFromStreamResponse RemoveTagsFromStream(RemoveTagsFromStreamRequest request){var options = new InvokeOptions();options.RequestMarshaller = RemoveTagsFromStreamRequestMarshaller.Instance;options.ResponseUnmarshaller = RemoveTagsFromStreamResponseUnmarshaller.Instance;return Invoke<RemoveTagsFromStreamResponse>(request, options);}",
    "output": "public RemoveTagsFromStreamResult removeTagsFromStream(RemoveTagsFromStreamRequest request) {request = beforeClientExecution(request);return executeRemoveTagsFromStream(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void writeChar(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeChar(value);}",
    "output": "public virtual void writeChar(int value){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void writeChar(int value){throw new System.NotImplementedException();}",
    "output": "public void writeChar(int value) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeChar(value);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setParams(String params) {super.setParams(params);if (params != null) {commitUserData = params;}}",
    "output": "public override void SetParams(string @params){base.SetParams(@params);if (@params != null){commitUserData = @params;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SetParams(string @params){base.SetParams(@params);if (@params != null){commitUserData = @params;}}",
    "output": "public void setParams(String params) {super.setParams(params);if (params != null) {commitUserData = params;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public OptionGroup modifyOptionGroup(ModifyOptionGroupRequest request) {request = beforeClientExecution(request);return executeModifyOptionGroup(request);}",
    "output": "public virtual ModifyOptionGroupResponse ModifyOptionGroup(ModifyOptionGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyOptionGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyOptionGroupResponseUnmarshaller.Instance;return Invoke<ModifyOptionGroupResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ModifyOptionGroupResponse ModifyOptionGroup(ModifyOptionGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyOptionGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyOptionGroupResponseUnmarshaller.Instance;return Invoke<ModifyOptionGroupResponse>(request, options);}",
    "output": "public OptionGroup modifyOptionGroup(ModifyOptionGroupRequest request) {request = beforeClientExecution(request);return executeModifyOptionGroup(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateCommentResult createComment(CreateCommentRequest request) {request = beforeClientExecution(request);return executeCreateComment(request);}",
    "output": "public virtual CreateCommentResponse CreateComment(CreateCommentRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateCommentRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateCommentResponseUnmarshaller.Instance;return Invoke<CreateCommentResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateCommentResponse CreateComment(CreateCommentRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateCommentRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateCommentResponseUnmarshaller.Instance;return Invoke<CreateCommentResponse>(request, options);}",
    "output": "public CreateCommentResult createComment(CreateCommentRequest request) {request = beforeClientExecution(request);return executeCreateComment(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setParams(String params) {super.setParams(params);userData = params;}",
    "output": "public override void SetParams(string @params){base.SetParams(@params);userData = @params;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void SetParams(string @params){base.SetParams(@params);userData = @params;}",
    "output": "public void setParams(String params) {super.setParams(params);userData = params;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchAvailablePhoneNumbersResult searchAvailablePhoneNumbers(SearchAvailablePhoneNumbersRequest request) {request = beforeClientExecution(request);return executeSearchAvailablePhoneNumbers(request);}",
    "output": "public virtual SearchAvailablePhoneNumbersResponse SearchAvailablePhoneNumbers(SearchAvailablePhoneNumbersRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchAvailablePhoneNumbersRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchAvailablePhoneNumbersResponseUnmarshaller.Instance;return Invoke<SearchAvailablePhoneNumbersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SearchAvailablePhoneNumbersResponse SearchAvailablePhoneNumbers(SearchAvailablePhoneNumbersRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchAvailablePhoneNumbersRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchAvailablePhoneNumbersResponseUnmarshaller.Instance;return Invoke<SearchAvailablePhoneNumbersResponse>(request, options);}",
    "output": "public SearchAvailablePhoneNumbersResult searchAvailablePhoneNumbers(SearchAvailablePhoneNumbersRequest request) {request = beforeClientExecution(request);return executeSearchAvailablePhoneNumbers(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SpanPositionCheckQuery(SpanQuery match) {this.match = Objects.requireNonNull(match);}",
    "output": "public SpanPositionCheckQuery(SpanQuery match){this.m_match = match;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SpanPositionCheckQuery(SpanQuery match){this.m_match = match;}",
    "output": "public SpanPositionCheckQuery(SpanQuery match) {this.match = Objects.requireNonNull(match);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean removeChildRecord(EscherRecord toBeRemoved) {return _childRecords.remove(toBeRemoved);}",
    "output": "public bool RemoveChildRecord(EscherRecord toBeRemoved){return _childRecords.Remove(toBeRemoved);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool RemoveChildRecord(EscherRecord toBeRemoved){return _childRecords.Remove(toBeRemoved);}",
    "output": "public boolean removeChildRecord(EscherRecord toBeRemoved) {return _childRecords.remove(toBeRemoved);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BytesRef clone() {return new BytesRef(bytes, offset, length);}",
    "output": "public object Clone(){return new BytesRef(bytes, Offset, Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public object Clone(){return new BytesRef(bytes, Offset, Length);}",
    "output": "public BytesRef clone() {return new BytesRef(bytes, offset, length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer putLong(long value) {throw new ReadOnlyBufferException();}",
    "output": "public override java.nio.ByteBuffer putLong(long value){throw new java.nio.ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer putLong(long value){throw new java.nio.ReadOnlyBufferException();}",
    "output": "public ByteBuffer putLong(long value) {throw new ReadOnlyBufferException();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "@Override public boolean add(E object) {synchronized (CopyOnWriteArrayList.this) {add(slice.to - slice.from, object);return true;}}",
    "output": "public virtual bool add(E e){lock (this){object[] newElements = new object[elements.Length + 1];System.Array.Copy(elements, 0, newElements, 0, elements.Length);newElements[elements.Length] = e;elements = newElements;return true;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool add(E e){lock (this){object[] newElements = new object[elements.Length + 1];System.Array.Copy(elements, 0, newElements, 0, elements.Length);newElements[elements.Length] = e;elements = newElements;return true;}}",
    "output": "@Override public boolean add(E object) {synchronized (CopyOnWriteArrayList.this) {add(slice.to - slice.from, object);return true;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RevTree lookupTree(AnyObjectId id) {RevTree c = (RevTree) objects.get(id);if (c == null) {c = new RevTree(id);objects.add(c);}return c;}",
    "output": "public virtual RevTree LookupTree(AnyObjectId id){RevTree c = (RevTree)objects.Get(id);if (c == null){c = new RevTree(id);objects.Add(c);}return c;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual RevTree LookupTree(AnyObjectId id){RevTree c = (RevTree)objects.Get(id);if (c == null){c = new RevTree(id);objects.Add(c);}return c;}",
    "output": "public RevTree lookupTree(AnyObjectId id) {RevTree c = (RevTree) objects.get(id);if (c == null) {c = new RevTree(id);objects.add(c);}return c;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object other) {return sameClassAs(other) &&func.equals(((FunctionQuery) other).func);}",
    "output": "public override bool Equals(object o){var other = o as FunctionQuery;if (other == null){return false;}return Boost == other.Boost&& func.Equals(other.func);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){var other = o as FunctionQuery;if (other == null){return false;}return Boost == other.Boost&& func.Equals(other.func);}",
    "output": "public boolean equals(Object other) {return sameClassAs(other) &&func.equals(((FunctionQuery) other).func);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean changeExternalReference(String oldUrl, String newUrl) {for (ExternalBookBlock ex : _externalBookBlocks) {SupBookRecord externalRecord = ex.getExternalBookRecord();if (externalRecord.isExternalReferences()&& externalRecord.getURL().equals(oldUrl)) {externalRecord.setURL(newUrl);return true;}}return false;}",
    "output": "public bool ChangeExternalReference(String oldUrl, String newUrl){foreach (ExternalBookBlock ex in _externalBookBlocks){SupBookRecord externalRecord = ex.GetExternalBookRecord();if (externalRecord.IsExternalReferences&& externalRecord.URL.Equals(oldUrl)){externalRecord.URL = (newUrl);return true;}}return false;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool ChangeExternalReference(String oldUrl, String newUrl){foreach (ExternalBookBlock ex in _externalBookBlocks){SupBookRecord externalRecord = ex.GetExternalBookRecord();if (externalRecord.IsExternalReferences&& externalRecord.URL.Equals(oldUrl)){externalRecord.URL = (newUrl);return true;}}return false;}",
    "output": "public boolean changeExternalReference(String oldUrl, String newUrl) {for (ExternalBookBlock ex : _externalBookBlocks) {SupBookRecord externalRecord = ex.getExternalBookRecord();if (externalRecord.isExternalReferences()&& externalRecord.getURL().equals(oldUrl)) {externalRecord.setURL(newUrl);return true;}}return false;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void removeLastPrinted() {remove1stProperty(PropertyIDMap.PID_LASTPRINTED);}",
    "output": "public void RemoveLastPrinted(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_LASTPRINTED);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void RemoveLastPrinted(){MutableSection s = (MutableSection)FirstSection;s.RemoveProperty(PropertyIDMap.PID_LASTPRINTED);}",
    "output": "public void removeLastPrinted() {remove1stProperty(PropertyIDMap.PID_LASTPRINTED);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MergeCommand merge() {return new MergeCommand(repo);}",
    "output": "public virtual MergeCommand Merge(){return new MergeCommand(repo);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual MergeCommand Merge(){return new MergeCommand(repo);}",
    "output": "public MergeCommand merge() {return new MergeCommand(repo);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {final Type t = getType();return t + \"(\" + beginA + \"-\" + endA + \",\" + beginB + \"-\" + endB + \")\";}",
    "output": "public override string ToString(){Edit.Type t = GetType();return t + \"(\" + beginA + \"-\" + endA + \",\" + beginB + \"-\" + endB + \")\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){Edit.Type t = GetType();return t + \"(\" + beginA + \"-\" + endA + \",\" + beginB + \"-\" + endB + \")\";}",
    "output": "public String toString() {final Type t = getType();return t + \"(\" + beginA + \"-\" + endA + \",\" + beginB + \"-\" + endB + \")\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {int nItems = _list.size();out.writeShort(nItems);for (int k = 0; k < nItems; k++) {CellRangeAddress region = _list.get(k);region.serialize(out);}}",
    "output": "public void Serialize(ILittleEndianOutput out1){int nItems = _list.Count;out1.WriteShort(nItems);for (int k = 0; k < nItems; k++){CellRangeAddress region = (CellRangeAddress)_list[k];region.Serialize(out1);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Serialize(ILittleEndianOutput out1){int nItems = _list.Count;out1.WriteShort(nItems);for (int k = 0; k < nItems; k++){CellRangeAddress region = (CellRangeAddress)_list[k];region.Serialize(out1);}}",
    "output": "public void serialize(LittleEndianOutput out) {int nItems = _list.size();out.writeShort(nItems);for (int k = 0; k < nItems; k++) {CellRangeAddress region = _list.get(k);region.serialize(out);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void remove() {throw new UnsupportedOperationException(\"Remove not supported\");}",
    "output": "public void Remove(){throw new InvalidOperationException(\"Remove not supported\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Remove(){throw new InvalidOperationException(\"Remove not supported\");}",
    "output": "public void remove() {throw new UnsupportedOperationException(\"Remove not supported\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TagCommand setSigned(boolean signed) {this.signed = signed;return this;}",
    "output": "public virtual NGit.Api.TagCommand SetSigned(bool signed){this.signed = signed;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual NGit.Api.TagCommand SetSigned(bool signed){this.signed = signed;return this;}",
    "output": "public TagCommand setSigned(boolean signed) {this.signed = signed;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeReservedInstancesListingsResult describeReservedInstancesListings(DescribeReservedInstancesListingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstancesListings(request);}",
    "output": "public virtual DescribeReservedInstancesListingsResponse DescribeReservedInstancesListings(DescribeReservedInstancesListingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeReservedInstancesListingsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeReservedInstancesListingsResponseUnmarshaller.Instance;return Invoke<DescribeReservedInstancesListingsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeReservedInstancesListingsResponse DescribeReservedInstancesListings(DescribeReservedInstancesListingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeReservedInstancesListingsRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeReservedInstancesListingsResponseUnmarshaller.Instance;return Invoke<DescribeReservedInstancesListingsResponse>(request, options);}",
    "output": "public DescribeReservedInstancesListingsResult describeReservedInstancesListings(DescribeReservedInstancesListingsRequest request) {request = beforeClientExecution(request);return executeDescribeReservedInstancesListings(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getName() {return getRef().getName();}",
    "output": "public virtual string GetName(){return GetRef().GetName();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetName(){return GetRef().GetName();}",
    "output": "public String getName() {return getRef().getName();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isAllSet(final int holder){return (holder & _mask) == _mask;}",
    "output": "public bool IsAllSet(int holder){return ((holder & this._mask) == this._mask);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool IsAllSet(int holder){return ((holder & this._mask) == this._mask);}",
    "output": "public boolean isAllSet(final int holder){return (holder & _mask) == _mask;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static int getEncodedSize(String value) {int result = 2 + 1;result += value.length() * (StringUtil.hasMultibyte(value) ? 2 : 1);return result;}",
    "output": "public static int GetEncodedSize(String value){int result = 2 + 1;result += value.Length * (StringUtil.HasMultibyte(value) ? 2 : 1);return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static int GetEncodedSize(String value){int result = 2 + 1;result += value.Length * (StringUtil.HasMultibyte(value) ? 2 : 1);return result;}",
    "output": "public static int getEncodedSize(String value) {int result = 2 + 1;result += value.length() * (StringUtil.hasMultibyte(value) ? 2 : 1);return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<CharsRef> stem(char word[], int length) {if (dictionary.needsInputCleaning) {scratchSegment.setLength(0);scratchSegment.append(word, 0, length);CharSequence cleaned = dictionary.cleanInput(scratchSegment, segment);scratchBuffer = ArrayUtil.grow(scratchBuffer, cleaned.length());length = segment.length();segment.getChars(0, length, scratchBuffer, 0);word = scratchBuffer;}int caseType = caseOf(word, length);if (caseType == UPPER_CASE) {caseFoldTitle(word, length);caseFoldLower(titleBuffer, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(titleBuffer, length, true));list.addAll(doStem(lowerBuffer, length, true));return list;} else if (caseType == TITLE_CASE) {caseFoldLower(word, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(lowerBuffer, length, true));return list;} else {return doStem(word, length, false);}}",
    "output": "public IList<CharsRef> Stem(char[] word, int length){if (dictionary.needsInputCleaning){scratchSegment.Length = 0;scratchSegment.Append(word, 0, length);string cleaned = dictionary.CleanInput(scratchSegment.ToString(), segment);scratchBuffer = ArrayUtil.Grow(scratchBuffer, cleaned.Length);length = segment.Length;segment.CopyTo(0, scratchBuffer, 0, length);word = scratchBuffer;}List<CharsRef> stems = new List<CharsRef>();Int32sRef forms = dictionary.LookupWord(word, 0, length);if (forms != null){for (int i = 0; i < forms.Length; i++){stems.Add(NewStem(word, length));}}stems.AddRange(Stem(word, length, -1, -1, -1, 0, true, true, false, false));return stems;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IList<CharsRef> Stem(char[] word, int length){if (dictionary.needsInputCleaning){scratchSegment.Length = 0;scratchSegment.Append(word, 0, length);string cleaned = dictionary.CleanInput(scratchSegment.ToString(), segment);scratchBuffer = ArrayUtil.Grow(scratchBuffer, cleaned.Length);length = segment.Length;segment.CopyTo(0, scratchBuffer, 0, length);word = scratchBuffer;}List<CharsRef> stems = new List<CharsRef>();Int32sRef forms = dictionary.LookupWord(word, 0, length);if (forms != null){for (int i = 0; i < forms.Length; i++){stems.Add(NewStem(word, length));}}stems.AddRange(Stem(word, length, -1, -1, -1, 0, true, true, false, false));return stems;}",
    "output": "public List<CharsRef> stem(char word[], int length) {if (dictionary.needsInputCleaning) {scratchSegment.setLength(0);scratchSegment.append(word, 0, length);CharSequence cleaned = dictionary.cleanInput(scratchSegment, segment);scratchBuffer = ArrayUtil.grow(scratchBuffer, cleaned.length());length = segment.length();segment.getChars(0, length, scratchBuffer, 0);word = scratchBuffer;}int caseType = caseOf(word, length);if (caseType == UPPER_CASE) {caseFoldTitle(word, length);caseFoldLower(titleBuffer, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(titleBuffer, length, true));list.addAll(doStem(lowerBuffer, length, true));return list;} else if (caseType == TITLE_CASE) {caseFoldLower(word, length);List<CharsRef> list = doStem(word, length, false);list.addAll(doStem(lowerBuffer, length, true));return list;} else {return doStem(word, length, false);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public HSSFConditionalFormattingRule createConditionalFormattingRule(String formula) {CFRuleRecord rr = CFRuleRecord.create(_sheet, formula);return new HSSFConditionalFormattingRule(_sheet, rr);}",
    "output": "public IConditionalFormattingRule CreateConditionalFormattingRule(String formula){HSSFWorkbook wb = (HSSFWorkbook)_sheet.Workbook;CFRuleRecord rr = CFRuleRecord.Create(_sheet, formula);return new HSSFConditionalFormattingRule(wb, rr);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IConditionalFormattingRule CreateConditionalFormattingRule(String formula){HSSFWorkbook wb = (HSSFWorkbook)_sheet.Workbook;CFRuleRecord rr = CFRuleRecord.Create(_sheet, formula);return new HSSFConditionalFormattingRule(wb, rr);}",
    "output": "public HSSFConditionalFormattingRule createConditionalFormattingRule(String formula) {CFRuleRecord rr = CFRuleRecord.create(_sheet, formula);return new HSSFConditionalFormattingRule(_sheet, rr);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Record create(RecordInputStream in) {Object[] args = { in, };try {return (org.apache.poi.hssf.record.Record) _m.invoke(null, args);} catch (IllegalArgumentException | IllegalAccessException e) {throw new RuntimeException(e);} catch (InvocationTargetException e) {throw new org.apache.poi.util.RecordFormatException(\"Unable to construct record instance\" , e.getTargetException());}}",
    "output": "public Record Create(RecordInputStream in1){Object[] args = { in1 };try{return (Record)_m.Invoke(null, args);}catch (Exception e){throw new RecordFormatException(\"Unable to construct record instance\", e.InnerException);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Record Create(RecordInputStream in1){Object[] args = { in1 };try{return (Record)_m.Invoke(null, args);}catch (Exception e){throw new RecordFormatException(\"Unable to construct record instance\", e.InnerException);}}",
    "output": "public Record create(RecordInputStream in) {Object[] args = { in, };try {return (org.apache.poi.hssf.record.Record) _m.invoke(null, args);} catch (IllegalArgumentException | IllegalAccessException e) {throw new RuntimeException(e);} catch (InvocationTargetException e) {throw new org.apache.poi.util.RecordFormatException(\"Unable to construct record instance\" , e.getTargetException());}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int set(int index, long[] arr, int off, int len) {assert len > 0 : \"len must be > 0 (got \" + len + \")\";assert index >= 0 && index < size();len = Math.min(len, size() - index);assert off + len <= arr.length;for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {set(i, arr[o]);}return len;}",
    "output": "public virtual int Set(int index, long[] arr, int off, int len){Debug.Assert(len > 0, \"len must be > 0 (got \" + len + \")\");Debug.Assert(index >= 0 && index < Count);len = Math.Min(len, Count - index);Debug.Assert(off + len <= arr.Length);for (int i = index, o = off, end = index + len; i < end; ++i, ++o){Set(i, arr[o]);}return len;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual int Set(int index, long[] arr, int off, int len){Debug.Assert(len > 0, \"len must be > 0 (got \" + len + \")\");Debug.Assert(index >= 0 && index < Count);len = Math.Min(len, Count - index);Debug.Assert(off + len <= arr.Length);for (int i = index, o = off, end = index + len; i < end; ++i, ++o){Set(i, arr[o]);}return len;}",
    "output": "public int set(int index, long[] arr, int off, int len) {assert len > 0 : \"len must be > 0 (got \" + len + \")\";assert index >= 0 && index < size();len = Math.min(len, size() - index);assert off + len <= arr.length;for (int i = index, o = off, end = index + len; i < end; ++i, ++o) {set(i, arr[o]);}return len;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public synchronized long ramBytesUsed() {long bytes = 0;for(CachedOrds ords : ordsCache.values()) {bytes += ords.ramBytesUsed();}return bytes;}",
    "output": "public virtual long RamBytesUsed(){lock (this) return ordsCache.Sum(pair => pair.Value.RamBytesUsed());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual long RamBytesUsed(){lock (this) return ordsCache.Sum(pair => pair.Value.RamBytesUsed());}",
    "output": "public synchronized long ramBytesUsed() {long bytes = 0;for(CachedOrds ords : ordsCache.values()) {bytes += ords.ramBytesUsed();}return bytes;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void writeDouble(double v) {writeLong(Double.doubleToLongBits(v));}",
    "output": "public void WriteDouble(double v){WriteLong(BitConverter.DoubleToInt64Bits(v));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void WriteDouble(double v){WriteLong(BitConverter.DoubleToInt64Bits(v));}",
    "output": "public void writeDouble(double v) {writeLong(Double.doubleToLongBits(v));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"DocumentsWriterFlushControl [activeBytes=\" + activeBytes+ \", flushBytes=\" + flushBytes + \"]\";}",
    "output": "public override string ToString(){return \"DocumentsWriterFlushControl [activeBytes=\" + activeBytes + \", flushBytes=\" + flushBytes + \"]\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"DocumentsWriterFlushControl [activeBytes=\" + activeBytes + \", flushBytes=\" + flushBytes + \"]\";}",
    "output": "public String toString() {return \"DocumentsWriterFlushControl [activeBytes=\" + activeBytes+ \", flushBytes=\" + flushBytes + \"]\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListSecurityConfigurationsResult listSecurityConfigurations(ListSecurityConfigurationsRequest request) {request = beforeClientExecution(request);return executeListSecurityConfigurations(request);}",
    "output": "public virtual ListSecurityConfigurationsResponse ListSecurityConfigurations(ListSecurityConfigurationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSecurityConfigurationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSecurityConfigurationsResponseUnmarshaller.Instance;return Invoke<ListSecurityConfigurationsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListSecurityConfigurationsResponse ListSecurityConfigurations(ListSecurityConfigurationsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSecurityConfigurationsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSecurityConfigurationsResponseUnmarshaller.Instance;return Invoke<ListSecurityConfigurationsResponse>(request, options);}",
    "output": "public ListSecurityConfigurationsResult listSecurityConfigurations(ListSecurityConfigurationsRequest request) {request = beforeClientExecution(request);return executeListSecurityConfigurations(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListQualificationRequestsResult listQualificationRequests(ListQualificationRequestsRequest request) {request = beforeClientExecution(request);return executeListQualificationRequests(request);}",
    "output": "public virtual ListQualificationRequestsResponse ListQualificationRequests(ListQualificationRequestsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListQualificationRequestsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListQualificationRequestsResponseUnmarshaller.Instance;return Invoke<ListQualificationRequestsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListQualificationRequestsResponse ListQualificationRequests(ListQualificationRequestsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListQualificationRequestsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListQualificationRequestsResponseUnmarshaller.Instance;return Invoke<ListQualificationRequestsResponse>(request, options);}",
    "output": "public ListQualificationRequestsResult listQualificationRequests(ListQualificationRequestsRequest request) {request = beforeClientExecution(request);return executeListQualificationRequests(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void println(char[] chars) {println(new String(chars, 0, chars.length));}",
    "output": "public virtual void println(char[] chars){println(new string(chars, 0, chars.Length));}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void println(char[] chars){println(new string(chars, 0, chars.Length));}",
    "output": "public void println(char[] chars) {println(new String(chars, 0, chars.length));}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ReleaseAddressResult releaseAddress(ReleaseAddressRequest request) {request = beforeClientExecution(request);return executeReleaseAddress(request);}",
    "output": "public virtual ReleaseAddressResponse ReleaseAddress(ReleaseAddressRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReleaseAddressRequestMarshaller.Instance;options.ResponseUnmarshaller = ReleaseAddressResponseUnmarshaller.Instance;return Invoke<ReleaseAddressResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ReleaseAddressResponse ReleaseAddress(ReleaseAddressRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReleaseAddressRequestMarshaller.Instance;options.ResponseUnmarshaller = ReleaseAddressResponseUnmarshaller.Instance;return Invoke<ReleaseAddressResponse>(request, options);}",
    "output": "public ReleaseAddressResult releaseAddress(ReleaseAddressRequest request) {request = beforeClientExecution(request);return executeReleaseAddress(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static boolean[] copyOfRange(boolean[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);boolean[] result = new boolean[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}",
    "output": "public static bool[] copyOfRange(bool[] original, int start, int end){if (start > end){throw new System.ArgumentException();}int originalLength = original.Length;if (start < 0 || start > originalLength){throw new System.IndexOutOfRangeException();}int resultLength = end - start;int copyLength = System.Math.Min(resultLength, originalLength - start);bool[] result = new bool[resultLength];System.Array.Copy(original, start, result, 0, copyLength);return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static bool[] copyOfRange(bool[] original, int start, int end){if (start > end){throw new System.ArgumentException();}int originalLength = original.Length;if (start < 0 || start > originalLength){throw new System.IndexOutOfRangeException();}int resultLength = end - start;int copyLength = System.Math.Min(resultLength, originalLength - start);bool[] result = new bool[resultLength];System.Array.Copy(original, start, result, 0, copyLength);return result;}",
    "output": "public static boolean[] copyOfRange(boolean[] original, int start, int end) {if (start > end) {throw new IllegalArgumentException();}int originalLength = original.length;if (start < 0 || start > originalLength) {throw new ArrayIndexOutOfBoundsException();}int resultLength = end - start;int copyLength = Math.min(resultLength, originalLength - start);boolean[] result = new boolean[resultLength];System.arraycopy(original, start, result, 0, copyLength);return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void fillOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor( x, y, x + width, y + height ) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.setLineStyle(HSSFShape.LINESTYLE_NONE);shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setNoFill(false);}",
    "output": "public void FillOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.CreateShape(new HSSFChildAnchor(x, y, x + width, y + height));shape.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.LineStyle = LineStyle.None;shape.SetFillColor(foreground.R, foreground.G, foreground.B);shape.SetLineStyleColor(foreground.R, foreground.G, foreground.B);shape.IsNoFill = (false);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void FillOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.CreateShape(new HSSFChildAnchor(x, y, x + width, y + height));shape.ShapeType = (HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.LineStyle = LineStyle.None;shape.SetFillColor(foreground.R, foreground.G, foreground.B);shape.SetLineStyleColor(foreground.R, foreground.G, foreground.B);shape.IsNoFill = (false);}",
    "output": "public void fillOval(int x, int y, int width, int height){HSSFSimpleShape shape = escherGroup.createShape(new HSSFChildAnchor( x, y, x + width, y + height ) );shape.setShapeType(HSSFSimpleShape.OBJECT_TYPE_OVAL);shape.setLineStyle(HSSFShape.LINESTYLE_NONE);shape.setFillColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setLineStyleColor(foreground.getRed(), foreground.getGreen(), foreground.getBlue());shape.setNoFill(false);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {try {String needle = TextFunction.evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);int startpos = TextFunction.evaluateIntArg(arg2, srcRowIndex, srcColumnIndex) - 1;if (startpos < 0) {return ErrorEval.VALUE_INVALID;}return eval(haystack, needle, startpos);} catch (EvaluationException e) {return e.getErrorEval();}}",
    "output": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2){try{String needle = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.EvaluateStringArg(arg1, srcRowIndex, srcColumnIndex);int startpos = TextFunction.EvaluateIntArg(arg2, srcRowIndex, srcColumnIndex) - 1;if (startpos < 0){return ErrorEval.VALUE_INVALID;}return Eval(haystack, needle, startpos);}catch (EvaluationException e){return e.GetErrorEval();}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2){try{String needle = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.EvaluateStringArg(arg1, srcRowIndex, srcColumnIndex);int startpos = TextFunction.EvaluateIntArg(arg2, srcRowIndex, srcColumnIndex) - 1;if (startpos < 0){return ErrorEval.VALUE_INVALID;}return Eval(haystack, needle, startpos);}catch (EvaluationException e){return e.GetErrorEval();}}",
    "output": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2) {try {String needle = TextFunction.evaluateStringArg(arg0, srcRowIndex, srcColumnIndex);String haystack = TextFunction.evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);int startpos = TextFunction.evaluateIntArg(arg2, srcRowIndex, srcColumnIndex) - 1;if (startpos < 0) {return ErrorEval.VALUE_INVALID;}return eval(haystack, needle, startpos);} catch (EvaluationException e) {return e.getErrorEval();}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateInvalidationRequest(String distributionId, InvalidationBatch invalidationBatch) {setDistributionId(distributionId);setInvalidationBatch(invalidationBatch);}",
    "output": "public CreateInvalidationRequest(string distributionId, InvalidationBatch invalidationBatch){_distributionId = distributionId;_invalidationBatch = invalidationBatch;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public CreateInvalidationRequest(string distributionId, InvalidationBatch invalidationBatch){_distributionId = distributionId;_invalidationBatch = invalidationBatch;}",
    "output": "public CreateInvalidationRequest(String distributionId, InvalidationBatch invalidationBatch) {setDistributionId(distributionId);setInvalidationBatch(invalidationBatch);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateUsageReportSubscriptionResult createUsageReportSubscription(CreateUsageReportSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateUsageReportSubscription(request);}",
    "output": "public virtual CreateUsageReportSubscriptionResponse CreateUsageReportSubscription(CreateUsageReportSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateUsageReportSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateUsageReportSubscriptionResponseUnmarshaller.Instance;return Invoke<CreateUsageReportSubscriptionResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateUsageReportSubscriptionResponse CreateUsageReportSubscription(CreateUsageReportSubscriptionRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateUsageReportSubscriptionRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateUsageReportSubscriptionResponseUnmarshaller.Instance;return Invoke<CreateUsageReportSubscriptionResponse>(request, options);}",
    "output": "public CreateUsageReportSubscriptionResult createUsageReportSubscription(CreateUsageReportSubscriptionRequest request) {request = beforeClientExecution(request);return executeCreateUsageReportSubscription(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String fromString(String value) {return value;}",
    "output": "public static string FromString(String value){return value;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string FromString(String value){return value;}",
    "output": "public static String fromString(String value) {return value;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetDetectorsResult getDetectors(GetDetectorsRequest request) {request = beforeClientExecution(request);return executeGetDetectors(request);}",
    "output": "public virtual GetDetectorsResponse GetDetectors(GetDetectorsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDetectorsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDetectorsResponseUnmarshaller.Instance;return Invoke<GetDetectorsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetDetectorsResponse GetDetectors(GetDetectorsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetDetectorsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetDetectorsResponseUnmarshaller.Instance;return Invoke<GetDetectorsResponse>(request, options);}",
    "output": "public GetDetectorsResult getDetectors(GetDetectorsRequest request) {request = beforeClientExecution(request);return executeGetDetectors(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String fromDouble(Double d) {return Double.toString(d);}",
    "output": "public static string FromDouble(double value){return value.ToString(CultureInfo.InvariantCulture);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string FromDouble(double value){return value.ToString(CultureInfo.InvariantCulture);}",
    "output": "public static String fromDouble(Double d) {return Double.toString(d);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void writeProtectWorkbook( String password, String username ) {FileSharingRecord frec = getFileSharing();WriteAccessRecord waccess = getWriteAccess(); getWriteProtect();frec.setReadOnly((short)1);frec.setPassword((short)CryptoFunctions.createXorVerifier1(password));frec.setUsername(username);waccess.setUsername(username);}",
    "output": "public void WriteProtectWorkbook(String password, String username){FileSharingRecord frec = FileSharing;WriteAccessRecord waccess = WriteAccess;frec.ReadOnly=((short)1);frec.Password=(FileSharingRecord.HashPassword(password));frec.Username=(username);waccess.Username=(username);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void WriteProtectWorkbook(String password, String username){FileSharingRecord frec = FileSharing;WriteAccessRecord waccess = WriteAccess;frec.ReadOnly=((short)1);frec.Password=(FileSharingRecord.HashPassword(password));frec.Username=(username);waccess.Username=(username);}",
    "output": "public void writeProtectWorkbook( String password, String username ) {FileSharingRecord frec = getFileSharing();WriteAccessRecord waccess = getWriteAccess(); getWriteProtect();frec.setReadOnly((short)1);frec.setPassword((short)CryptoFunctions.createXorVerifier1(password));frec.setUsername(username);waccess.setUsername(username);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Process exec(String command, int timeout)throws TransportException {String ssh = SystemReader.getInstance().getenv(\"GIT_SSH\"); boolean putty = ssh.toLowerCase(Locale.ROOT).contains(\"plink\"); List<String> args = new ArrayList<>();args.add(ssh);if (putty&& !ssh.toLowerCase(Locale.ROOT).contains(\"tortoiseplink\")) args.add(\"-batch\"); if (0 < getURI().getPort()) {args.add(putty ? \"-P\" : \"-p\"); args.add(String.valueOf(getURI().getPort()));}if (getURI().getUser() != null)args.add(getURI().getUser() + \"@\" + getURI().getHost()); elseargs.add(getURI().getHost());args.add(command);ProcessBuilder pb = createProcess(args);try {return pb.start();} catch (IOException err) {throw new TransportException(err.getMessage(), err);}}",
    "output": "public virtual SystemProcess Exec(string command, int timeout){string ssh = SystemReader.GetInstance().Getenv(\"GIT_SSH\");bool putty = ssh.ToLower().Contains(\"plink\");IList<string> args = new AList<string>();args.AddItem(ssh);if (putty && !ssh.ToLower().Contains(\"tortoiseplink\")){args.AddItem(\"-batch\");}if (0 < this._enclosing.GetURI().GetPort()){args.AddItem(putty ? \"-P\" : \"-p\");args.AddItem(this._enclosing.GetURI().GetPort().ToString());}if (this._enclosing.GetURI().GetUser() != null){args.AddItem(this._enclosing.GetURI().GetUser() + \"@\" + this._enclosing.GetURI().GetHost());}else{args.AddItem(this._enclosing.GetURI().GetHost());}args.AddItem(command);ProcessStartInfo pb = new ProcessStartInfo();pb.SetCommand(args);if (this._enclosing.local.Directory != null){pb.EnvironmentVariables.Put(Constants.GIT_DIR_KEY, this._enclosing.local.Directory.GetPath());}try{return pb.Start();}catch (IOException err){throw new TransportException(err.Message, err);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SystemProcess Exec(string command, int timeout){string ssh = SystemReader.GetInstance().Getenv(\"GIT_SSH\");bool putty = ssh.ToLower().Contains(\"plink\");IList<string> args = new AList<string>();args.AddItem(ssh);if (putty && !ssh.ToLower().Contains(\"tortoiseplink\")){args.AddItem(\"-batch\");}if (0 < this._enclosing.GetURI().GetPort()){args.AddItem(putty ? \"-P\" : \"-p\");args.AddItem(this._enclosing.GetURI().GetPort().ToString());}if (this._enclosing.GetURI().GetUser() != null){args.AddItem(this._enclosing.GetURI().GetUser() + \"@\" + this._enclosing.GetURI().GetHost());}else{args.AddItem(this._enclosing.GetURI().GetHost());}args.AddItem(command);ProcessStartInfo pb = new ProcessStartInfo();pb.SetCommand(args);if (this._enclosing.local.Directory != null){pb.EnvironmentVariables.Put(Constants.GIT_DIR_KEY, this._enclosing.local.Directory.GetPath());}try{return pb.Start();}catch (IOException err){throw new TransportException(err.Message, err);}}",
    "output": "public Process exec(String command, int timeout)throws TransportException {String ssh = SystemReader.getInstance().getenv(\"GIT_SSH\"); boolean putty = ssh.toLowerCase(Locale.ROOT).contains(\"plink\"); List<String> args = new ArrayList<>();args.add(ssh);if (putty&& !ssh.toLowerCase(Locale.ROOT).contains(\"tortoiseplink\")) args.add(\"-batch\"); if (0 < getURI().getPort()) {args.add(putty ? \"-P\" : \"-p\"); args.add(String.valueOf(getURI().getPort()));}if (getURI().getUser() != null)args.add(getURI().getUser() + \"@\" + getURI().getHost()); elseargs.add(getURI().getHost());args.add(command);ProcessBuilder pb = createProcess(args);try {return pb.start();} catch (IOException err) {throw new TransportException(err.getMessage(), err);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.write(recordData);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.Write(recordData);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.Write(recordData);}",
    "output": "public void serialize(LittleEndianOutput out) {out.write(recordData);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateFleetCapacityResult updateFleetCapacity(UpdateFleetCapacityRequest request) {request = beforeClientExecution(request);return executeUpdateFleetCapacity(request);}",
    "output": "public virtual UpdateFleetCapacityResponse UpdateFleetCapacity(UpdateFleetCapacityRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateFleetCapacityRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateFleetCapacityResponseUnmarshaller.Instance;return Invoke<UpdateFleetCapacityResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateFleetCapacityResponse UpdateFleetCapacity(UpdateFleetCapacityRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateFleetCapacityRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateFleetCapacityResponseUnmarshaller.Instance;return Invoke<UpdateFleetCapacityResponse>(request, options);}",
    "output": "public UpdateFleetCapacityResult updateFleetCapacity(UpdateFleetCapacityRequest request) {request = beforeClientExecution(request);return executeUpdateFleetCapacity(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateDirectConnectGatewayAssociationResult createDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request) {request = beforeClientExecution(request);return executeCreateDirectConnectGatewayAssociation(request);}",
    "output": "public virtual CreateDirectConnectGatewayAssociationResponse CreateDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDirectConnectGatewayAssociationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDirectConnectGatewayAssociationResponseUnmarshaller.Instance;return Invoke<CreateDirectConnectGatewayAssociationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateDirectConnectGatewayAssociationResponse CreateDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDirectConnectGatewayAssociationRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDirectConnectGatewayAssociationResponseUnmarshaller.Instance;return Invoke<CreateDirectConnectGatewayAssociationResponse>(request, options);}",
    "output": "public CreateDirectConnectGatewayAssociationResult createDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request) {request = beforeClientExecution(request);return executeCreateDirectConnectGatewayAssociation(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TokenStream create(TokenStream input) {if (words == null) {return input;} else {final TokenStream filter = new KeepWordFilter(input, words);return filter;}}",
    "output": "public override TokenStream Create(TokenStream input){if (words == null){return input;}else{TokenStream filter = new KeepWordFilter(m_luceneMatchVersion, enablePositionIncrements, input, words);return filter;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TokenStream Create(TokenStream input){if (words == null){return input;}else{TokenStream filter = new KeepWordFilter(m_luceneMatchVersion, enablePositionIncrements, input, words);return filter;}}",
    "output": "public TokenStream create(TokenStream input) {if (words == null) {return input;} else {final TokenStream filter = new KeepWordFilter(input, words);return filter;}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final int getEndA() {return endA;}",
    "output": "public int GetEndA(){return endA;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int GetEndA(){return endA;}",
    "output": "public final int getEndA() {return endA;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getStrictHostKeyChecking() {return strictHostKeyChecking;}",
    "output": "public virtual string GetStrictHostKeyChecking(){return strictHostKeyChecking;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual string GetStrictHostKeyChecking(){return strictHostKeyChecking;}",
    "output": "public String getStrictHostKeyChecking() {return strictHostKeyChecking;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Lift(boolean changeSkip) {this.changeSkip = changeSkip;}",
    "output": "public Lift(bool changeSkip){this.changeSkip = changeSkip;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public Lift(bool changeSkip){this.changeSkip = changeSkip;}",
    "output": "public Lift(boolean changeSkip) {this.changeSkip = changeSkip;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_precision);}",
    "output": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_precision);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Serialize(ILittleEndianOutput out1){out1.WriteShort(field_1_precision);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_precision);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetAuthorizerResult getAuthorizer(GetAuthorizerRequest request) {request = beforeClientExecution(request);return executeGetAuthorizer(request);}",
    "output": "public virtual GetAuthorizerResponse GetAuthorizer(GetAuthorizerRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAuthorizerRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAuthorizerResponseUnmarshaller.Instance;return Invoke<GetAuthorizerResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetAuthorizerResponse GetAuthorizer(GetAuthorizerRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAuthorizerRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAuthorizerResponseUnmarshaller.Instance;return Invoke<GetAuthorizerResponse>(request, options);}",
    "output": "public GetAuthorizerResult getAuthorizer(GetAuthorizerRequest request) {request = beforeClientExecution(request);return executeGetAuthorizer(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public StringCharacterIterator(String value, int start, int end, int location) {string = value;if (start < 0 || end > string.length() || start > end|| location < start || location > end) {throw new IllegalArgumentException();}this.start = start;this.end = end;offset = location;}",
    "output": "public StringCharacterIterator(string value, int start, int end, int location){@string = value;if (start < 0 || end > @string.Length || start > end || location < start || location> end){throw new System.ArgumentException();}this.start = start;this.end = end;offset = location;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public StringCharacterIterator(string value, int start, int end, int location){@string = value;if (start < 0 || end > @string.Length || start > end || location < start || location> end){throw new System.ArgumentException();}this.start = start;this.end = end;offset = location;}",
    "output": "public StringCharacterIterator(String value, int start, int end, int location) {string = value;if (start < 0 || end > string.length() || start > end|| location < start || location > end) {throw new IllegalArgumentException();}this.start = start;this.end = end;offset = location;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder buf = new StringBuilder();buf.append(\"ObjectToPack[\");buf.append(Constants.typeString(getType()));buf.append(\" \");buf.append(name());if (wantWrite())buf.append(\" wantWrite\");if (isReuseAsIs())buf.append(\" reuseAsIs\");if (isDoNotDelta())buf.append(\" doNotDelta\");if (isEdge())buf.append(\" edge\");if (getDeltaDepth() > 0)buf.append(\" depth=\").append(getDeltaDepth());if (isDeltaRepresentation()) {if (getDeltaBase() != null)buf.append(\" base=inpack:\").append(getDeltaBase().name());elsebuf.append(\" base=edge:\").append(getDeltaBaseId().name());}if (isWritten())buf.append(\" offset=\").append(getOffset());buf.append(\"]\");return buf.toString();}",
    "output": "public override string ToString(){StringBuilder buf = new StringBuilder();buf.Append(\"ObjectToPack[\");buf.Append(Constants.TypeString(GetType()));buf.Append(\" \");buf.Append(Name);if (WantWrite()){buf.Append(\" wantWrite\");}if (IsReuseAsIs()){buf.Append(\" reuseAsIs\");}if (IsDoNotDelta()){buf.Append(\" doNotDelta\");}if (IsEdge()){buf.Append(\" edge\");}if (GetDeltaDepth() > 0){buf.Append(\" depth=\" + GetDeltaDepth());}if (IsDeltaRepresentation()){if (GetDeltaBase() != null){buf.Append(\" base=inpack:\" + GetDeltaBase().Name);}else{buf.Append(\" base=edge:\" + GetDeltaBaseId().Name);}}if (IsWritten()){buf.Append(\" offset=\" + GetOffset());}buf.Append(\"]\");return buf.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){StringBuilder buf = new StringBuilder();buf.Append(\"ObjectToPack[\");buf.Append(Constants.TypeString(GetType()));buf.Append(\" \");buf.Append(Name);if (WantWrite()){buf.Append(\" wantWrite\");}if (IsReuseAsIs()){buf.Append(\" reuseAsIs\");}if (IsDoNotDelta()){buf.Append(\" doNotDelta\");}if (IsEdge()){buf.Append(\" edge\");}if (GetDeltaDepth() > 0){buf.Append(\" depth=\" + GetDeltaDepth());}if (IsDeltaRepresentation()){if (GetDeltaBase() != null){buf.Append(\" base=inpack:\" + GetDeltaBase().Name);}else{buf.Append(\" base=edge:\" + GetDeltaBaseId().Name);}}if (IsWritten()){buf.Append(\" offset=\" + GetOffset());}buf.Append(\"]\");return buf.ToString();}",
    "output": "public String toString() {StringBuilder buf = new StringBuilder();buf.append(\"ObjectToPack[\");buf.append(Constants.typeString(getType()));buf.append(\" \");buf.append(name());if (wantWrite())buf.append(\" wantWrite\");if (isReuseAsIs())buf.append(\" reuseAsIs\");if (isDoNotDelta())buf.append(\" doNotDelta\");if (isEdge())buf.append(\" edge\");if (getDeltaDepth() > 0)buf.append(\" depth=\").append(getDeltaDepth());if (isDeltaRepresentation()) {if (getDeltaBase() != null)buf.append(\" base=inpack:\").append(getDeltaBase().name());elsebuf.append(\" base=edge:\").append(getDeltaBaseId().name());}if (isWritten())buf.append(\" offset=\").append(getOffset());buf.append(\"]\");return buf.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return \"1\";}",
    "output": "public override string ToString(){return \"1\";}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){return \"1\";}",
    "output": "public String toString() {return \"1\";}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final void readFully(byte[] dst, int offset, int byteCount) throws IOException {Streams.readFully(in, dst, offset, byteCount);}",
    "output": "public virtual void readFully(byte[] dst, int offset, int byteCount){throw new System.NotImplementedException();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void readFully(byte[] dst, int offset, int byteCount){throw new System.NotImplementedException();}",
    "output": "public final void readFully(byte[] dst, int offset, int byteCount) throws IOException {Streams.readFully(in, dst, offset, byteCount);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetMailboxDetailsResult getMailboxDetails(GetMailboxDetailsRequest request) {request = beforeClientExecution(request);return executeGetMailboxDetails(request);}",
    "output": "public virtual GetMailboxDetailsResponse GetMailboxDetails(GetMailboxDetailsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetMailboxDetailsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetMailboxDetailsResponseUnmarshaller.Instance;return Invoke<GetMailboxDetailsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetMailboxDetailsResponse GetMailboxDetails(GetMailboxDetailsRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetMailboxDetailsRequestMarshaller.Instance;options.ResponseUnmarshaller = GetMailboxDetailsResponseUnmarshaller.Instance;return Invoke<GetMailboxDetailsResponse>(request, options);}",
    "output": "public GetMailboxDetailsResult getMailboxDetails(GetMailboxDetailsRequest request) {request = beforeClientExecution(request);return executeGetMailboxDetails(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharBuffer append(CharSequence csq) {if (csq != null) {return put(csq.toString());}return put(\"null\");}",
    "output": "public virtual java.nio.CharBuffer append(java.lang.CharSequence csq){if (csq != null){return put(csq.ToString());}return put(\"null\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.nio.CharBuffer append(java.lang.CharSequence csq){if (csq != null){return put(csq.ToString());}return put(\"null\");}",
    "output": "public CharBuffer append(CharSequence csq) {if (csq != null) {return put(csq.toString());}return put(\"null\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RegisterFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"RegisterFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}",
    "output": "public RegisterFaceRequest(): base(\"LinkFace\", \"2018-07-20\", \"RegisterFace\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RegisterFaceRequest(): base(\"LinkFace\", \"2018-07-20\", \"RegisterFace\"){Protocol = ProtocolType.HTTPS;Method = MethodType.POST;}",
    "output": "public RegisterFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"RegisterFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static void checkValue(double result) throws EvaluationException {if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}}",
    "output": "public static void CheckValue(double result){if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static void CheckValue(double result){if (Double.IsNaN(result) || Double.IsInfinity(result)){throw new EvaluationException(ErrorEval.NUM_ERROR);}}",
    "output": "public static void checkValue(double result) throws EvaluationException {if (Double.isNaN(result) || Double.isInfinite(result)) {throw new EvaluationException(ErrorEval.NUM_ERROR);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PutInvitationConfigurationResult putInvitationConfiguration(PutInvitationConfigurationRequest request) {request = beforeClientExecution(request);return executePutInvitationConfiguration(request);}",
    "output": "public virtual PutInvitationConfigurationResponse PutInvitationConfiguration(PutInvitationConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutInvitationConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutInvitationConfigurationResponseUnmarshaller.Instance;return Invoke<PutInvitationConfigurationResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual PutInvitationConfigurationResponse PutInvitationConfiguration(PutInvitationConfigurationRequest request){var options = new InvokeOptions();options.RequestMarshaller = PutInvitationConfigurationRequestMarshaller.Instance;options.ResponseUnmarshaller = PutInvitationConfigurationResponseUnmarshaller.Instance;return Invoke<PutInvitationConfigurationResponse>(request, options);}",
    "output": "public PutInvitationConfigurationResult putInvitationConfiguration(PutInvitationConfigurationRequest request) {request = beforeClientExecution(request);return executePutInvitationConfiguration(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public QueryNode process(QueryNode queryTree) throws QueryNodeException {Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null) {throw new IllegalArgumentException(\"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");}this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;return super.process(queryTree);}",
    "output": "public override IQueryNode Process(IQueryNode queryTree){Operator? op = GetQueryConfigHandler().Get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null){throw new ArgumentException(\"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");}this.usingAnd = Operator.AND == op;return base.Process(queryTree);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override IQueryNode Process(IQueryNode queryTree){Operator? op = GetQueryConfigHandler().Get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null){throw new ArgumentException(\"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");}this.usingAnd = Operator.AND == op;return base.Process(queryTree);}",
    "output": "public QueryNode process(QueryNode queryTree) throws QueryNodeException {Operator op = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);if (op == null) {throw new IllegalArgumentException(\"StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR should be set on the QueryConfigHandler\");}this.usingAnd = StandardQueryConfigHandler.Operator.AND == op;return super.process(queryTree);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void add(BytesRef utf8, int bucket) throws IOException {if (bucket < 0 || bucket >= buckets) {throw new IllegalArgumentException(\"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);}scratch.grow(utf8.length + 10);scratch.clear();scratch.append((byte) bucket);scratch.append(utf8);sorter.add(scratch.get());}",
    "output": "public virtual void Add(BytesRef utf8, int bucket){if (bucket < 0 || bucket >= buckets){throw new ArgumentException(\"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);}if (scratch.Bytes.Length < utf8.Length + 1){scratch.Grow(utf8.Length + 10);}scratch.Length = 1;scratch.Bytes[0] = (byte)bucket;scratch.Append(utf8);sorter.Add(scratch);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Add(BytesRef utf8, int bucket){if (bucket < 0 || bucket >= buckets){throw new ArgumentException(\"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);}if (scratch.Bytes.Length < utf8.Length + 1){scratch.Grow(utf8.Length + 10);}scratch.Length = 1;scratch.Bytes[0] = (byte)bucket;scratch.Append(utf8);sorter.Add(scratch);}",
    "output": "public void add(BytesRef utf8, int bucket) throws IOException {if (bucket < 0 || bucket >= buckets) {throw new IllegalArgumentException(\"Bucket outside of the allowed range [0, \" + buckets + \"): \" + bucket);}scratch.grow(utf8.length + 10);scratch.clear();scratch.append((byte) bucket);scratch.append(utf8);sorter.add(scratch.get());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeWorkspaceBundlesResult describeWorkspaceBundles() {return describeWorkspaceBundles(new DescribeWorkspaceBundlesRequest());}",
    "output": "public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles(){var request = new DescribeWorkspaceBundlesRequest();return DescribeWorkspaceBundles(request);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeWorkspaceBundlesResponse DescribeWorkspaceBundles(){var request = new DescribeWorkspaceBundlesRequest();return DescribeWorkspaceBundles(request);}",
    "output": "public DescribeWorkspaceBundlesResult describeWorkspaceBundles() {return describeWorkspaceBundles(new DescribeWorkspaceBundlesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static String decode(String s) {return decode(s, false, Charsets.UTF_8);}",
    "output": "public static string decode(string s){return decode(s, false, java.nio.charset.Charsets.UTF_8);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static string decode(string s){return decode(s, false, java.nio.charset.Charsets.UTF_8);}",
    "output": "public static String decode(String s) {return decode(s, false, Charsets.UTF_8);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setExpire(Date expire) {this.expire = expire;expireAgeMillis = -1;}",
    "output": "public virtual void SetExpire(DateTime expire){this.expire = expire;expireAgeMillis = -1;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetExpire(DateTime expire){this.expire = expire;expireAgeMillis = -1;}",
    "output": "public void setExpire(Date expire) {this.expire = expire;expireAgeMillis = -1;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int DecRef() {assert count > 0: Thread.currentThread().getName() + \": RefCount is 0 pre-decrement for file \\\"\" + fileName + \"\\\"\";return --count;}",
    "output": "public int DecRef(){Debug.Assert(count > 0, Thread.CurrentThread.Name + \": RefCount is 0 pre-decrement for file \\\"\" + fileName + \"\\\"\");return --count;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int DecRef(){Debug.Assert(count > 0, Thread.CurrentThread.Name + \": RefCount is 0 pre-decrement for file \\\"\" + fileName + \"\\\"\");return --count;}",
    "output": "public int DecRef() {assert count > 0: Thread.currentThread().getName() + \": RefCount is 0 pre-decrement for file \\\"\" + fileName + \"\\\"\";return --count;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {return src;}",
    "output": "public override IList<WeightedFragInfo> GetWeightedFragInfoList(IList<WeightedFragInfo> src){return src;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override IList<WeightedFragInfo> GetWeightedFragInfoList(IList<WeightedFragInfo> src){return src;}",
    "output": "public List<WeightedFragInfo> getWeightedFragInfoList( List<WeightedFragInfo> src ) {return src;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateInstancesFromSnapshotResult createInstancesFromSnapshot(CreateInstancesFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstancesFromSnapshot(request);}",
    "output": "public virtual CreateInstancesFromSnapshotResponse CreateInstancesFromSnapshot(CreateInstancesFromSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateInstancesFromSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateInstancesFromSnapshotResponseUnmarshaller.Instance;return Invoke<CreateInstancesFromSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateInstancesFromSnapshotResponse CreateInstancesFromSnapshot(CreateInstancesFromSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateInstancesFromSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateInstancesFromSnapshotResponseUnmarshaller.Instance;return Invoke<CreateInstancesFromSnapshotResponse>(request, options);}",
    "output": "public CreateInstancesFromSnapshotResult createInstancesFromSnapshot(CreateInstancesFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateInstancesFromSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public Comparator<? super E> comparator() {return backingMap.comparator();}",
    "output": "public virtual java.util.Comparator<E> comparator(){return backingMap.comparator();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.util.Comparator<E> comparator(){return backingMap.comparator();}",
    "output": "public Comparator<? super E> comparator() {return backingMap.comparator();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean isValueSecure() {return valueSecure;}",
    "output": "public virtual bool IsValueSecure(){return valueSecure;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual bool IsValueSecure(){return valueSecure;}",
    "output": "public boolean isValueSecure() {return valueSecure;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static short[] grow(short[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Short.BYTES));} else return array;}",
    "output": "public static short[] Grow(short[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){short[] newArray = new short[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT16)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static short[] Grow(short[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){short[] newArray = new short[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT16)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}",
    "output": "public static short[] grow(short[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Short.BYTES));} else return array;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ObjectId idFor(int type, byte[] data) {return idFor(type, data, 0, data.length);}",
    "output": "public override ObjectId IdFor(int type, byte[] data){return Delegate().IdFor(type, data);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override ObjectId IdFor(int type, byte[] data){return Delegate().IdFor(type, data);}",
    "output": "public ObjectId idFor(int type, byte[] data) {return idFor(type, data, 0, data.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateDomainNameResult createDomainName(CreateDomainNameRequest request) {request = beforeClientExecution(request);return executeCreateDomainName(request);}",
    "output": "public virtual CreateDomainNameResponse CreateDomainName(CreateDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDomainNameResponseUnmarshaller.Instance;return Invoke<CreateDomainNameResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateDomainNameResponse CreateDomainName(CreateDomainNameRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateDomainNameRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateDomainNameResponseUnmarshaller.Instance;return Invoke<CreateDomainNameResponse>(request, options);}",
    "output": "public CreateDomainNameResult createDomainName(CreateDomainNameRequest request) {request = beforeClientExecution(request);return executeCreateDomainName(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteAddressBookResult deleteAddressBook(DeleteAddressBookRequest request) {request = beforeClientExecution(request);return executeDeleteAddressBook(request);}",
    "output": "public virtual DeleteAddressBookResponse DeleteAddressBook(DeleteAddressBookRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAddressBookRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAddressBookResponseUnmarshaller.Instance;return Invoke<DeleteAddressBookResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteAddressBookResponse DeleteAddressBook(DeleteAddressBookRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteAddressBookRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteAddressBookResponseUnmarshaller.Instance;return Invoke<DeleteAddressBookResponse>(request, options);}",
    "output": "public DeleteAddressBookResult deleteAddressBook(DeleteAddressBookRequest request) {request = beforeClientExecution(request);return executeDeleteAddressBook(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void addToolPack(UDFFinder toopack){AggregatingUDFFinder udfs = (AggregatingUDFFinder)_udfFinder;udfs.add(toopack);}",
    "output": "public void AddToolPack(UDFFinder toopack){AggregatingUDFFinder udfs = (AggregatingUDFFinder)_udfFinder;udfs.Add(toopack);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void AddToolPack(UDFFinder toopack){AggregatingUDFFinder udfs = (AggregatingUDFFinder)_udfFinder;udfs.Add(toopack);}",
    "output": "public void addToolPack(UDFFinder toopack){AggregatingUDFFinder udfs = (AggregatingUDFFinder)_udfFinder;udfs.add(toopack);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SearchUsersResult searchUsers(SearchUsersRequest request) {request = beforeClientExecution(request);return executeSearchUsers(request);}",
    "output": "public virtual SearchUsersResponse SearchUsers(SearchUsersRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchUsersRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchUsersResponseUnmarshaller.Instance;return Invoke<SearchUsersResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SearchUsersResponse SearchUsers(SearchUsersRequest request){var options = new InvokeOptions();options.RequestMarshaller = SearchUsersRequestMarshaller.Instance;options.ResponseUnmarshaller = SearchUsersResponseUnmarshaller.Instance;return Invoke<SearchUsersResponse>(request, options);}",
    "output": "public SearchUsersResult searchUsers(SearchUsersRequest request) {request = beforeClientExecution(request);return executeSearchUsers(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String getAccessKeySecret() {return privateKeySecret;}",
    "output": "public string GetAccessKeySecret(){return privateKeySecret;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public string GetAccessKeySecret(){return privateKeySecret;}",
    "output": "public String getAccessKeySecret() {return privateKeySecret;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setValueAt(int index, E value) {if (mGarbage) {gc();}mValues[index] = value;}",
    "output": "public virtual void setValueAt(int index, E value){if (mGarbage){gc();}mValues[index] = value;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void setValueAt(int index, E value){if (mGarbage){gc();}mValues[index] = value;}",
    "output": "public void setValueAt(int index, E value) {if (mGarbage) {gc();}mValues[index] = value;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public RefErrorPtg() {field_1_reserved = 0;}",
    "output": "public RefErrorPtg(){field_1_reserved = 0;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public RefErrorPtg(){field_1_reserved = 0;}",
    "output": "public RefErrorPtg() {field_1_reserved = 0;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean getFlagByBit(int bitmask) {return ((flags & bitmask) != 0);}",
    "output": "public bool GetFlagByBit(int bitmask){return ((flags & bitmask) != 0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public bool GetFlagByBit(int bitmask){return ((flags & bitmask) != 0);}",
    "output": "public boolean getFlagByBit(int bitmask) {return ((flags & bitmask) != 0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateAccountSendingEnabledResult updateAccountSendingEnabled(UpdateAccountSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateAccountSendingEnabled(request);}",
    "output": "public virtual UpdateAccountSendingEnabledResponse UpdateAccountSendingEnabled(UpdateAccountSendingEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateAccountSendingEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateAccountSendingEnabledResponseUnmarshaller.Instance;return Invoke<UpdateAccountSendingEnabledResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateAccountSendingEnabledResponse UpdateAccountSendingEnabled(UpdateAccountSendingEnabledRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateAccountSendingEnabledRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateAccountSendingEnabledResponseUnmarshaller.Instance;return Invoke<UpdateAccountSendingEnabledResponse>(request, options);}",
    "output": "public UpdateAccountSendingEnabledResult updateAccountSendingEnabled(UpdateAccountSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateAccountSendingEnabled(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public AppCookieStickinessPolicy(String policyName, String cookieName) {setPolicyName(policyName);setCookieName(cookieName);}",
    "output": "public AppCookieStickinessPolicy(string policyName, string cookieName){_policyName = policyName;_cookieName = cookieName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public AppCookieStickinessPolicy(string policyName, string cookieName){_policyName = policyName;_cookieName = cookieName;}",
    "output": "public AppCookieStickinessPolicy(String policyName, String cookieName) {setPolicyName(policyName);setCookieName(cookieName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public GetAccountBalanceResult getAccountBalance(GetAccountBalanceRequest request) {request = beforeClientExecution(request);return executeGetAccountBalance(request);}",
    "output": "public virtual GetAccountBalanceResponse GetAccountBalance(GetAccountBalanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAccountBalanceRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAccountBalanceResponseUnmarshaller.Instance;return Invoke<GetAccountBalanceResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual GetAccountBalanceResponse GetAccountBalance(GetAccountBalanceRequest request){var options = new InvokeOptions();options.RequestMarshaller = GetAccountBalanceRequestMarshaller.Instance;options.ResponseUnmarshaller = GetAccountBalanceResponseUnmarshaller.Instance;return Invoke<GetAccountBalanceResponse>(request, options);}",
    "output": "public GetAccountBalanceResult getAccountBalance(GetAccountBalanceRequest request) {request = beforeClientExecution(request);return executeGetAccountBalance(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeConversionTasksResult describeConversionTasks(DescribeConversionTasksRequest request) {request = beforeClientExecution(request);return executeDescribeConversionTasks(request);}",
    "output": "public virtual DescribeConversionTasksResponse DescribeConversionTasks(DescribeConversionTasksRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeConversionTasksRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeConversionTasksResponseUnmarshaller.Instance;return Invoke<DescribeConversionTasksResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeConversionTasksResponse DescribeConversionTasks(DescribeConversionTasksRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeConversionTasksRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeConversionTasksResponseUnmarshaller.Instance;return Invoke<DescribeConversionTasksResponse>(request, options);}",
    "output": "public DescribeConversionTasksResult describeConversionTasks(DescribeConversionTasksRequest request) {request = beforeClientExecution(request);return executeDescribeConversionTasks(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeImagesResult describeImages() {return describeImages(new DescribeImagesRequest());}",
    "output": "public virtual DescribeImagesResponse DescribeImages(){return DescribeImages(new DescribeImagesRequest());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeImagesResponse DescribeImages(){return DescribeImages(new DescribeImagesRequest());}",
    "output": "public DescribeImagesResult describeImages() {return describeImages(new DescribeImagesRequest());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void close() {_closed = true;}",
    "output": "public override void Close(){delegate1.Close();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override void Close(){delegate1.Close();}",
    "output": "public void close() {_closed = true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListSignalingChannelsResult listSignalingChannels(ListSignalingChannelsRequest request) {request = beforeClientExecution(request);return executeListSignalingChannels(request);}",
    "output": "public virtual ListSignalingChannelsResponse ListSignalingChannels(ListSignalingChannelsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSignalingChannelsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSignalingChannelsResponseUnmarshaller.Instance;return Invoke<ListSignalingChannelsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListSignalingChannelsResponse ListSignalingChannels(ListSignalingChannelsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListSignalingChannelsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListSignalingChannelsResponseUnmarshaller.Instance;return Invoke<ListSignalingChannelsResponse>(request, options);}",
    "output": "public ListSignalingChannelsResult listSignalingChannels(ListSignalingChannelsRequest request) {request = beforeClientExecution(request);return executeListSignalingChannels(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public MergeFacesRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"MergeFaces\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}",
    "output": "public MergeFacesRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"MergeFaces\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public MergeFacesRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"MergeFaces\", \"cloudphoto\", \"openAPI\"){Protocol = ProtocolType.HTTPS;}",
    "output": "public MergeFacesRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"MergeFaces\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DetectTextResult detectText(DetectTextRequest request) {request = beforeClientExecution(request);return executeDetectText(request);}",
    "output": "public virtual DetectTextResponse DetectText(DetectTextRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetectTextRequestMarshaller.Instance;options.ResponseUnmarshaller = DetectTextResponseUnmarshaller.Instance;return Invoke<DetectTextResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DetectTextResponse DetectText(DetectTextRequest request){var options = new InvokeOptions();options.RequestMarshaller = DetectTextRequestMarshaller.Instance;options.ResponseUnmarshaller = DetectTextResponseUnmarshaller.Instance;return Invoke<DetectTextResponse>(request, options);}",
    "output": "public DetectTextResult detectText(DetectTextRequest request) {request = beforeClientExecution(request);return executeDetectText(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DoubleBuffer get(double[] dst) {return get(dst, 0, dst.length);}",
    "output": "public virtual java.nio.DoubleBuffer get(double[] dst){return get(dst, 0, dst.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual java.nio.DoubleBuffer get(double[] dst){return get(dst, 0, dst.Length);}",
    "output": "public DoubleBuffer get(double[] dst) {return get(dst, 0, dst.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public long getCreationTime() {return decodeTS(P_CTIME);}",
    "output": "public virtual long GetCreationTime(){return DecodeTS(P_CTIME);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual long GetCreationTime(){return DecodeTS(P_CTIME);}",
    "output": "public long getCreationTime() {return decodeTS(P_CTIME);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public TreeFilter clone() {return new Binary(a.clone(), b.clone());}",
    "output": "public override TreeFilter Clone(){return new AndTreeFilter.Binary(a.Clone(), b.Clone());}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override TreeFilter Clone(){return new AndTreeFilter.Binary(a.Clone(), b.Clone());}",
    "output": "public TreeFilter clone() {return new Binary(a.clone(), b.clone());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ByteBuffer putChar(char value) {int newPosition = position + SizeOf.CHAR;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeShort(backingArray, offset + position, (short) value, order);position = newPosition;return this;}",
    "output": "public override java.nio.ByteBuffer putChar(char value){int newPosition = _position + libcore.io.SizeOf.CHAR;if (newPosition > _limit){throw new java.nio.BufferOverflowException();}libcore.io.Memory.pokeShort(backingArray, offset + _position, (short)value, _order);_position = newPosition;return this;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override java.nio.ByteBuffer putChar(char value){int newPosition = _position + libcore.io.SizeOf.CHAR;if (newPosition > _limit){throw new java.nio.BufferOverflowException();}libcore.io.Memory.pokeShort(backingArray, offset + _position, (short)value, _order);_position = newPosition;return this;}",
    "output": "public ByteBuffer putChar(char value) {int newPosition = position + SizeOf.CHAR;if (newPosition > limit) {throw new BufferOverflowException();}Memory.pokeShort(backingArray, offset + position, (short) value, order);position = newPosition;return this;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {return String.format(\"Rect [(%d,%d)-(%d,%d): %dx%d]\", x, y, x + w, y + h, w, h);}",
    "output": "public override string ToString(){java.lang.StringBuilder sb = new java.lang.StringBuilder(32);sb.append(\"Rect(\");sb.append(left);sb.append(\", \");sb.append(top);sb.append(\" - \");sb.append(right);sb.append(\", \");sb.append(bottom);sb.append(\")\");return sb.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override string ToString(){java.lang.StringBuilder sb = new java.lang.StringBuilder(32);sb.append(\"Rect(\");sb.append(left);sb.append(\", \");sb.append(top);sb.append(\" - \");sb.append(right);sb.append(\", \");sb.append(bottom);sb.append(\")\");return sb.ToString();}",
    "output": "public String toString() {return String.format(\"Rect [(%d,%d)-(%d,%d): %dx%d]\", x, y, x + w, y + h, w, h);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static LongBuffer wrap(long[] array) {return wrap(array, 0, array.length);}",
    "output": "public static java.nio.LongBuffer wrap(long[] array_1){return wrap(array_1, 0, array_1.Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static java.nio.LongBuffer wrap(long[] array_1){return wrap(array_1, 0, array_1.Length);}",
    "output": "public static LongBuffer wrap(long[] array) {return wrap(array, 0, array.length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CharsRef clone() {return new CharsRef(chars, offset, length);}",
    "output": "public object Clone(){return new CharsRef(chars, Offset, Length);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public object Clone(){return new CharsRef(chars, Offset, Length);}",
    "output": "public CharsRef clone() {return new CharsRef(chars, offset, length);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SpanNearClauseFactory(IndexReader reader, String fieldName, BasicQueryFactory qf) {this.reader = reader;this.fieldName = fieldName;this.weightBySpanQuery = new HashMap<>();this.qf = qf;}",
    "output": "public SpanNearClauseFactory(IndexReader reader, string fieldName, BasicQueryFactory qf) {this.reader = reader;this.fieldName = fieldName;this.weightBySpanQuery = new JCG.Dictionary<SpanQuery, float>();this.qf = qf;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SpanNearClauseFactory(IndexReader reader, string fieldName, BasicQueryFactory qf) {this.reader = reader;this.fieldName = fieldName;this.weightBySpanQuery = new JCG.Dictionary<SpanQuery, float>();this.qf = qf;}",
    "output": "public SpanNearClauseFactory(IndexReader reader, String fieldName, BasicQueryFactory qf) {this.reader = reader;this.fieldName = fieldName;this.weightBySpanQuery = new HashMap<>();this.qf = qf;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BeginRecord clone() {return copy();}",
    "output": "public override Object Clone(){BeginRecord br = new BeginRecord();return br;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override Object Clone(){BeginRecord br = new BeginRecord();return br;}",
    "output": "public BeginRecord clone() {return copy();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int start() {return start(0);}",
    "output": "public int start(){return start(0);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int start(){return start(0);}",
    "output": "public int start() {return start(0);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeGameSessionQueuesResult describeGameSessionQueues(DescribeGameSessionQueuesRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessionQueues(request);}",
    "output": "public virtual DescribeGameSessionQueuesResponse DescribeGameSessionQueues(DescribeGameSessionQueuesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGameSessionQueuesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGameSessionQueuesResponseUnmarshaller.Instance;return Invoke<DescribeGameSessionQueuesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DescribeGameSessionQueuesResponse DescribeGameSessionQueues(DescribeGameSessionQueuesRequest request){var options = new InvokeOptions();options.RequestMarshaller = DescribeGameSessionQueuesRequestMarshaller.Instance;options.ResponseUnmarshaller = DescribeGameSessionQueuesResponseUnmarshaller.Instance;return Invoke<DescribeGameSessionQueuesResponse>(request, options);}",
    "output": "public DescribeGameSessionQueuesResult describeGameSessionQueues(DescribeGameSessionQueuesRequest request) {request = beforeClientExecution(request);return executeDescribeGameSessionQueues(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SubmitAttachmentStateChangesResult submitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request) {request = beforeClientExecution(request);return executeSubmitAttachmentStateChanges(request);}",
    "output": "public virtual SubmitAttachmentStateChangesResponse SubmitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request){var options = new InvokeOptions();options.RequestMarshaller = SubmitAttachmentStateChangesRequestMarshaller.Instance;options.ResponseUnmarshaller = SubmitAttachmentStateChangesResponseUnmarshaller.Instance;return Invoke<SubmitAttachmentStateChangesResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual SubmitAttachmentStateChangesResponse SubmitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request){var options = new InvokeOptions();options.RequestMarshaller = SubmitAttachmentStateChangesRequestMarshaller.Instance;options.ResponseUnmarshaller = SubmitAttachmentStateChangesResponseUnmarshaller.Instance;return Invoke<SubmitAttachmentStateChangesResponse>(request, options);}",
    "output": "public SubmitAttachmentStateChangesResult submitAttachmentStateChanges(SubmitAttachmentStateChangesRequest request) {request = beforeClientExecution(request);return executeSubmitAttachmentStateChanges(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UnicodeString getString(int id ){return field_3_strings.get( id );}",
    "output": "public UnicodeString GetString(int id){return (UnicodeString)field_3_strings[id];}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public UnicodeString GetString(int id){return (UnicodeString)field_3_strings[id];}",
    "output": "public UnicodeString getString(int id ){return field_3_strings.get( id );}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BigInteger getSignificand() {return _significand;}",
    "output": "public BigInteger GetSignificand(){return _significand;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BigInteger GetSignificand(){return _significand;}",
    "output": "public BigInteger getSignificand() {return _significand;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void join( AbstractEscherHolderRecord record ){rawDataContainer.concatenate(record.getRawData());}",
    "output": "public void Join(AbstractEscherHolderRecord record){rawDataContainer.Concatenate(record.RawData);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Join(AbstractEscherHolderRecord record){rawDataContainer.Concatenate(record.RawData);}",
    "output": "public void join( AbstractEscherHolderRecord record ){rawDataContainer.concatenate(record.getRawData());}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} else return array;}",
    "output": "public static byte[] Grow(byte[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){byte[] newArray = new byte[Oversize(minSize, 1)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public static byte[] Grow(byte[] array, int minSize){Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");if (array.Length < minSize){byte[] newArray = new byte[Oversize(minSize, 1)];Array.Copy(array, 0, newArray, 0, array.Length);return newArray;}else{return array;}}",
    "output": "public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} else return array;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;FlushInfo other = (FlushInfo) obj;if (estimatedSegmentSize != other.estimatedSegmentSize)return false;if (numDocs != other.numDocs)return false;return true;}",
    "output": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}FlushInfo other = (FlushInfo)obj;if (EstimatedSegmentSize != other.EstimatedSegmentSize){return false;}if (NumDocs != other.NumDocs){return false;}return true;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object obj){if (this == obj){return true;}if (obj == null){return false;}if (this.GetType() != obj.GetType()){return false;}FlushInfo other = (FlushInfo)obj;if (EstimatedSegmentSize != other.EstimatedSegmentSize){return false;}if (NumDocs != other.NumDocs){return false;}return true;}",
    "output": "public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;FlushInfo other = (FlushInfo) obj;if (estimatedSegmentSize != other.estimatedSegmentSize)return false;if (numDocs != other.numDocs)return false;return true;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void copyRawTo(int[] b, int o) {b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}",
    "output": "public virtual void CopyRawTo(int[] b, int o){b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void CopyRawTo(int[] b, int o){b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}",
    "output": "public void copyRawTo(int[] b, int o) {b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ReadPipelineResult readPipeline(ReadPipelineRequest request) {request = beforeClientExecution(request);return executeReadPipeline(request);}",
    "output": "public virtual ReadPipelineResponse ReadPipeline(ReadPipelineRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReadPipelineRequestMarshaller.Instance;options.ResponseUnmarshaller = ReadPipelineResponseUnmarshaller.Instance;return Invoke<ReadPipelineResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ReadPipelineResponse ReadPipeline(ReadPipelineRequest request){var options = new InvokeOptions();options.RequestMarshaller = ReadPipelineRequestMarshaller.Instance;options.ResponseUnmarshaller = ReadPipelineResponseUnmarshaller.Instance;return Invoke<ReadPipelineResponse>(request, options);}",
    "output": "public ReadPipelineResult readPipeline(ReadPipelineRequest request) {request = beforeClientExecution(request);return executeReadPipeline(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public BoostQueryNode(QueryNode query, float value) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, \"query\", \"null\"));}this.value = value;setLeaf(false);allocate();add(query);}",
    "output": "public BoostQueryNode(IQueryNode query, float value){if (query == null){throw new QueryNodeError(new Message(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, \"query\", \"null\"));}this.value = value;IsLeaf = false;Allocate();Add(query);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public BoostQueryNode(IQueryNode query, float value){if (query == null){throw new QueryNodeError(new Message(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, \"query\", \"null\"));}this.value = value;IsLeaf = false;Allocate();Add(query);}",
    "output": "public BoostQueryNode(QueryNode query, float value) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED, \"query\", \"null\"));}this.value = value;setLeaf(false);allocate();add(query);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void setFallbackAlgorithm(DiffAlgorithm alg) {fallback = alg;}",
    "output": "public virtual void SetFallbackAlgorithm(DiffAlgorithm alg){fallback = alg;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void SetFallbackAlgorithm(DiffAlgorithm alg){fallback = alg;}",
    "output": "public void setFallbackAlgorithm(DiffAlgorithm alg) {fallback = alg;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void add(Transition t) {find(t.min).starts.add(t);find(1+t.max).ends.add(t);}",
    "output": "public void Add(Transition t){Find(t.min).starts.Add(t);Find(1 + t.max).ends.Add(t);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Add(Transition t){Find(t.min).starts.Add(t);Find(1 + t.max).ends.Add(t);}",
    "output": "public void add(Transition t) {find(t.min).starts.add(t);find(1+t.max).ends.add(t);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\" [FEATURE FORMULA ERRORS]\\n\");buffer.append(\"  checkCalculationErrors    = \");buffer.append(\"  checkEmptyCellRef         = \");buffer.append(\"  checkNumbersAsText        = \");buffer.append(\"  checkInconsistentRanges   = \");buffer.append(\"  checkInconsistentFormulas = \");buffer.append(\"  checkDateTimeFormats      = \");buffer.append(\"  checkUnprotectedFormulas  = \");buffer.append(\"  performDataValidation     = \");buffer.append(\" [/FEATURE FORMULA ERRORS]\\n\");return buffer.toString();}",
    "output": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\" [FEATURE FORMULA ERRORS]\\n\");buffer.Append(\"  checkCalculationErrors    = \");buffer.Append(\"  checkEmptyCellRef         = \");buffer.Append(\"  checkNumbersAsText        = \");buffer.Append(\"  checkInconsistentRanges   = \");buffer.Append(\"  checkInconsistentFormulas = \");buffer.Append(\"  checkDateTimeFormats      = \");buffer.Append(\"  checkUnprotectedFormulas  = \");buffer.Append(\"  performDataValidation     = \");buffer.Append(\" [/FEATURE FORMULA ERRORS]\\n\");return buffer.ToString();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToString(){StringBuilder buffer = new StringBuilder();buffer.Append(\" [FEATURE FORMULA ERRORS]\\n\");buffer.Append(\"  checkCalculationErrors    = \");buffer.Append(\"  checkEmptyCellRef         = \");buffer.Append(\"  checkNumbersAsText        = \");buffer.Append(\"  checkInconsistentRanges   = \");buffer.Append(\"  checkInconsistentFormulas = \");buffer.Append(\"  checkDateTimeFormats      = \");buffer.Append(\"  checkUnprotectedFormulas  = \");buffer.Append(\"  performDataValidation     = \");buffer.Append(\" [/FEATURE FORMULA ERRORS]\\n\");return buffer.ToString();}",
    "output": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\" [FEATURE FORMULA ERRORS]\\n\");buffer.append(\"  checkCalculationErrors    = \");buffer.append(\"  checkEmptyCellRef         = \");buffer.append(\"  checkNumbersAsText        = \");buffer.append(\"  checkInconsistentRanges   = \");buffer.append(\"  checkInconsistentFormulas = \");buffer.append(\"  checkDateTimeFormats      = \");buffer.append(\"  checkUnprotectedFormulas  = \");buffer.append(\"  performDataValidation     = \");buffer.append(\" [/FEATURE FORMULA ERRORS]\\n\");return buffer.toString();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void execute(Lexer lexer) {lexer.setType(type);}",
    "output": "public virtual void Execute(Lexer lexer){lexer.Type = type;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual void Execute(Lexer lexer){lexer.Type = type;}",
    "output": "public void execute(Lexer lexer) {lexer.setType(type);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpgradePublishedSchemaResult upgradePublishedSchema(UpgradePublishedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradePublishedSchema(request);}",
    "output": "public virtual UpgradePublishedSchemaResponse UpgradePublishedSchema(UpgradePublishedSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpgradePublishedSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = UpgradePublishedSchemaResponseUnmarshaller.Instance;return Invoke<UpgradePublishedSchemaResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpgradePublishedSchemaResponse UpgradePublishedSchema(UpgradePublishedSchemaRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpgradePublishedSchemaRequestMarshaller.Instance;options.ResponseUnmarshaller = UpgradePublishedSchemaResponseUnmarshaller.Instance;return Invoke<UpgradePublishedSchemaResponse>(request, options);}",
    "output": "public UpgradePublishedSchemaResult upgradePublishedSchema(UpgradePublishedSchemaRequest request) {request = beforeClientExecution(request);return executeUpgradePublishedSchema(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public int readRecordSID() {readPlain(buffer, 0, LittleEndianConsts.SHORT_SIZE);int sid = LittleEndian.getUShort(buffer, 0);shouldSkipEncryptionOnCurrentRecord = isNeverEncryptedRecord(sid);return sid;}",
    "output": "public int ReadRecordSID(){int sid = _le.ReadUShort();_rc4.SkipTwoBytes();_rc4.StartRecord(sid);return sid;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public int ReadRecordSID(){int sid = _le.ReadUShort();_rc4.SkipTwoBytes();_rc4.StartRecord(sid);return sid;}",
    "output": "public int readRecordSID() {readPlain(buffer, 0, LittleEndianConsts.SHORT_SIZE);int sid = LittleEndian.getUShort(buffer, 0);shouldSkipEncryptionOnCurrentRecord = isNeverEncryptedRecord(sid);return sid;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateImageBuilderStreamingURLResult createImageBuilderStreamingURL(CreateImageBuilderStreamingURLRequest request) {request = beforeClientExecution(request);return executeCreateImageBuilderStreamingURL(request);}",
    "output": "public virtual CreateImageBuilderStreamingURLResponse CreateImageBuilderStreamingURL(CreateImageBuilderStreamingURLRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateImageBuilderStreamingURLRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateImageBuilderStreamingURLResponseUnmarshaller.Instance;return Invoke<CreateImageBuilderStreamingURLResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateImageBuilderStreamingURLResponse CreateImageBuilderStreamingURL(CreateImageBuilderStreamingURLRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateImageBuilderStreamingURLRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateImageBuilderStreamingURLResponseUnmarshaller.Instance;return Invoke<CreateImageBuilderStreamingURLResponse>(request, options);}",
    "output": "public CreateImageBuilderStreamingURLResult createImageBuilderStreamingURL(CreateImageBuilderStreamingURLRequest request) {request = beforeClientExecution(request);return executeCreateImageBuilderStreamingURL(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SheetIdentifier(String bookName, NameIdentifier sheetIdentifier) {_bookName = bookName;_sheetIdentifier = sheetIdentifier;}",
    "output": "public SheetIdentifier(String bookName, NameIdentifier sheetIdentifier){_bookName = bookName;_sheetIdentifier = sheetIdentifier;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SheetIdentifier(String bookName, NameIdentifier sheetIdentifier){_bookName = bookName;_sheetIdentifier = sheetIdentifier;}",
    "output": "public SheetIdentifier(String bookName, NameIdentifier sheetIdentifier) {_bookName = bookName;_sheetIdentifier = sheetIdentifier;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public boolean equals( Object o ) {return o instanceof PortugueseStemmer;}",
    "output": "public override bool Equals(object o){return o is PortugueseStemmer;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override bool Equals(object o){return o is PortugueseStemmer;}",
    "output": "public boolean equals( Object o ) {return o instanceof PortugueseStemmer;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public PasswordRecord clone() {return copy();}",
    "output": "public override Object Clone(){return new PasswordRecord(field_1_password);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override Object Clone(){return new PasswordRecord(field_1_password);}",
    "output": "public PasswordRecord clone() {return copy();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DescribeTableRequest(String tableName) {setTableName(tableName);}",
    "output": "public DescribeTableRequest(string tableName){_tableName = tableName;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public DescribeTableRequest(string tableName){_tableName = tableName;}",
    "output": "public DescribeTableRequest(String tableName) {setTableName(tableName);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ModifyCacheParameterGroupResult modifyCacheParameterGroup(ModifyCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheParameterGroup(request);}",
    "output": "public virtual ModifyCacheParameterGroupResponse ModifyCacheParameterGroup(ModifyCacheParameterGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyCacheParameterGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyCacheParameterGroupResponseUnmarshaller.Instance;return Invoke<ModifyCacheParameterGroupResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ModifyCacheParameterGroupResponse ModifyCacheParameterGroup(ModifyCacheParameterGroupRequest request){var options = new InvokeOptions();options.RequestMarshaller = ModifyCacheParameterGroupRequestMarshaller.Instance;options.ResponseUnmarshaller = ModifyCacheParameterGroupResponseUnmarshaller.Instance;return Invoke<ModifyCacheParameterGroupResponse>(request, options);}",
    "output": "public ModifyCacheParameterGroupResult modifyCacheParameterGroup(ModifyCacheParameterGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheParameterGroup(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public E set(int location, E object) {ListIterator<E> it = listIterator(location);if (!it.hasNext()) {throw new IndexOutOfBoundsException();}E result = it.next();it.set(object);return result;}",
    "output": "public override E set(int location, E @object){java.util.ListIterator<E> it = listIterator(location);if (!it.hasNext()){throw new System.IndexOutOfRangeException();}E result = it.next();it.set(@object);return result;}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override E set(int location, E @object){java.util.ListIterator<E> it = listIterator(location);if (!it.hasNext()){throw new System.IndexOutOfRangeException();}E result = it.next();it.set(@object);return result;}",
    "output": "public E set(int location, E object) {ListIterator<E> it = listIterator(location);if (!it.hasNext()) {throw new IndexOutOfBoundsException();}E result = it.next();it.set(object);return result;}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public String toFormulaString() {return NumberToTextConverter.toText(field_1_value);}",
    "output": "public override String ToFormulaString(){return NumberToTextConverter.ToText(Value);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public override String ToFormulaString(){return NumberToTextConverter.ToText(Value);}",
    "output": "public String toFormulaString() {return NumberToTextConverter.toText(field_1_value);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ListBootstrapActionsResult listBootstrapActions(ListBootstrapActionsRequest request) {request = beforeClientExecution(request);return executeListBootstrapActions(request);}",
    "output": "public virtual ListBootstrapActionsResponse ListBootstrapActions(ListBootstrapActionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListBootstrapActionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListBootstrapActionsResponseUnmarshaller.Instance;return Invoke<ListBootstrapActionsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual ListBootstrapActionsResponse ListBootstrapActions(ListBootstrapActionsRequest request){var options = new InvokeOptions();options.RequestMarshaller = ListBootstrapActionsRequestMarshaller.Instance;options.ResponseUnmarshaller = ListBootstrapActionsResponseUnmarshaller.Instance;return Invoke<ListBootstrapActionsResponse>(request, options);}",
    "output": "public ListBootstrapActionsResult listBootstrapActions(ListBootstrapActionsRequest request) {request = beforeClientExecution(request);return executeListBootstrapActions(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void serialize(LittleEndianOutput out) {out.writeShort(_wStyle);out.writeShort(_cLine);out.writeShort(_dxMin);StringUtil.writeUnicodeString(out, _str);if(_unused != null) {out.writeByte(_unused);}}",
    "output": "public void Serialize(ILittleEndianOutput out1) {out1.WriteShort(_wStyle);out1.WriteShort(_cLine);out1.WriteShort(_dxMin);StringUtil.WriteUnicodeString(out1, _str);out1.WriteByte(_unused);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void Serialize(ILittleEndianOutput out1) {out1.WriteShort(_wStyle);out1.WriteShort(_cLine);out1.WriteShort(_dxMin);StringUtil.WriteUnicodeString(out1, _str);out1.WriteByte(_unused);}",
    "output": "public void serialize(LittleEndianOutput out) {out.writeShort(_wStyle);out.writeShort(_cLine);out.writeShort(_dxMin);StringUtil.writeUnicodeString(out, _str);if(_unused != null) {out.writeByte(_unused);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {super(input);this.synonyms = synonyms;this.ignoreCase = ignoreCase;this.fst = synonyms.fst;if (fst == null) {throw new IllegalArgumentException(\"fst must be non-null\");}this.fstReader = fst.getBytesReader();rollBufferSize = 1+synonyms.maxHorizontalContext;futureInputs = new PendingInput[rollBufferSize];futureOutputs = new PendingOutputs[rollBufferSize];for(int pos=0;pos<rollBufferSize;pos++) {futureInputs[pos] = new PendingInput();futureOutputs[pos] = new PendingOutputs();}scratchArc = new FST.Arc<>();}",
    "output": "public SynonymFilter(TokenStream input, SynonymMap synonyms, bool ignoreCase): base(input){termAtt = AddAttribute<ICharTermAttribute>();posIncrAtt = AddAttribute<IPositionIncrementAttribute>();posLenAtt = AddAttribute<IPositionLengthAttribute>();typeAtt = AddAttribute<ITypeAttribute>();offsetAtt = AddAttribute<IOffsetAttribute>();this.synonyms = synonyms;this.ignoreCase = ignoreCase;this.fst = synonyms.Fst;if (fst == null){throw new System.ArgumentException(\"fst must be non-null\");}this.fstReader = fst.GetBytesReader();rollBufferSize = 1 + synonyms.MaxHorizontalContext;futureInputs = new PendingInput[rollBufferSize];futureOutputs = new PendingOutputs[rollBufferSize];for (int pos = 0; pos < rollBufferSize; pos++){futureInputs[pos] = new PendingInput();futureOutputs[pos] = new PendingOutputs();}scratchArc = new FST.Arc<BytesRef>();}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public SynonymFilter(TokenStream input, SynonymMap synonyms, bool ignoreCase): base(input){termAtt = AddAttribute<ICharTermAttribute>();posIncrAtt = AddAttribute<IPositionIncrementAttribute>();posLenAtt = AddAttribute<IPositionLengthAttribute>();typeAtt = AddAttribute<ITypeAttribute>();offsetAtt = AddAttribute<IOffsetAttribute>();this.synonyms = synonyms;this.ignoreCase = ignoreCase;this.fst = synonyms.Fst;if (fst == null){throw new System.ArgumentException(\"fst must be non-null\");}this.fstReader = fst.GetBytesReader();rollBufferSize = 1 + synonyms.MaxHorizontalContext;futureInputs = new PendingInput[rollBufferSize];futureOutputs = new PendingOutputs[rollBufferSize];for (int pos = 0; pos < rollBufferSize; pos++){futureInputs[pos] = new PendingInput();futureOutputs[pos] = new PendingOutputs();}scratchArc = new FST.Arc<BytesRef>();}",
    "output": "public SynonymFilter(TokenStream input, SynonymMap synonyms, boolean ignoreCase) {super(input);this.synonyms = synonyms;this.ignoreCase = ignoreCase;this.fst = synonyms.fst;if (fst == null) {throw new IllegalArgumentException(\"fst must be non-null\");}this.fstReader = fst.getBytesReader();rollBufferSize = 1+synonyms.maxHorizontalContext;futureInputs = new PendingInput[rollBufferSize];futureOutputs = new PendingOutputs[rollBufferSize];for(int pos=0;pos<rollBufferSize;pos++) {futureInputs[pos] = new PendingInput();futureOutputs[pos] = new PendingOutputs();}scratchArc = new FST.Arc<>();}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public CreateApiResult createApi(CreateApiRequest request) {request = beforeClientExecution(request);return executeCreateApi(request);}",
    "output": "public virtual CreateApiResponse CreateApi(CreateApiRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateApiRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateApiResponseUnmarshaller.Instance;return Invoke<CreateApiResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual CreateApiResponse CreateApi(CreateApiRequest request){var options = new InvokeOptions();options.RequestMarshaller = CreateApiRequestMarshaller.Instance;options.ResponseUnmarshaller = CreateApiResponseUnmarshaller.Instance;return Invoke<CreateApiResponse>(request, options);}",
    "output": "public CreateApiResult createApi(CreateApiRequest request) {request = beforeClientExecution(request);return executeCreateApi(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public IndexOutput createOutput(String name, IOContext context) throws IOException {ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {return delegate.createOutput(name, context);} else {return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);}}",
    "output": "public IndexOutput createOutput(string name, IOContext context) throws IOException{ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect){return @delegate.createOutput(name, context);}else{ensureCanWrite(name);return new NativeUnixIndexOutput(new File(Directory, name), mergeBufferSize);}}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public IndexOutput createOutput(string name, IOContext context) throws IOException{ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect){return @delegate.createOutput(name, context);}else{ensureCanWrite(name);return new NativeUnixIndexOutput(new File(Directory, name), mergeBufferSize);}}",
    "output": "public IndexOutput createOutput(String name, IOContext context) throws IOException {ensureOpen();if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {return delegate.createOutput(name, context);} else {return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);}}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public void drawArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,\"drawArc not supported\");}",
    "output": "public void DrawArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (Logger.Check(POILogger.WARN))Logger.Log(POILogger.WARN, \"DrawArc not supported\");}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public void DrawArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (Logger.Check(POILogger.WARN))Logger.Log(POILogger.WARN, \"DrawArc not supported\");}",
    "output": "public void drawArc(int x, int y, int width, int height,int startAngle, int arcAngle){if (logger.check( POILogger.WARN ))logger.log(POILogger.WARN,\"drawArc not supported\");}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public UpdateUserSettingsResult updateUserSettings(UpdateUserSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateUserSettings(request);}",
    "output": "public virtual UpdateUserSettingsResponse UpdateUserSettings(UpdateUserSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateUserSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateUserSettingsResponseUnmarshaller.Instance;return Invoke<UpdateUserSettingsResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual UpdateUserSettingsResponse UpdateUserSettings(UpdateUserSettingsRequest request){var options = new InvokeOptions();options.RequestMarshaller = UpdateUserSettingsRequestMarshaller.Instance;options.ResponseUnmarshaller = UpdateUserSettingsResponseUnmarshaller.Instance;return Invoke<UpdateUserSettingsResponse>(request, options);}",
    "output": "public UpdateUserSettingsResult updateUserSettings(UpdateUserSettingsRequest request) {request = beforeClientExecution(request);return executeUpdateUserSettings(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public DeleteDiskSnapshotResult deleteDiskSnapshot(DeleteDiskSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteDiskSnapshot(request);}",
    "output": "public virtual DeleteDiskSnapshotResponse DeleteDiskSnapshot(DeleteDiskSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDiskSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDiskSnapshotResponseUnmarshaller.Instance;return Invoke<DeleteDiskSnapshotResponse>(request, options);}"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public virtual DeleteDiskSnapshotResponse DeleteDiskSnapshot(DeleteDiskSnapshotRequest request){var options = new InvokeOptions();options.RequestMarshaller = DeleteDiskSnapshotRequestMarshaller.Instance;options.ResponseUnmarshaller = DeleteDiskSnapshotResponseUnmarshaller.Instance;return Invoke<DeleteDiskSnapshotResponse>(request, options);}",
    "output": "public DeleteDiskSnapshotResult deleteDiskSnapshot(DeleteDiskSnapshotRequest request) {request = beforeClientExecution(request);return executeDeleteDiskSnapshot(request);}"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public ColumnInfoRecord() {setColumnWidth(2275);_options = 2;_xfIndex = 0x0f;field_6_reserved = 2; }",
    "output": "public ColumnInfoRecord(){this.ColumnWidth = 2275;_options = 2;_xf_index = 0x0f;field_6_reserved = 2; }"
  },
  {
    "instruction": "Translate the following C# function into a corresponding Java function",
    "input": "public ColumnInfoRecord(){this.ColumnWidth = 2275;_options = 2;_xf_index = 0x0f;field_6_reserved = 2; }",
    "output": "public ColumnInfoRecord() {setColumnWidth(2275);_options = 2;_xfIndex = 0x0f;field_6_reserved = 2; }"
  },
  {
    "instruction": "Translate the following Java function into a corresponding C# function",
    "input": "public final long getLong(int index) {checkIndex(index, SizeOf.LONG);return Memory.peekLong(backingArray, offset + index, order);}",
    "output": "public sealed override long getLong(int index){checkIndex(index, libcore.io.SizeOf.LONG);return libcore.io.Memory.peekLong(backingArray, offset + index, _order);}"
  }
]
